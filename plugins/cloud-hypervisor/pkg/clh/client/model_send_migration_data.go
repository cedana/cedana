/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendMigrationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMigrationData{}

// SendMigrationData struct for SendMigrationData
type SendMigrationData struct {
	DestinationUrl string `json:"destination_url"`
	Local *bool `json:"local,omitempty"`
}

type _SendMigrationData SendMigrationData

// NewSendMigrationData instantiates a new SendMigrationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMigrationData(destinationUrl string) *SendMigrationData {
	this := SendMigrationData{}
	this.DestinationUrl = destinationUrl
	return &this
}

// NewSendMigrationDataWithDefaults instantiates a new SendMigrationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMigrationDataWithDefaults() *SendMigrationData {
	this := SendMigrationData{}
	return &this
}

// GetDestinationUrl returns the DestinationUrl field value
func (o *SendMigrationData) GetDestinationUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationUrl
}

// GetDestinationUrlOk returns a tuple with the DestinationUrl field value
// and a boolean to check if the value has been set.
func (o *SendMigrationData) GetDestinationUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationUrl, true
}

// SetDestinationUrl sets field value
func (o *SendMigrationData) SetDestinationUrl(v string) {
	o.DestinationUrl = v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *SendMigrationData) GetLocal() bool {
	if o == nil || IsNil(o.Local) {
		var ret bool
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMigrationData) GetLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *SendMigrationData) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given bool and assigns it to the Local field.
func (o *SendMigrationData) SetLocal(v bool) {
	o.Local = &v
}

func (o SendMigrationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMigrationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_url"] = o.DestinationUrl
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	return toSerialize, nil
}

func (o *SendMigrationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendMigrationData := _SendMigrationData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendMigrationData)

	if err != nil {
		return err
	}

	*o = SendMigrationData(varSendMigrationData)

	return err
}

type NullableSendMigrationData struct {
	value *SendMigrationData
	isSet bool
}

func (v NullableSendMigrationData) Get() *SendMigrationData {
	return v.value
}

func (v *NullableSendMigrationData) Set(val *SendMigrationData) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMigrationData) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMigrationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMigrationData(val *SendMigrationData) *NullableSendMigrationData {
	return &NullableSendMigrationData{value: val, isSet: true}
}

func (v NullableSendMigrationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMigrationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



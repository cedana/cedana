/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConsoleConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleConfig{}

// ConsoleConfig struct for ConsoleConfig
type ConsoleConfig struct {
	File *string `json:"file,omitempty"`
	Socket *string `json:"socket,omitempty"`
	Mode string `json:"mode"`
	Iommu *bool `json:"iommu,omitempty"`
}

type _ConsoleConfig ConsoleConfig

// NewConsoleConfig instantiates a new ConsoleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleConfig(mode string) *ConsoleConfig {
	this := ConsoleConfig{}
	this.Mode = mode
	var iommu bool = false
	this.Iommu = &iommu
	return &this
}

// NewConsoleConfigWithDefaults instantiates a new ConsoleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleConfigWithDefaults() *ConsoleConfig {
	this := ConsoleConfig{}
	var iommu bool = false
	this.Iommu = &iommu
	return &this
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ConsoleConfig) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleConfig) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ConsoleConfig) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *ConsoleConfig) SetFile(v string) {
	o.File = &v
}

// GetSocket returns the Socket field value if set, zero value otherwise.
func (o *ConsoleConfig) GetSocket() string {
	if o == nil || IsNil(o.Socket) {
		var ret string
		return ret
	}
	return *o.Socket
}

// GetSocketOk returns a tuple with the Socket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleConfig) GetSocketOk() (*string, bool) {
	if o == nil || IsNil(o.Socket) {
		return nil, false
	}
	return o.Socket, true
}

// HasSocket returns a boolean if a field has been set.
func (o *ConsoleConfig) HasSocket() bool {
	if o != nil && !IsNil(o.Socket) {
		return true
	}

	return false
}

// SetSocket gets a reference to the given string and assigns it to the Socket field.
func (o *ConsoleConfig) SetSocket(v string) {
	o.Socket = &v
}

// GetMode returns the Mode field value
func (o *ConsoleConfig) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *ConsoleConfig) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *ConsoleConfig) SetMode(v string) {
	o.Mode = v
}

// GetIommu returns the Iommu field value if set, zero value otherwise.
func (o *ConsoleConfig) GetIommu() bool {
	if o == nil || IsNil(o.Iommu) {
		var ret bool
		return ret
	}
	return *o.Iommu
}

// GetIommuOk returns a tuple with the Iommu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleConfig) GetIommuOk() (*bool, bool) {
	if o == nil || IsNil(o.Iommu) {
		return nil, false
	}
	return o.Iommu, true
}

// HasIommu returns a boolean if a field has been set.
func (o *ConsoleConfig) HasIommu() bool {
	if o != nil && !IsNil(o.Iommu) {
		return true
	}

	return false
}

// SetIommu gets a reference to the given bool and assigns it to the Iommu field.
func (o *ConsoleConfig) SetIommu(v bool) {
	o.Iommu = &v
}

func (o ConsoleConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Socket) {
		toSerialize["socket"] = o.Socket
	}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.Iommu) {
		toSerialize["iommu"] = o.Iommu
	}
	return toSerialize, nil
}

func (o *ConsoleConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConsoleConfig := _ConsoleConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConsoleConfig)

	if err != nil {
		return err
	}

	*o = ConsoleConfig(varConsoleConfig)

	return err
}

type NullableConsoleConfig struct {
	value *ConsoleConfig
	isSet bool
}

func (v NullableConsoleConfig) Get() *ConsoleConfig {
	return v.value
}

func (v *NullableConsoleConfig) Set(val *ConsoleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleConfig(val *ConsoleConfig) *NullableConsoleConfig {
	return &NullableConsoleConfig{value: val, isSet: true}
}

func (v NullableConsoleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VmmPingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmmPingResponse{}

// VmmPingResponse Virtual Machine Monitor information
type VmmPingResponse struct {
	BuildVersion *string `json:"build_version,omitempty"`
	Version string `json:"version"`
	Pid *int64 `json:"pid,omitempty"`
	Features []string `json:"features,omitempty"`
}

type _VmmPingResponse VmmPingResponse

// NewVmmPingResponse instantiates a new VmmPingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmmPingResponse(version string) *VmmPingResponse {
	this := VmmPingResponse{}
	this.Version = version
	return &this
}

// NewVmmPingResponseWithDefaults instantiates a new VmmPingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmmPingResponseWithDefaults() *VmmPingResponse {
	this := VmmPingResponse{}
	return &this
}

// GetBuildVersion returns the BuildVersion field value if set, zero value otherwise.
func (o *VmmPingResponse) GetBuildVersion() string {
	if o == nil || IsNil(o.BuildVersion) {
		var ret string
		return ret
	}
	return *o.BuildVersion
}

// GetBuildVersionOk returns a tuple with the BuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmmPingResponse) GetBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BuildVersion) {
		return nil, false
	}
	return o.BuildVersion, true
}

// HasBuildVersion returns a boolean if a field has been set.
func (o *VmmPingResponse) HasBuildVersion() bool {
	if o != nil && !IsNil(o.BuildVersion) {
		return true
	}

	return false
}

// SetBuildVersion gets a reference to the given string and assigns it to the BuildVersion field.
func (o *VmmPingResponse) SetBuildVersion(v string) {
	o.BuildVersion = &v
}

// GetVersion returns the Version field value
func (o *VmmPingResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VmmPingResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VmmPingResponse) SetVersion(v string) {
	o.Version = v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *VmmPingResponse) GetPid() int64 {
	if o == nil || IsNil(o.Pid) {
		var ret int64
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmmPingResponse) GetPidOk() (*int64, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *VmmPingResponse) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given int64 and assigns it to the Pid field.
func (o *VmmPingResponse) SetPid(v int64) {
	o.Pid = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *VmmPingResponse) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmmPingResponse) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *VmmPingResponse) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *VmmPingResponse) SetFeatures(v []string) {
	o.Features = v
}

func (o VmmPingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmmPingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildVersion) {
		toSerialize["build_version"] = o.BuildVersion
	}
	toSerialize["version"] = o.Version
	if !IsNil(o.Pid) {
		toSerialize["pid"] = o.Pid
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	return toSerialize, nil
}

func (o *VmmPingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmmPingResponse := _VmmPingResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmmPingResponse)

	if err != nil {
		return err
	}

	*o = VmmPingResponse(varVmmPingResponse)

	return err
}

type NullableVmmPingResponse struct {
	value *VmmPingResponse
	isSet bool
}

func (v NullableVmmPingResponse) Get() *VmmPingResponse {
	return v.value
}

func (v *NullableVmmPingResponse) Set(val *VmmPingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVmmPingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVmmPingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmmPingResponse(val *VmmPingResponse) *NullableVmmPingResponse {
	return &NullableVmmPingResponse{value: val, isSet: true}
}

func (v NullableVmmPingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmmPingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NumaConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumaConfig{}

// NumaConfig struct for NumaConfig
type NumaConfig struct {
	GuestNumaId int32 `json:"guest_numa_id"`
	Cpus []int32 `json:"cpus,omitempty"`
	Distances []NumaDistance `json:"distances,omitempty"`
	MemoryZones []string `json:"memory_zones,omitempty"`
	SgxEpcSections []string `json:"sgx_epc_sections,omitempty"`
	PciSegments []int32 `json:"pci_segments,omitempty"`
}

type _NumaConfig NumaConfig

// NewNumaConfig instantiates a new NumaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumaConfig(guestNumaId int32) *NumaConfig {
	this := NumaConfig{}
	this.GuestNumaId = guestNumaId
	return &this
}

// NewNumaConfigWithDefaults instantiates a new NumaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumaConfigWithDefaults() *NumaConfig {
	this := NumaConfig{}
	return &this
}

// GetGuestNumaId returns the GuestNumaId field value
func (o *NumaConfig) GetGuestNumaId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GuestNumaId
}

// GetGuestNumaIdOk returns a tuple with the GuestNumaId field value
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetGuestNumaIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuestNumaId, true
}

// SetGuestNumaId sets field value
func (o *NumaConfig) SetGuestNumaId(v int32) {
	o.GuestNumaId = v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *NumaConfig) GetCpus() []int32 {
	if o == nil || IsNil(o.Cpus) {
		var ret []int32
		return ret
	}
	return o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetCpusOk() ([]int32, bool) {
	if o == nil || IsNil(o.Cpus) {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *NumaConfig) HasCpus() bool {
	if o != nil && !IsNil(o.Cpus) {
		return true
	}

	return false
}

// SetCpus gets a reference to the given []int32 and assigns it to the Cpus field.
func (o *NumaConfig) SetCpus(v []int32) {
	o.Cpus = v
}

// GetDistances returns the Distances field value if set, zero value otherwise.
func (o *NumaConfig) GetDistances() []NumaDistance {
	if o == nil || IsNil(o.Distances) {
		var ret []NumaDistance
		return ret
	}
	return o.Distances
}

// GetDistancesOk returns a tuple with the Distances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetDistancesOk() ([]NumaDistance, bool) {
	if o == nil || IsNil(o.Distances) {
		return nil, false
	}
	return o.Distances, true
}

// HasDistances returns a boolean if a field has been set.
func (o *NumaConfig) HasDistances() bool {
	if o != nil && !IsNil(o.Distances) {
		return true
	}

	return false
}

// SetDistances gets a reference to the given []NumaDistance and assigns it to the Distances field.
func (o *NumaConfig) SetDistances(v []NumaDistance) {
	o.Distances = v
}

// GetMemoryZones returns the MemoryZones field value if set, zero value otherwise.
func (o *NumaConfig) GetMemoryZones() []string {
	if o == nil || IsNil(o.MemoryZones) {
		var ret []string
		return ret
	}
	return o.MemoryZones
}

// GetMemoryZonesOk returns a tuple with the MemoryZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetMemoryZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.MemoryZones) {
		return nil, false
	}
	return o.MemoryZones, true
}

// HasMemoryZones returns a boolean if a field has been set.
func (o *NumaConfig) HasMemoryZones() bool {
	if o != nil && !IsNil(o.MemoryZones) {
		return true
	}

	return false
}

// SetMemoryZones gets a reference to the given []string and assigns it to the MemoryZones field.
func (o *NumaConfig) SetMemoryZones(v []string) {
	o.MemoryZones = v
}

// GetSgxEpcSections returns the SgxEpcSections field value if set, zero value otherwise.
func (o *NumaConfig) GetSgxEpcSections() []string {
	if o == nil || IsNil(o.SgxEpcSections) {
		var ret []string
		return ret
	}
	return o.SgxEpcSections
}

// GetSgxEpcSectionsOk returns a tuple with the SgxEpcSections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetSgxEpcSectionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SgxEpcSections) {
		return nil, false
	}
	return o.SgxEpcSections, true
}

// HasSgxEpcSections returns a boolean if a field has been set.
func (o *NumaConfig) HasSgxEpcSections() bool {
	if o != nil && !IsNil(o.SgxEpcSections) {
		return true
	}

	return false
}

// SetSgxEpcSections gets a reference to the given []string and assigns it to the SgxEpcSections field.
func (o *NumaConfig) SetSgxEpcSections(v []string) {
	o.SgxEpcSections = v
}

// GetPciSegments returns the PciSegments field value if set, zero value otherwise.
func (o *NumaConfig) GetPciSegments() []int32 {
	if o == nil || IsNil(o.PciSegments) {
		var ret []int32
		return ret
	}
	return o.PciSegments
}

// GetPciSegmentsOk returns a tuple with the PciSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumaConfig) GetPciSegmentsOk() ([]int32, bool) {
	if o == nil || IsNil(o.PciSegments) {
		return nil, false
	}
	return o.PciSegments, true
}

// HasPciSegments returns a boolean if a field has been set.
func (o *NumaConfig) HasPciSegments() bool {
	if o != nil && !IsNil(o.PciSegments) {
		return true
	}

	return false
}

// SetPciSegments gets a reference to the given []int32 and assigns it to the PciSegments field.
func (o *NumaConfig) SetPciSegments(v []int32) {
	o.PciSegments = v
}

func (o NumaConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumaConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["guest_numa_id"] = o.GuestNumaId
	if !IsNil(o.Cpus) {
		toSerialize["cpus"] = o.Cpus
	}
	if !IsNil(o.Distances) {
		toSerialize["distances"] = o.Distances
	}
	if !IsNil(o.MemoryZones) {
		toSerialize["memory_zones"] = o.MemoryZones
	}
	if !IsNil(o.SgxEpcSections) {
		toSerialize["sgx_epc_sections"] = o.SgxEpcSections
	}
	if !IsNil(o.PciSegments) {
		toSerialize["pci_segments"] = o.PciSegments
	}
	return toSerialize, nil
}

func (o *NumaConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"guest_numa_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNumaConfig := _NumaConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNumaConfig)

	if err != nil {
		return err
	}

	*o = NumaConfig(varNumaConfig)

	return err
}

type NullableNumaConfig struct {
	value *NumaConfig
	isSet bool
}

func (v NullableNumaConfig) Get() *NumaConfig {
	return v.value
}

func (v *NullableNumaConfig) Set(val *NumaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNumaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNumaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumaConfig(val *NumaConfig) *NullableNumaConfig {
	return &NullableNumaConfig{value: val, isSet: true}
}

func (v NullableNumaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TpmConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TpmConfig{}

// TpmConfig struct for TpmConfig
type TpmConfig struct {
	Socket string `json:"socket"`
}

type _TpmConfig TpmConfig

// NewTpmConfig instantiates a new TpmConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTpmConfig(socket string) *TpmConfig {
	this := TpmConfig{}
	this.Socket = socket
	return &this
}

// NewTpmConfigWithDefaults instantiates a new TpmConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTpmConfigWithDefaults() *TpmConfig {
	this := TpmConfig{}
	return &this
}

// GetSocket returns the Socket field value
func (o *TpmConfig) GetSocket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Socket
}

// GetSocketOk returns a tuple with the Socket field value
// and a boolean to check if the value has been set.
func (o *TpmConfig) GetSocketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Socket, true
}

// SetSocket sets field value
func (o *TpmConfig) SetSocket(v string) {
	o.Socket = v
}

func (o TpmConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TpmConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["socket"] = o.Socket
	return toSerialize, nil
}

func (o *TpmConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"socket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTpmConfig := _TpmConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTpmConfig)

	if err != nil {
		return err
	}

	*o = TpmConfig(varTpmConfig)

	return err
}

type NullableTpmConfig struct {
	value *TpmConfig
	isSet bool
}

func (v NullableTpmConfig) Get() *TpmConfig {
	return v.value
}

func (v *NullableTpmConfig) Set(val *TpmConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTpmConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTpmConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTpmConfig(val *TpmConfig) *NullableTpmConfig {
	return &NullableTpmConfig{value: val, isSet: true}
}

func (v NullableTpmConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTpmConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PmemConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PmemConfig{}

// PmemConfig struct for PmemConfig
type PmemConfig struct {
	File string `json:"file"`
	Size *int64 `json:"size,omitempty"`
	Iommu *bool `json:"iommu,omitempty"`
	DiscardWrites *bool `json:"discard_writes,omitempty"`
	PciSegment *int32 `json:"pci_segment,omitempty"`
	Id *string `json:"id,omitempty"`
}

type _PmemConfig PmemConfig

// NewPmemConfig instantiates a new PmemConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPmemConfig(file string) *PmemConfig {
	this := PmemConfig{}
	this.File = file
	var iommu bool = false
	this.Iommu = &iommu
	var discardWrites bool = false
	this.DiscardWrites = &discardWrites
	return &this
}

// NewPmemConfigWithDefaults instantiates a new PmemConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPmemConfigWithDefaults() *PmemConfig {
	this := PmemConfig{}
	var iommu bool = false
	this.Iommu = &iommu
	var discardWrites bool = false
	this.DiscardWrites = &discardWrites
	return &this
}

// GetFile returns the File field value
func (o *PmemConfig) GetFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *PmemConfig) SetFile(v string) {
	o.File = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PmemConfig) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PmemConfig) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PmemConfig) SetSize(v int64) {
	o.Size = &v
}

// GetIommu returns the Iommu field value if set, zero value otherwise.
func (o *PmemConfig) GetIommu() bool {
	if o == nil || IsNil(o.Iommu) {
		var ret bool
		return ret
	}
	return *o.Iommu
}

// GetIommuOk returns a tuple with the Iommu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetIommuOk() (*bool, bool) {
	if o == nil || IsNil(o.Iommu) {
		return nil, false
	}
	return o.Iommu, true
}

// HasIommu returns a boolean if a field has been set.
func (o *PmemConfig) HasIommu() bool {
	if o != nil && !IsNil(o.Iommu) {
		return true
	}

	return false
}

// SetIommu gets a reference to the given bool and assigns it to the Iommu field.
func (o *PmemConfig) SetIommu(v bool) {
	o.Iommu = &v
}

// GetDiscardWrites returns the DiscardWrites field value if set, zero value otherwise.
func (o *PmemConfig) GetDiscardWrites() bool {
	if o == nil || IsNil(o.DiscardWrites) {
		var ret bool
		return ret
	}
	return *o.DiscardWrites
}

// GetDiscardWritesOk returns a tuple with the DiscardWrites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetDiscardWritesOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscardWrites) {
		return nil, false
	}
	return o.DiscardWrites, true
}

// HasDiscardWrites returns a boolean if a field has been set.
func (o *PmemConfig) HasDiscardWrites() bool {
	if o != nil && !IsNil(o.DiscardWrites) {
		return true
	}

	return false
}

// SetDiscardWrites gets a reference to the given bool and assigns it to the DiscardWrites field.
func (o *PmemConfig) SetDiscardWrites(v bool) {
	o.DiscardWrites = &v
}

// GetPciSegment returns the PciSegment field value if set, zero value otherwise.
func (o *PmemConfig) GetPciSegment() int32 {
	if o == nil || IsNil(o.PciSegment) {
		var ret int32
		return ret
	}
	return *o.PciSegment
}

// GetPciSegmentOk returns a tuple with the PciSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetPciSegmentOk() (*int32, bool) {
	if o == nil || IsNil(o.PciSegment) {
		return nil, false
	}
	return o.PciSegment, true
}

// HasPciSegment returns a boolean if a field has been set.
func (o *PmemConfig) HasPciSegment() bool {
	if o != nil && !IsNil(o.PciSegment) {
		return true
	}

	return false
}

// SetPciSegment gets a reference to the given int32 and assigns it to the PciSegment field.
func (o *PmemConfig) SetPciSegment(v int32) {
	o.PciSegment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PmemConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PmemConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PmemConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PmemConfig) SetId(v string) {
	o.Id = &v
}

func (o PmemConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PmemConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Iommu) {
		toSerialize["iommu"] = o.Iommu
	}
	if !IsNil(o.DiscardWrites) {
		toSerialize["discard_writes"] = o.DiscardWrites
	}
	if !IsNil(o.PciSegment) {
		toSerialize["pci_segment"] = o.PciSegment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *PmemConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPmemConfig := _PmemConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPmemConfig)

	if err != nil {
		return err
	}

	*o = PmemConfig(varPmemConfig)

	return err
}

type NullablePmemConfig struct {
	value *PmemConfig
	isSet bool
}

func (v NullablePmemConfig) Get() *PmemConfig {
	return v.value
}

func (v *NullablePmemConfig) Set(val *PmemConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePmemConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePmemConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePmemConfig(val *PmemConfig) *NullablePmemConfig {
	return &NullablePmemConfig{value: val, isSet: true}
}

func (v NullablePmemConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePmemConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



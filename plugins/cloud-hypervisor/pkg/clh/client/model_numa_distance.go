/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NumaDistance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumaDistance{}

// NumaDistance struct for NumaDistance
type NumaDistance struct {
	Destination int32 `json:"destination"`
	Distance int32 `json:"distance"`
}

type _NumaDistance NumaDistance

// NewNumaDistance instantiates a new NumaDistance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumaDistance(destination int32, distance int32) *NumaDistance {
	this := NumaDistance{}
	this.Destination = destination
	this.Distance = distance
	return &this
}

// NewNumaDistanceWithDefaults instantiates a new NumaDistance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumaDistanceWithDefaults() *NumaDistance {
	this := NumaDistance{}
	return &this
}

// GetDestination returns the Destination field value
func (o *NumaDistance) GetDestination() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *NumaDistance) GetDestinationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *NumaDistance) SetDestination(v int32) {
	o.Destination = v
}

// GetDistance returns the Distance field value
func (o *NumaDistance) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *NumaDistance) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *NumaDistance) SetDistance(v int32) {
	o.Distance = v
}

func (o NumaDistance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumaDistance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination"] = o.Destination
	toSerialize["distance"] = o.Distance
	return toSerialize, nil
}

func (o *NumaDistance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination",
		"distance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNumaDistance := _NumaDistance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNumaDistance)

	if err != nil {
		return err
	}

	*o = NumaDistance(varNumaDistance)

	return err
}

type NullableNumaDistance struct {
	value *NumaDistance
	isSet bool
}

func (v NullableNumaDistance) Get() *NumaDistance {
	return v.value
}

func (v *NullableNumaDistance) Set(val *NumaDistance) {
	v.value = val
	v.isSet = true
}

func (v NullableNumaDistance) IsSet() bool {
	return v.isSet
}

func (v *NullableNumaDistance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumaDistance(val *NumaDistance) *NullableNumaDistance {
	return &NullableNumaDistance{value: val, isSet: true}
}

func (v NullableNumaDistance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumaDistance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.4
// source: comm.proto

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DoComm_DoCapture_FullMethodName = "/comm.DoComm/DoCapture"
	DoComm_DoServe_FullMethodName   = "/comm.DoComm/DoServe"
)

// DoCommClient is the client API for DoComm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoCommClient interface {
	DoCapture(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamReply, error)
	DoServe(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamReply, error)
}

type doCommClient struct {
	cc grpc.ClientConnInterface
}

func NewDoCommClient(cc grpc.ClientConnInterface) DoCommClient {
	return &doCommClient{cc}
}

func (c *doCommClient) DoCapture(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamReply, error) {
	out := new(StreamReply)
	err := c.cc.Invoke(ctx, DoComm_DoCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doCommClient) DoServe(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamReply, error) {
	out := new(StreamReply)
	err := c.cc.Invoke(ctx, DoComm_DoServe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoCommServer is the server API for DoComm service.
// All implementations must embed UnimplementedDoCommServer
// for forward compatibility
type DoCommServer interface {
	DoCapture(context.Context, *StreamRequest) (*StreamReply, error)
	DoServe(context.Context, *StreamRequest) (*StreamReply, error)
	mustEmbedUnimplementedDoCommServer()
}

// UnimplementedDoCommServer must be embedded to have forward compatible implementations.
type UnimplementedDoCommServer struct {
}

func (UnimplementedDoCommServer) DoCapture(context.Context, *StreamRequest) (*StreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCapture not implemented")
}
func (UnimplementedDoCommServer) DoServe(context.Context, *StreamRequest) (*StreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoServe not implemented")
}
func (UnimplementedDoCommServer) mustEmbedUnimplementedDoCommServer() {}

// UnsafeDoCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoCommServer will
// result in compilation errors.
type UnsafeDoCommServer interface {
	mustEmbedUnimplementedDoCommServer()
}

func RegisterDoCommServer(s grpc.ServiceRegistrar, srv DoCommServer) {
	s.RegisterService(&DoComm_ServiceDesc, srv)
}

func _DoComm_DoCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoCommServer).DoCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoComm_DoCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoCommServer).DoCapture(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoComm_DoServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoCommServer).DoServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoComm_DoServe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoCommServer).DoServe(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoComm_ServiceDesc is the grpc.ServiceDesc for DoComm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoComm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm.DoComm",
	HandlerType: (*DoCommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCapture",
			Handler:    _DoComm_DoCapture_Handler,
		},
		{
			MethodName: "DoServe",
			Handler:    _DoComm_DoServe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm.proto",
}

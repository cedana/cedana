syntax = "proto3";

package cedana.services.task;

option go_package = "github.com/cedana/cedana/api/services/task";

// Query functions here work just like your familiar query functions in HTTP GET requests,
// where if you don't specify anything in the query, it will return all the valid results,
// but if you do it will filter out based on the query parameters.

service TaskService {
  // Process
  rpc Start(StartArgs) returns (StartResp);
  rpc Dump(DumpArgs) returns (DumpResp);
  rpc Restore(RestoreArgs) returns (RestoreResp);
  rpc Query(QueryArgs) returns (QueryResp);

  // Containerd
  rpc ContainerdDump(ContainerdDumpArgs) returns (ContainerdDumpResp);
  rpc ContainerdRestore(ContainerdRestoreArgs) returns (ContainerdRestoreResp);
  rpc ContainerdQuery(ContainerdQueryArgs) returns (ContainerdQueryResp);

  rpc ContainerdRootfsDump(ContainerdRootfsDumpArgs) returns (ContainerdRootfsDumpResp);
  rpc ContainerdRootfsRestore(ContainerdRootfsRestoreArgs) returns (ContainerdRootfsRestoreResp);

  // Runc
  rpc RuncDump(RuncDumpArgs) returns (RuncDumpResp);
  rpc RuncRestore(RuncRestoreArgs) returns (RuncRestoreResp);
  rpc RuncQuery(RuncQueryArgs) returns (RuncQueryResp);
  rpc RuncGetPausePid(RuncGetPausePidArgs) returns (RuncGetPausePidResp);

  //CRIO
  rpc CRIORootfsDump(CRIORootfsDumpArgs) returns (CRIORootfsDumpResp);
  rpc CRIOImagePush(CRIOImagePushArgs) returns (CRIOImagePushResp);

  // Streaming
  rpc LogStreaming(stream LogStreamingResp) returns (stream LogStreamingArgs);
  rpc ProcessStateStreaming(ProcessStateStreamingArgs) returns (stream ProcessState);
}

/////////////////////
/////// CRIO ////////
/////////////////////

message CRIOImagePushArgs {
  string OriginalImageRef = 1;
  string NewImageRef = 2;
  string RootfsDiffPath = 3;
}

message CRIOImagePushResp {
  string Message = 1;
}

message CRIORootfsDumpArgs {
  string ContainerID = 1;
  string Dest = 2;
  string ContainerStorage = 3;
}

message CRIORootfsDumpResp {
  string Dest = 1;
}

/////////////////////
////// Process //////
/////////////////////

enum CRType {
  LOCAL = 0;
  REMOTE = 1;
}

message StartArgs {
  string Task = 1;
  string JID = 2;
  string WorkingDir = 3;
  repeated string Env = 4;
  string LogOutputFile = 5;
  uint32 UID = 6;
  uint32 GID = 7;
  bool GPU = 8;
}

message StartResp {
  string Message = 1;
  int32 PID = 2;
  string JID = 3;
}

message DumpArgs {
  int32 PID = 1;
  string Dir = 2;
  CRType Type = 3;
  string JID = 4;
  bool GPU = 5;
}

message DumpResp {
  string Message = 1;
  string CheckpointID = 2;
  string UploadID = 3;
  ProcessState State = 4;
}


message RestoreArgs {
  CRType Type = 1;
  string CheckpointID = 2;
  string CheckpointPath = 3;
  string JID = 4;
  uint32 UID = 5;
  uint32 GID = 6;
}

message RestoreResp {
  string Message = 1;
  int32 NewPID = 2;
  ProcessState State = 3;
}

message QueryArgs {
  repeated int32 PIDs = 1;
  repeated string JIDs = 2;
}

message QueryResp {
  repeated ProcessState Processes = 1;
}

/////////////////////////
////// Containerd ///////
/////////////////////////

message ContainerdDumpArgs {
  string ContainerID = 1;
  string Ref = 2;
}

message ContainerdDumpResp {
  string CheckpointPath = 1;
  string Message = 2;
}

message ContainerdRestoreArgs {
  string ImgPath = 1;
  string ContainerID = 2;
}

message ContainerdRestoreResp {
  string Message = 1;
}

message ContainerdQueryArgs {
  string Root = 1;
  string Namespace = 2;
}

message ContainerdQueryResp {
  repeated ContainerdContainer Containers = 1;
}

message ContainerdContainer {
  string ContainerName = 1;
  string ImageName = 2;
  string SandboxId = 3;
  string SandboxName = 4;
  string SandboxNamespace = 5;
  string SandboxUid = 6;
}

message ContainerdRootfsDumpArgs {
  string ContainerID = 1;
  string ImageRef = 2;
  string Address = 3;
  string Namespace = 4;
}

message ContainerdRootfsDumpResp {
  string ImageRef = 1;
}

message ContainerdRootfsRestoreArgs {
  string ContainerID = 1;
  string ImageRef = 2;
  string Address = 3;
  string Namespace = 4;
}

message ContainerdRootfsRestoreResp {
  string ImageRef = 1;
}

///////////////////
////// Runc ///////
///////////////////

message RuncDumpArgs {
  string Root = 1;
  string CheckpointPath = 2;
  string ContainerID = 3;
  CriuOpts CriuOpts = 4;
  CRType Type = 5;
  ProcessState state = 6;
  bool GPU = 7;
  int32 pid = 8;
}

message RuncDumpResp {
  string Message = 1;
  string CheckpointID = 2;
  string UploadID = 3;
  ProcessState State = 4;
}

message CriuOpts {
  string ImagesDirectory = 1;
  string WorkDirectory = 2;
  string ParentImage = 3;
  bool LeaveRunning = 4;
  bool TcpEstablished = 5;
  bool ExternalUnixConnections = 6;
  bool ShellJob = 7;
  bool FileLocks = 8;
  bool PreDump = 9;
  int32 EmptyNs = 12;
  bool AutoDedup = 13;
  bool LazyPages = 14;
  int32 StatusFd = 15;
  string LsmProfile = 16;
  string LsmMountContext = 17;
  repeated string External = 18;
}

message RuncRestoreArgs {
  string ContainerID = 1;
  string ImagePath = 2;
  bool IsK3s = 3;
  RuncOpts Opts = 4;
  CRType Type = 5;
  string CheckpointID = 6;
}

message RuncRestoreResp {
  string Message = 1;
  ProcessState State = 2;
}

message RuncOpts {
  string Root = 1;
  string ContainerID = 2;
  string Bundle = 3;
  bool SystemdCgroup = 4;
  bool NoPivot = 5;
  bool NoMountFallback = 6;
  bool NoNewKeyring = 7;
  string Rootless = 8;
  bool NoSubreaper = 9;
  bool Keep = 10;
  string ConsoleSocket = 11;
  bool Detatch = 12;
  string PidFile = 13;
  int32 PreserveFds = 14;
  int32 NetPid = 15;
}

message RuncQueryArgs {
  string Root = 1;
  string Namespace = 2;
  repeated string ContainerNames = 3;
  repeated string SandboxNames = 4;
}

message RuncQueryResp {
  repeated RuncContainer Containers = 1;
}

message RuncContainer {
  string ID = 1;
  string BundlePath = 2;
  string ContainerName = 3;
  string ImageName = 4;
  string SandboxId = 5;
  string SandboxName = 6;
  string SandboxUid = 7;
}

message RuncGetPausePidArgs {
  string BundlePath = 1;
}

message RuncGetPausePidResp {
  int64 PausePid = 1;
}

///////////////////////
////// Streaming //////
///////////////////////

message LogStreamingArgs {
  string Timestamp = 1;
  string Source = 2;
  string Level = 3;
  string Msg = 4;
}

message LogStreamingResp {
  string Status = 1;
}

enum ContainerRuntimeOpts {
  CONTAINERD = 0;
  RUNC = 1;
}

message ProcessState {
  int32 PID = 1;
  string Task = 2;
  ContainerRuntimeOpts ContainerRuntime = 3;
  string ContainerID = 4;
  string StartedAt = 5;
  ProcessInfo ProcessInfo = 6;
  string CheckpointPath = 7;
  CheckpointState CheckpointState = 8;
  JobState JobState = 9;
  repeated RemoteState RemoteState = 10;
  bool GPUCheckpointed = 11;
  string JID = 12;
  HostInfo HostInfo = 13;
  CPUInfo CPUInfo = 14;
  MemoryInfo MemoryInfo = 15;
}

message RemoteState {
  string CheckpointID = 1;
  string UploadID = 2;
  int64 Timestamp = 3;
}


message ProcessInfo {
  int32 PID = 1;
  bool AttachedToHardwareAccel = 2;
  repeated OpenFilesStat OpenFds = 3;
  string WorkingDir = 4;
  repeated ConnectionStat OpenConnections = 5;
  float MemoryPercent = 6;
  bool IsRunning = 7;
  string Status = 8;
}

message HostInfo {
  string HostID = 1;
  string Hostname = 4;
  string OS = 5;
  string Platform = 6;
  string KernelVersion = 7;
  string KernelArch = 8;
  string VirtualizationSystem = 9;
  string VirtualizationRole = 10;
}

message CPUInfo {
  int32 Count = 1;
  int32 CPU = 2;
  string VendorID = 3;
  string Family = 4;
  string PhysicalID = 5;
}

message MemoryInfo {
  uint64 Total = 1;
  uint64 Available = 2;
  uint64 Used = 3;
}

message OpenFilesStat {
  string Path = 1;
  uint64 Fd = 2;
  string Mode = 3;
  StreamType Stream = 5;
  enum StreamType {
    STDIN = 0;
    STDOUT = 1;
    STDERR = 2;
    NONE = 3;
  }
}

message ConnectionStat {
  uint32 Fd = 1;
  uint32 Family = 2;
  uint32 Type = 3;
  Addr Laddr = 4;
  Addr Raddr = 5;
  string Status = 6;
  repeated int32 UIDs = 7;
  int32 PID = 8;
}

message Addr {
  string IP = 1;
  uint32 Port = 2;
}

enum JobState {
  JOB_STARTUP_FAILED = 0;
  JOB_KILLED = 1;
  JOB_IDLE = 2;
  JOB_RUNNING = 3;
  JOB_PENDING = 4;
  JOB_DONE = 5;
}

message ProcessStateStreamingArgs {
  string JID = 1;
}

message MetaStateStreamingArgs {
  ProviderEvent Event = 1;
  CheckpointReason CheckpointReason = 2;
}

message CheckpointReason {
  enum CheckpointReasonEnum {
    INSTANCE_TERMINATION = 0;
    JOB_TERMINATION = 1;
    HEARTBEAT = 2;
  }
  CheckpointReasonEnum Reason = 1;
}

message ProviderEvent {
  string InstanceID = 1;
  string FaultCode = 2;
  bool MarkedForTermination = 3;
  int64 TerminationTime = 4;
}

message MetaStateStreamingResp {
  string Status = 1;
}

enum CheckpointState {
  CHECKPOINTED = 0;
  CHECKPOINT_FAILED = 1;
  RESTORED = 2;
  RESTORE_FAILED = 3;
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: checkpoint.sql

package sql

import (
	"context"
)

const createCheckpoint = `-- name: CreateCheckpoint :one

INSERT INTO checkpoints (id, jid, path, time, size) VALUES (?, ?, ?, ?, ?)
RETURNING id, jid, path, time, size
`

type CreateCheckpointParams struct {
	ID   string
	Jid  string
	Path string
	Time int64
	Size int64
}

// ------------------------------
// ---- Checkpoint Queries ------
// ------------------------------
func (q *Queries) CreateCheckpoint(ctx context.Context, arg CreateCheckpointParams) (Checkpoint, error) {
	row := q.db.QueryRowContext(ctx, createCheckpoint,
		arg.ID,
		arg.Jid,
		arg.Path,
		arg.Time,
		arg.Size,
	)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.Jid,
		&i.Path,
		&i.Time,
		&i.Size,
	)
	return i, err
}

const deleteCheckpoint = `-- name: DeleteCheckpoint :exec
DELETE FROM checkpoints WHERE id = ?
`

func (q *Queries) DeleteCheckpoint(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCheckpoint, id)
	return err
}

const getCheckpoint = `-- name: GetCheckpoint :one
SELECT id, jid, path, time, size FROM checkpoints WHERE id = ?
`

func (q *Queries) GetCheckpoint(ctx context.Context, id string) (Checkpoint, error) {
	row := q.db.QueryRowContext(ctx, getCheckpoint, id)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.Jid,
		&i.Path,
		&i.Time,
		&i.Size,
	)
	return i, err
}

const getLatestCheckpoint = `-- name: GetLatestCheckpoint :one
SELECT id, jid, path, time, size FROM checkpoints WHERE jid = ? ORDER BY time DESC LIMIT 1
`

func (q *Queries) GetLatestCheckpoint(ctx context.Context, jid string) (Checkpoint, error) {
	row := q.db.QueryRowContext(ctx, getLatestCheckpoint, jid)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.Jid,
		&i.Path,
		&i.Time,
		&i.Size,
	)
	return i, err
}

const listCheckpoints = `-- name: ListCheckpoints :many
SELECT id, jid, path, time, size FROM checkpoints WHERE jid = ?
`

func (q *Queries) ListCheckpoints(ctx context.Context, jid string) ([]Checkpoint, error) {
	rows, err := q.db.QueryContext(ctx, listCheckpoints, jid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Checkpoint
	for rows.Next() {
		var i Checkpoint
		if err := rows.Scan(
			&i.ID,
			&i.Jid,
			&i.Path,
			&i.Time,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

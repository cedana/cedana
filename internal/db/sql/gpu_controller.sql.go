// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gpu_controller.sql

package sql

import (
	"context"
	"strings"
)

const createGPUController = `-- name: CreateGPUController :exec
INSERT INTO gpu_controllers (ID, Address, PID, AttachedPID, FreezeType)
VALUES (?, ?, ?, ?, ?)
`

type CreateGPUControllerParams struct {
	ID          string
	Address     string
	Pid         int64
	Attachedpid int64
	Freezetype  int64
}

func (q *Queries) CreateGPUController(ctx context.Context, arg CreateGPUControllerParams) error {
	_, err := q.db.ExecContext(ctx, createGPUController,
		arg.ID,
		arg.Address,
		arg.Pid,
		arg.Attachedpid,
		arg.Freezetype,
	)
	return err
}

const deleteGPUController = `-- name: DeleteGPUController :exec
DELETE FROM gpu_controllers
WHERE ID = ?
`

func (q *Queries) DeleteGPUController(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteGPUController, id)
	return err
}

const listGPUControllers = `-- name: ListGPUControllers :many
SELECT id, address, pid, attachedpid, freezetype FROM gpu_controllers
`

func (q *Queries) ListGPUControllers(ctx context.Context) ([]GpuController, error) {
	rows, err := q.db.QueryContext(ctx, listGPUControllers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GpuController
	for rows.Next() {
		var i GpuController
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Pid,
			&i.Attachedpid,
			&i.Freezetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGPUControllersByIDs = `-- name: ListGPUControllersByIDs :many
SELECT id, address, pid, attachedpid, freezetype FROM gpu_controllers
WHERE ID IN (/*SLICE:ids*/?)
`

func (q *Queries) ListGPUControllersByIDs(ctx context.Context, ids []string) ([]GpuController, error) {
	query := listGPUControllersByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GpuController
	for rows.Next() {
		var i GpuController
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Pid,
			&i.Attachedpid,
			&i.Freezetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGPUController = `-- name: UpdateGPUController :exec
UPDATE gpu_controllers SET
    Address = ?,
    PID = ?,
    AttachedPID = ?,
    FreezeType = ?
WHERE ID = ?
`

type UpdateGPUControllerParams struct {
	Address     string
	Pid         int64
	Attachedpid int64
	Freezetype  int64
	ID          string
}

func (q *Queries) UpdateGPUController(ctx context.Context, arg UpdateGPUControllerParams) error {
	_, err := q.db.ExecContext(ctx, updateGPUController,
		arg.Address,
		arg.Pid,
		arg.Attachedpid,
		arg.Freezetype,
		arg.ID,
	)
	return err
}

// This code was autogenerated from cedana.proto, do not edit.
package cedanarpc

import (
	"context"
	"log"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	"github.com/nats-rpc/nrpc"
)

// CheckpointServiceServer is the interface that providers of the service
// CheckpointService should implement.
type CheckpointServiceServer interface {
	Checkpoint(ctx context.Context, req *CheckpointRequest) (*StateResponse, error)
}

// CheckpointServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given CheckpointServiceServer implementation.
type CheckpointServiceHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  CheckpointServiceServer

	encodings []string
}

func NewCheckpointServiceHandler(ctx context.Context, nc nrpc.NatsConn, s CheckpointServiceServer) *CheckpointServiceHandler {
	return &CheckpointServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewCheckpointServiceConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s CheckpointServiceServer) *CheckpointServiceHandler {
	return &CheckpointServiceHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *CheckpointServiceHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *CheckpointServiceHandler) Subject() string {
	return "CheckpointService.>"
}

func (h *CheckpointServiceHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "CheckpointService", 0, msg.Subject)
	if err != nil {
		log.Printf("CheckpointServiceHanlder: CheckpointService subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Checkpoint":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CheckpointHanlder: Checkpoint subject parsing failed: %v", err)
			break
		}
		var req CheckpointRequest
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CheckpointHandler: Checkpoint request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Checkpoint(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("CheckpointServiceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("CheckpointServiceHandler: CheckpointService handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type CheckpointServiceClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewCheckpointServiceClient(nc nrpc.NatsConn) *CheckpointServiceClient {
	return &CheckpointServiceClient{
		nc:      nc,
		Subject: "CheckpointService",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *CheckpointServiceClient) Checkpoint(req *CheckpointRequest) (*StateResponse, error) {

	subject := c.Subject + "." + "Checkpoint"

	// call
	var resp = StateResponse{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

// RestoreServiceServer is the interface that providers of the service
// RestoreService should implement.
type RestoreServiceServer interface {
	Restore(ctx context.Context, req *RestoreRequest) (*StateResponse, error)
}

// RestoreServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given RestoreServiceServer implementation.
type RestoreServiceHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  RestoreServiceServer

	encodings []string
}

func NewRestoreServiceHandler(ctx context.Context, nc nrpc.NatsConn, s RestoreServiceServer) *RestoreServiceHandler {
	return &RestoreServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewRestoreServiceConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s RestoreServiceServer) *RestoreServiceHandler {
	return &RestoreServiceHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *RestoreServiceHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *RestoreServiceHandler) Subject() string {
	return "RestoreService.>"
}

func (h *RestoreServiceHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "RestoreService", 0, msg.Subject)
	if err != nil {
		log.Printf("RestoreServiceHanlder: RestoreService subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RestoreHanlder: Restore subject parsing failed: %v", err)
			break
		}
		var req RestoreRequest
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RestoreHandler: Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("RestoreServiceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("RestoreServiceHandler: RestoreService handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type RestoreServiceClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewRestoreServiceClient(nc nrpc.NatsConn) *RestoreServiceClient {
	return &RestoreServiceClient{
		nc:      nc,
		Subject: "RestoreService",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *RestoreServiceClient) Restore(req *RestoreRequest) (*StateResponse, error) {

	subject := c.Subject + "." + "Restore"

	// call
	var resp = StateResponse{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	CheckpointService *CheckpointServiceClient
	RestoreService *RestoreServiceClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
	}
	c.CheckpointService = NewCheckpointServiceClient(nc)
	c.RestoreService = NewRestoreServiceClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.CheckpointService != nil {
		c.CheckpointService.Encoding = encoding
	}
	if c.RestoreService != nil {
		c.RestoreService.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.CheckpointService != nil {
		c.CheckpointService.Timeout = t
	}
	if c.RestoreService != nil {
		c.RestoreService.Timeout = t
	}
}
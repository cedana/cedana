// Package clhclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package clhclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for ConsoleConfigMode.
const (
	ConsoleConfigModeFile   ConsoleConfigMode = "File"
	ConsoleConfigModeNull   ConsoleConfigMode = "Null"
	ConsoleConfigModeOff    ConsoleConfigMode = "Off"
	ConsoleConfigModePty    ConsoleConfigMode = "Pty"
	ConsoleConfigModeSocket ConsoleConfigMode = "Socket"
	ConsoleConfigModeTty    ConsoleConfigMode = "Tty"
)

// Defines values for DebugConsoleConfigMode.
const (
	DebugConsoleConfigModeFile DebugConsoleConfigMode = "File"
	DebugConsoleConfigModeNull DebugConsoleConfigMode = "Null"
	DebugConsoleConfigModeOff  DebugConsoleConfigMode = "Off"
	DebugConsoleConfigModePty  DebugConsoleConfigMode = "Pty"
	DebugConsoleConfigModeTty  DebugConsoleConfigMode = "Tty"
)

// Defines values for VmInfoState.
const (
	Created  VmInfoState = "Created"
	Paused   VmInfoState = "Paused"
	Running  VmInfoState = "Running"
	Shutdown VmInfoState = "Shutdown"
)

// BalloonConfig defines model for BalloonConfig.
type BalloonConfig struct {
	// DeflateOnOom Deflate balloon when the guest is under memory pressure.
	DeflateOnOom *bool `json:"deflate_on_oom,omitempty"`

	// FreePageReporting Enable guest to report free pages.
	FreePageReporting *bool `json:"free_page_reporting,omitempty"`
	Size              int64 `json:"size"`
}

// ConsoleConfig defines model for ConsoleConfig.
type ConsoleConfig struct {
	File   *string           `json:"file,omitempty"`
	Iommu  *bool             `json:"iommu,omitempty"`
	Mode   ConsoleConfigMode `json:"mode"`
	Socket *string           `json:"socket,omitempty"`
}

// ConsoleConfigMode defines model for ConsoleConfig.Mode.
type ConsoleConfigMode string

// CpuAffinity defines model for CpuAffinity.
type CpuAffinity struct {
	HostCpus []int `json:"host_cpus"`
	Vcpu     int   `json:"vcpu"`
}

// CpuFeatures defines model for CpuFeatures.
type CpuFeatures struct {
	Amx *bool `json:"amx,omitempty"`
}

// CpuTopology defines model for CpuTopology.
type CpuTopology struct {
	CoresPerDie    *int `json:"cores_per_die,omitempty"`
	DiesPerPackage *int `json:"dies_per_package,omitempty"`
	Packages       *int `json:"packages,omitempty"`
	ThreadsPerCore *int `json:"threads_per_core,omitempty"`
}

// CpusConfig defines model for CpusConfig.
type CpusConfig struct {
	Affinity    *[]CpuAffinity `json:"affinity,omitempty"`
	BootVcpus   int            `json:"boot_vcpus"`
	Features    *CpuFeatures   `json:"features,omitempty"`
	KvmHyperv   *bool          `json:"kvm_hyperv,omitempty"`
	MaxPhysBits *int           `json:"max_phys_bits,omitempty"`
	MaxVcpus    int            `json:"max_vcpus"`
	Topology    *CpuTopology   `json:"topology,omitempty"`
}

// DebugConsoleConfig defines model for DebugConsoleConfig.
type DebugConsoleConfig struct {
	File   *string                `json:"file,omitempty"`
	Iobase *int                   `json:"iobase,omitempty"`
	Mode   DebugConsoleConfigMode `json:"mode"`
}

// DebugConsoleConfigMode defines model for DebugConsoleConfig.Mode.
type DebugConsoleConfigMode string

// DeviceConfig defines model for DeviceConfig.
type DeviceConfig struct {
	Id                 *string `json:"id,omitempty"`
	Iommu              *bool   `json:"iommu,omitempty"`
	Path               string  `json:"path"`
	PciSegment         *int16  `json:"pci_segment,omitempty"`
	XNvGpudirectClique *int8   `json:"x_nv_gpudirect_clique,omitempty"`
}

// DeviceNode defines model for DeviceNode.
type DeviceNode struct {
	Children  *[]string                 `json:"children,omitempty"`
	Id        *string                   `json:"id,omitempty"`
	PciBdf    *string                   `json:"pci_bdf,omitempty"`
	Resources *[]map[string]interface{} `json:"resources,omitempty"`
}

// DiskConfig defines model for DiskConfig.
type DiskConfig struct {
	Direct         *bool                `json:"direct,omitempty"`
	Id             *string              `json:"id,omitempty"`
	Iommu          *bool                `json:"iommu,omitempty"`
	NumQueues      *int                 `json:"num_queues,omitempty"`
	Path           string               `json:"path"`
	PciSegment     *int16               `json:"pci_segment,omitempty"`
	QueueAffinity  *[]VirtQueueAffinity `json:"queue_affinity,omitempty"`
	QueueSize      *int                 `json:"queue_size,omitempty"`
	RateLimitGroup *string              `json:"rate_limit_group,omitempty"`

	// RateLimiterConfig Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets.
	RateLimiterConfig *RateLimiterConfig `json:"rate_limiter_config,omitempty"`
	Readonly          *bool              `json:"readonly,omitempty"`
	Serial            *string            `json:"serial,omitempty"`
	VhostSocket       *string            `json:"vhost_socket,omitempty"`
	VhostUser         *bool              `json:"vhost_user,omitempty"`
}

// FsConfig defines model for FsConfig.
type FsConfig struct {
	Id         *string `json:"id,omitempty"`
	NumQueues  int     `json:"num_queues"`
	PciSegment *int16  `json:"pci_segment,omitempty"`
	QueueSize  int     `json:"queue_size"`
	Socket     string  `json:"socket"`
	Tag        string  `json:"tag"`
}

// LandlockConfig defines model for LandlockConfig.
type LandlockConfig struct {
	Access string `json:"access"`
	Path   string `json:"path"`
}

// MemoryConfig defines model for MemoryConfig.
type MemoryConfig struct {
	HotplugMethod  *string             `json:"hotplug_method,omitempty"`
	HotplugSize    *int64              `json:"hotplug_size,omitempty"`
	HotpluggedSize *int64              `json:"hotplugged_size,omitempty"`
	HugepageSize   *int64              `json:"hugepage_size,omitempty"`
	Hugepages      *bool               `json:"hugepages,omitempty"`
	Mergeable      *bool               `json:"mergeable,omitempty"`
	Prefault       *bool               `json:"prefault,omitempty"`
	Shared         *bool               `json:"shared,omitempty"`
	Size           int64               `json:"size"`
	Thp            *bool               `json:"thp,omitempty"`
	Zones          *[]MemoryZoneConfig `json:"zones,omitempty"`
}

// MemoryZoneConfig defines model for MemoryZoneConfig.
type MemoryZoneConfig struct {
	File           *string `json:"file,omitempty"`
	HostNumaNode   *int32  `json:"host_numa_node,omitempty"`
	HotplugSize    *int64  `json:"hotplug_size,omitempty"`
	HotpluggedSize *int64  `json:"hotplugged_size,omitempty"`
	HugepageSize   *int64  `json:"hugepage_size,omitempty"`
	Hugepages      *bool   `json:"hugepages,omitempty"`
	Id             string  `json:"id"`
	Mergeable      *bool   `json:"mergeable,omitempty"`
	Prefault       *bool   `json:"prefault,omitempty"`
	Shared         *bool   `json:"shared,omitempty"`
	Size           int64   `json:"size"`
}

// NetConfig defines model for NetConfig.
type NetConfig struct {
	HostMac    *string `json:"host_mac,omitempty"`
	Id         *string `json:"id,omitempty"`
	Iommu      *bool   `json:"iommu,omitempty"`
	Ip         *string `json:"ip,omitempty"`
	Mac        *string `json:"mac,omitempty"`
	Mask       *string `json:"mask,omitempty"`
	Mtu        *int    `json:"mtu,omitempty"`
	NumQueues  *int    `json:"num_queues,omitempty"`
	PciSegment *int16  `json:"pci_segment,omitempty"`
	QueueSize  *int    `json:"queue_size,omitempty"`

	// RateLimiterConfig Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets.
	RateLimiterConfig *RateLimiterConfig `json:"rate_limiter_config,omitempty"`
	Tap               *string            `json:"tap,omitempty"`
	VhostMode         *string            `json:"vhost_mode,omitempty"`
	VhostSocket       *string            `json:"vhost_socket,omitempty"`
	VhostUser         *bool              `json:"vhost_user,omitempty"`
}

// NumaConfig defines model for NumaConfig.
type NumaConfig struct {
	Cpus           *[]int32        `json:"cpus,omitempty"`
	Distances      *[]NumaDistance `json:"distances,omitempty"`
	GuestNumaId    int32           `json:"guest_numa_id"`
	MemoryZones    *[]string       `json:"memory_zones,omitempty"`
	PciSegments    *[]int32        `json:"pci_segments,omitempty"`
	SgxEpcSections *[]string       `json:"sgx_epc_sections,omitempty"`
}

// NumaDistance defines model for NumaDistance.
type NumaDistance struct {
	Destination int32 `json:"destination"`
	Distance    int32 `json:"distance"`
}

// PayloadConfig Payloads to boot in guest
type PayloadConfig struct {
	Cmdline   *string `json:"cmdline,omitempty"`
	Firmware  *string `json:"firmware,omitempty"`
	Initramfs *string `json:"initramfs,omitempty"`
	Kernel    *string `json:"kernel,omitempty"`
}

// PciDeviceInfo Information about a PCI device
type PciDeviceInfo struct {
	Bdf string `json:"bdf"`
	Id  string `json:"id"`
}

// PciSegmentConfig defines model for PciSegmentConfig.
type PciSegmentConfig struct {
	Mmio32ApertureWeight *int32 `json:"mmio32_aperture_weight,omitempty"`
	Mmio64ApertureWeight *int32 `json:"mmio64_aperture_weight,omitempty"`
	PciSegment           int16  `json:"pci_segment"`
}

// PlatformConfig defines model for PlatformConfig.
type PlatformConfig struct {
	IommuSegments  *[]int16  `json:"iommu_segments,omitempty"`
	NumPciSegments *int16    `json:"num_pci_segments,omitempty"`
	OemStrings     *[]string `json:"oem_strings,omitempty"`
	SerialNumber   *string   `json:"serial_number,omitempty"`
	Tdx            *bool     `json:"tdx,omitempty"`
	Uuid           *string   `json:"uuid,omitempty"`
}

// PmemConfig defines model for PmemConfig.
type PmemConfig struct {
	DiscardWrites *bool   `json:"discard_writes,omitempty"`
	File          string  `json:"file"`
	Id            *string `json:"id,omitempty"`
	Iommu         *bool   `json:"iommu,omitempty"`
	PciSegment    *int16  `json:"pci_segment,omitempty"`
	Size          *int64  `json:"size,omitempty"`
}

// RateLimitGroupConfig defines model for RateLimitGroupConfig.
type RateLimitGroupConfig struct {
	Id string `json:"id"`

	// RateLimiterConfig Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets.
	RateLimiterConfig RateLimiterConfig `json:"rate_limiter_config"`
}

// RateLimiterConfig Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets.
type RateLimiterConfig struct {
	// Bandwidth Defines a token bucket with a maximum capacity (_size_), an initial burst size (_one_time_burst_) and an interval for refilling purposes (_refill_time_). The refill-rate is derived from _size_ and _refill_time_, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill-rate.
	Bandwidth *TokenBucket `json:"bandwidth,omitempty"`

	// Ops Defines a token bucket with a maximum capacity (_size_), an initial burst size (_one_time_burst_) and an interval for refilling purposes (_refill_time_). The refill-rate is derived from _size_ and _refill_time_, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill-rate.
	Ops *TokenBucket `json:"ops,omitempty"`
}

// ReceiveMigrationData defines model for ReceiveMigrationData.
type ReceiveMigrationData struct {
	ReceiverUrl string `json:"receiver_url"`
}

// RestoreConfig defines model for RestoreConfig.
type RestoreConfig struct {
	Prefault  *bool  `json:"prefault,omitempty"`
	SourceUrl string `json:"source_url"`
}

// RngConfig defines model for RngConfig.
type RngConfig struct {
	Iommu *bool  `json:"iommu,omitempty"`
	Src   string `json:"src"`
}

// SendMigrationData defines model for SendMigrationData.
type SendMigrationData struct {
	DestinationUrl string `json:"destination_url"`
	Local          *bool  `json:"local,omitempty"`
}

// SgxEpcConfig defines model for SgxEpcConfig.
type SgxEpcConfig struct {
	Id       string `json:"id"`
	Prefault *bool  `json:"prefault,omitempty"`
	Size     int64  `json:"size"`
}

// TokenBucket Defines a token bucket with a maximum capacity (_size_), an initial burst size (_one_time_burst_) and an interval for refilling purposes (_refill_time_). The refill-rate is derived from _size_ and _refill_time_, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill-rate.
type TokenBucket struct {
	// OneTimeBurst The initial size of a token bucket.
	OneTimeBurst *int64 `json:"one_time_burst,omitempty"`

	// RefillTime The amount of milliseconds it takes for the bucket to refill.
	RefillTime int64 `json:"refill_time"`

	// Size The total number of tokens this bucket can hold.
	Size int64 `json:"size"`
}

// TpmConfig defines model for TpmConfig.
type TpmConfig struct {
	Socket string `json:"socket"`
}

// VdpaConfig defines model for VdpaConfig.
type VdpaConfig struct {
	Id         *string `json:"id,omitempty"`
	Iommu      *bool   `json:"iommu,omitempty"`
	NumQueues  int     `json:"num_queues"`
	Path       string  `json:"path"`
	PciSegment *int16  `json:"pci_segment,omitempty"`
}

// VirtQueueAffinity defines model for VirtQueueAffinity.
type VirtQueueAffinity struct {
	HostCpus   []int `json:"host_cpus"`
	QueueIndex int   `json:"queue_index"`
}

// VmAddUserDevice defines model for VmAddUserDevice.
type VmAddUserDevice struct {
	Socket string `json:"socket"`
}

// VmConfig Virtual machine configuration
type VmConfig struct {
	Balloon        *BalloonConfig      `json:"balloon,omitempty"`
	Console        *ConsoleConfig      `json:"console,omitempty"`
	Cpus           *CpusConfig         `json:"cpus,omitempty"`
	DebugConsole   *DebugConsoleConfig `json:"debug_console,omitempty"`
	Devices        *[]DeviceConfig     `json:"devices,omitempty"`
	Disks          *[]DiskConfig       `json:"disks,omitempty"`
	Fs             *[]FsConfig         `json:"fs,omitempty"`
	Iommu          *bool               `json:"iommu,omitempty"`
	LandlockEnable *bool               `json:"landlock_enable,omitempty"`
	LandlockRules  *[]LandlockConfig   `json:"landlock_rules,omitempty"`
	Memory         *MemoryConfig       `json:"memory,omitempty"`
	Net            *[]NetConfig        `json:"net,omitempty"`
	Numa           *[]NumaConfig       `json:"numa,omitempty"`

	// Payload Payloads to boot in guest
	Payload         PayloadConfig           `json:"payload"`
	PciSegments     *[]PciSegmentConfig     `json:"pci_segments,omitempty"`
	Platform        *PlatformConfig         `json:"platform,omitempty"`
	Pmem            *[]PmemConfig           `json:"pmem,omitempty"`
	Pvpanic         *bool                   `json:"pvpanic,omitempty"`
	RateLimitGroups *[]RateLimitGroupConfig `json:"rate_limit_groups,omitempty"`
	Rng             *RngConfig              `json:"rng,omitempty"`
	Serial          *ConsoleConfig          `json:"serial,omitempty"`
	SgxEpc          *[]SgxEpcConfig         `json:"sgx_epc,omitempty"`
	Tpm             *TpmConfig              `json:"tpm,omitempty"`
	Vdpa            *[]VdpaConfig           `json:"vdpa,omitempty"`
	Vsock           *VsockConfig            `json:"vsock,omitempty"`
	Watchdog        *bool                   `json:"watchdog,omitempty"`
}

// VmCoredumpData defines model for VmCoredumpData.
type VmCoredumpData struct {
	DestinationUrl *string `json:"destination_url,omitempty"`
}

// VmCounters defines model for VmCounters.
type VmCounters map[string]map[string]int64

// VmInfo Virtual Machine information
type VmInfo struct {
	// Config Virtual machine configuration
	Config           VmConfig               `json:"config"`
	DeviceTree       *map[string]DeviceNode `json:"device_tree,omitempty"`
	MemoryActualSize *int64                 `json:"memory_actual_size,omitempty"`
	State            VmInfoState            `json:"state"`
}

// VmInfoState defines model for VmInfo.State.
type VmInfoState string

// VmRemoveDevice defines model for VmRemoveDevice.
type VmRemoveDevice struct {
	Id *string `json:"id,omitempty"`
}

// VmResize defines model for VmResize.
type VmResize struct {
	// DesiredBalloon desired balloon size in bytes
	DesiredBalloon *int64 `json:"desired_balloon,omitempty"`

	// DesiredRam desired memory ram in bytes
	DesiredRam   *int64 `json:"desired_ram,omitempty"`
	DesiredVcpus *int   `json:"desired_vcpus,omitempty"`
}

// VmResizeZone defines model for VmResizeZone.
type VmResizeZone struct {
	// DesiredRam desired memory zone size in bytes
	DesiredRam *int64  `json:"desired_ram,omitempty"`
	Id         *string `json:"id,omitempty"`
}

// VmSnapshotConfig defines model for VmSnapshotConfig.
type VmSnapshotConfig struct {
	DestinationUrl *string `json:"destination_url,omitempty"`
}

// VmmPingResponse Virtual Machine Monitor information
type VmmPingResponse struct {
	BuildVersion *string   `json:"build_version,omitempty"`
	Features     *[]string `json:"features,omitempty"`
	Pid          *int64    `json:"pid,omitempty"`
	Version      string    `json:"version"`
}

// VsockConfig defines model for VsockConfig.
type VsockConfig struct {
	// Cid Guest Vsock CID
	Cid        int64   `json:"cid"`
	Id         *string `json:"id,omitempty"`
	Iommu      *bool   `json:"iommu,omitempty"`
	PciSegment *int16  `json:"pci_segment,omitempty"`

	// Socket Path to UNIX domain socket, used to proxy vsock connections.
	Socket string `json:"socket"`
}

// PutVmAddDeviceJSONRequestBody defines body for PutVmAddDevice for application/json ContentType.
type PutVmAddDeviceJSONRequestBody = DeviceConfig

// PutVmAddDiskJSONRequestBody defines body for PutVmAddDisk for application/json ContentType.
type PutVmAddDiskJSONRequestBody = DiskConfig

// PutVmAddFsJSONRequestBody defines body for PutVmAddFs for application/json ContentType.
type PutVmAddFsJSONRequestBody = FsConfig

// PutVmAddNetJSONRequestBody defines body for PutVmAddNet for application/json ContentType.
type PutVmAddNetJSONRequestBody = NetConfig

// PutVmAddPmemJSONRequestBody defines body for PutVmAddPmem for application/json ContentType.
type PutVmAddPmemJSONRequestBody = PmemConfig

// PutVmAddUserDeviceJSONRequestBody defines body for PutVmAddUserDevice for application/json ContentType.
type PutVmAddUserDeviceJSONRequestBody = VmAddUserDevice

// PutVmAddVdpaJSONRequestBody defines body for PutVmAddVdpa for application/json ContentType.
type PutVmAddVdpaJSONRequestBody = VdpaConfig

// PutVmAddVsockJSONRequestBody defines body for PutVmAddVsock for application/json ContentType.
type PutVmAddVsockJSONRequestBody = VsockConfig

// PutVmCoredumpJSONRequestBody defines body for PutVmCoredump for application/json ContentType.
type PutVmCoredumpJSONRequestBody = VmCoredumpData

// CreateVMJSONRequestBody defines body for CreateVM for application/json ContentType.
type CreateVMJSONRequestBody = VmConfig

// PutVmReceiveMigrationJSONRequestBody defines body for PutVmReceiveMigration for application/json ContentType.
type PutVmReceiveMigrationJSONRequestBody = ReceiveMigrationData

// PutVmRemoveDeviceJSONRequestBody defines body for PutVmRemoveDevice for application/json ContentType.
type PutVmRemoveDeviceJSONRequestBody = VmRemoveDevice

// PutVmResizeJSONRequestBody defines body for PutVmResize for application/json ContentType.
type PutVmResizeJSONRequestBody = VmResize

// PutVmResizeZoneJSONRequestBody defines body for PutVmResizeZone for application/json ContentType.
type PutVmResizeZoneJSONRequestBody = VmResizeZone

// PutVmRestoreJSONRequestBody defines body for PutVmRestore for application/json ContentType.
type PutVmRestoreJSONRequestBody = RestoreConfig

// PutVmSendMigrationJSONRequestBody defines body for PutVmSendMigration for application/json ContentType.
type PutVmSendMigrationJSONRequestBody = SendMigrationData

// PutVmSnapshotJSONRequestBody defines body for PutVmSnapshot for application/json ContentType.
type PutVmSnapshotJSONRequestBody = VmSnapshotConfig

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PutVmAddDeviceWithBody request with any body
	PutVmAddDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddDevice(ctx context.Context, body PutVmAddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddDiskWithBody request with any body
	PutVmAddDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddDisk(ctx context.Context, body PutVmAddDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddFsWithBody request with any body
	PutVmAddFsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddFs(ctx context.Context, body PutVmAddFsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddNetWithBody request with any body
	PutVmAddNetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddNet(ctx context.Context, body PutVmAddNetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddPmemWithBody request with any body
	PutVmAddPmemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddPmem(ctx context.Context, body PutVmAddPmemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddUserDeviceWithBody request with any body
	PutVmAddUserDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddUserDevice(ctx context.Context, body PutVmAddUserDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddVdpaWithBody request with any body
	PutVmAddVdpaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddVdpa(ctx context.Context, body PutVmAddVdpaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmAddVsockWithBody request with any body
	PutVmAddVsockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmAddVsock(ctx context.Context, body PutVmAddVsockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BootVM request
	BootVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmCoredumpWithBody request with any body
	PutVmCoredumpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmCoredump(ctx context.Context, body PutVmCoredumpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmCounters request
	GetVmCounters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVMWithBody request with any body
	CreateVMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVM(ctx context.Context, body CreateVMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVM request
	DeleteVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmInfo request
	GetVmInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseVM request
	PauseVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PowerButtonVM request
	PowerButtonVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebootVM request
	RebootVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmReceiveMigrationWithBody request with any body
	PutVmReceiveMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmReceiveMigration(ctx context.Context, body PutVmReceiveMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmRemoveDeviceWithBody request with any body
	PutVmRemoveDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmRemoveDevice(ctx context.Context, body PutVmRemoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmResizeWithBody request with any body
	PutVmResizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmResize(ctx context.Context, body PutVmResizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmResizeZoneWithBody request with any body
	PutVmResizeZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmResizeZone(ctx context.Context, body PutVmResizeZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmRestoreWithBody request with any body
	PutVmRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmRestore(ctx context.Context, body PutVmRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeVM request
	ResumeVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmSendMigrationWithBody request with any body
	PutVmSendMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmSendMigration(ctx context.Context, body PutVmSendMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShutdownVM request
	ShutdownVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmSnapshotWithBody request with any body
	PutVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmSnapshot(ctx context.Context, body PutVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmmNmi request
	PutVmmNmi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmmPing request
	GetVmmPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShutdownVMM request
	ShutdownVMM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PutVmAddDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddDevice(ctx context.Context, body PutVmAddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddDisk(ctx context.Context, body PutVmAddDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddFsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddFsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddFs(ctx context.Context, body PutVmAddFsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddFsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddNetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddNetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddNet(ctx context.Context, body PutVmAddNetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddNetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddPmemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddPmemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddPmem(ctx context.Context, body PutVmAddPmemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddPmemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddUserDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddUserDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddUserDevice(ctx context.Context, body PutVmAddUserDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddUserDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddVdpaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddVdpaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddVdpa(ctx context.Context, body PutVmAddVdpaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddVdpaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddVsockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddVsockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmAddVsock(ctx context.Context, body PutVmAddVsockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmAddVsockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BootVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBootVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmCoredumpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmCoredumpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmCoredump(ctx context.Context, body PutVmCoredumpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmCoredumpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmCounters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmCountersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVMRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVM(ctx context.Context, body CreateVMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVMRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PowerButtonVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPowerButtonVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebootVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebootVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmReceiveMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmReceiveMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmReceiveMigration(ctx context.Context, body PutVmReceiveMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmReceiveMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmRemoveDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmRemoveDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmRemoveDevice(ctx context.Context, body PutVmRemoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmRemoveDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmResizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmResizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmResize(ctx context.Context, body PutVmResizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmResizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmResizeZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmResizeZoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmResizeZone(ctx context.Context, body PutVmResizeZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmResizeZoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmRestore(ctx context.Context, body PutVmRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmSendMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmSendMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmSendMigration(ctx context.Context, body PutVmSendMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmSendMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShutdownVM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShutdownVMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmSnapshot(ctx context.Context, body PutVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmmNmi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmmNmiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmmPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmmPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShutdownVMM(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShutdownVMMRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPutVmAddDeviceRequest calls the generic PutVmAddDevice builder with application/json body
func NewPutVmAddDeviceRequest(server string, body PutVmAddDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddDeviceRequestWithBody generates requests for PutVmAddDevice with any type of body
func NewPutVmAddDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddDiskRequest calls the generic PutVmAddDisk builder with application/json body
func NewPutVmAddDiskRequest(server string, body PutVmAddDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddDiskRequestWithBody generates requests for PutVmAddDisk with any type of body
func NewPutVmAddDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddFsRequest calls the generic PutVmAddFs builder with application/json body
func NewPutVmAddFsRequest(server string, body PutVmAddFsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddFsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddFsRequestWithBody generates requests for PutVmAddFs with any type of body
func NewPutVmAddFsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-fs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddNetRequest calls the generic PutVmAddNet builder with application/json body
func NewPutVmAddNetRequest(server string, body PutVmAddNetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddNetRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddNetRequestWithBody generates requests for PutVmAddNet with any type of body
func NewPutVmAddNetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-net")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddPmemRequest calls the generic PutVmAddPmem builder with application/json body
func NewPutVmAddPmemRequest(server string, body PutVmAddPmemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddPmemRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddPmemRequestWithBody generates requests for PutVmAddPmem with any type of body
func NewPutVmAddPmemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-pmem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddUserDeviceRequest calls the generic PutVmAddUserDevice builder with application/json body
func NewPutVmAddUserDeviceRequest(server string, body PutVmAddUserDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddUserDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddUserDeviceRequestWithBody generates requests for PutVmAddUserDevice with any type of body
func NewPutVmAddUserDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-user-device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddVdpaRequest calls the generic PutVmAddVdpa builder with application/json body
func NewPutVmAddVdpaRequest(server string, body PutVmAddVdpaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddVdpaRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddVdpaRequestWithBody generates requests for PutVmAddVdpa with any type of body
func NewPutVmAddVdpaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-vdpa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmAddVsockRequest calls the generic PutVmAddVsock builder with application/json body
func NewPutVmAddVsockRequest(server string, body PutVmAddVsockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmAddVsockRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmAddVsockRequestWithBody generates requests for PutVmAddVsock with any type of body
func NewPutVmAddVsockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.add-vsock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBootVMRequest generates requests for BootVM
func NewBootVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.boot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmCoredumpRequest calls the generic PutVmCoredump builder with application/json body
func NewPutVmCoredumpRequest(server string, body PutVmCoredumpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmCoredumpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmCoredumpRequestWithBody generates requests for PutVmCoredump with any type of body
func NewPutVmCoredumpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.coredump")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmCountersRequest generates requests for GetVmCounters
func NewGetVmCountersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.counters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVMRequest calls the generic CreateVM builder with application/json body
func NewCreateVMRequest(server string, body CreateVMJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVMRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVMRequestWithBody generates requests for CreateVM with any type of body
func NewCreateVMRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVMRequest generates requests for DeleteVM
func NewDeleteVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmInfoRequest generates requests for GetVmInfo
func NewGetVmInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseVMRequest generates requests for PauseVM
func NewPauseVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.pause")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPowerButtonVMRequest generates requests for PowerButtonVM
func NewPowerButtonVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.power-button")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRebootVMRequest generates requests for RebootVM
func NewRebootVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmReceiveMigrationRequest calls the generic PutVmReceiveMigration builder with application/json body
func NewPutVmReceiveMigrationRequest(server string, body PutVmReceiveMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmReceiveMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmReceiveMigrationRequestWithBody generates requests for PutVmReceiveMigration with any type of body
func NewPutVmReceiveMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.receive-migration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmRemoveDeviceRequest calls the generic PutVmRemoveDevice builder with application/json body
func NewPutVmRemoveDeviceRequest(server string, body PutVmRemoveDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmRemoveDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmRemoveDeviceRequestWithBody generates requests for PutVmRemoveDevice with any type of body
func NewPutVmRemoveDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.remove-device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmResizeRequest calls the generic PutVmResize builder with application/json body
func NewPutVmResizeRequest(server string, body PutVmResizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmResizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmResizeRequestWithBody generates requests for PutVmResize with any type of body
func NewPutVmResizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.resize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmResizeZoneRequest calls the generic PutVmResizeZone builder with application/json body
func NewPutVmResizeZoneRequest(server string, body PutVmResizeZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmResizeZoneRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmResizeZoneRequestWithBody generates requests for PutVmResizeZone with any type of body
func NewPutVmResizeZoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.resize-zone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmRestoreRequest calls the generic PutVmRestore builder with application/json body
func NewPutVmRestoreRequest(server string, body PutVmRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmRestoreRequestWithBody generates requests for PutVmRestore with any type of body
func NewPutVmRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResumeVMRequest generates requests for ResumeVM
func NewResumeVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.resume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmSendMigrationRequest calls the generic PutVmSendMigration builder with application/json body
func NewPutVmSendMigrationRequest(server string, body PutVmSendMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmSendMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmSendMigrationRequestWithBody generates requests for PutVmSendMigration with any type of body
func NewPutVmSendMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.send-migration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShutdownVMRequest generates requests for ShutdownVM
func NewShutdownVMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmSnapshotRequest calls the generic PutVmSnapshot builder with application/json body
func NewPutVmSnapshotRequest(server string, body PutVmSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVmSnapshotRequestWithBody generates requests for PutVmSnapshot with any type of body
func NewPutVmSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm.snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVmmNmiRequest generates requests for PutVmmNmi
func NewPutVmmNmiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmm.nmi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmmPingRequest generates requests for GetVmmPing
func NewGetVmmPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmm.ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShutdownVMMRequest generates requests for ShutdownVMM
func NewShutdownVMMRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmm.shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PutVmAddDeviceWithBodyWithResponse request with any body
	PutVmAddDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddDeviceResponse, error)

	PutVmAddDeviceWithResponse(ctx context.Context, body PutVmAddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddDeviceResponse, error)

	// PutVmAddDiskWithBodyWithResponse request with any body
	PutVmAddDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddDiskResponse, error)

	PutVmAddDiskWithResponse(ctx context.Context, body PutVmAddDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddDiskResponse, error)

	// PutVmAddFsWithBodyWithResponse request with any body
	PutVmAddFsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddFsResponse, error)

	PutVmAddFsWithResponse(ctx context.Context, body PutVmAddFsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddFsResponse, error)

	// PutVmAddNetWithBodyWithResponse request with any body
	PutVmAddNetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddNetResponse, error)

	PutVmAddNetWithResponse(ctx context.Context, body PutVmAddNetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddNetResponse, error)

	// PutVmAddPmemWithBodyWithResponse request with any body
	PutVmAddPmemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddPmemResponse, error)

	PutVmAddPmemWithResponse(ctx context.Context, body PutVmAddPmemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddPmemResponse, error)

	// PutVmAddUserDeviceWithBodyWithResponse request with any body
	PutVmAddUserDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddUserDeviceResponse, error)

	PutVmAddUserDeviceWithResponse(ctx context.Context, body PutVmAddUserDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddUserDeviceResponse, error)

	// PutVmAddVdpaWithBodyWithResponse request with any body
	PutVmAddVdpaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddVdpaResponse, error)

	PutVmAddVdpaWithResponse(ctx context.Context, body PutVmAddVdpaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddVdpaResponse, error)

	// PutVmAddVsockWithBodyWithResponse request with any body
	PutVmAddVsockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddVsockResponse, error)

	PutVmAddVsockWithResponse(ctx context.Context, body PutVmAddVsockJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddVsockResponse, error)

	// BootVMWithResponse request
	BootVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BootVMResponse, error)

	// PutVmCoredumpWithBodyWithResponse request with any body
	PutVmCoredumpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmCoredumpResponse, error)

	PutVmCoredumpWithResponse(ctx context.Context, body PutVmCoredumpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmCoredumpResponse, error)

	// GetVmCountersWithResponse request
	GetVmCountersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmCountersResponse, error)

	// CreateVMWithBodyWithResponse request with any body
	CreateVMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVMResponse, error)

	CreateVMWithResponse(ctx context.Context, body CreateVMJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVMResponse, error)

	// DeleteVMWithResponse request
	DeleteVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteVMResponse, error)

	// GetVmInfoWithResponse request
	GetVmInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmInfoResponse, error)

	// PauseVMWithResponse request
	PauseVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PauseVMResponse, error)

	// PowerButtonVMWithResponse request
	PowerButtonVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PowerButtonVMResponse, error)

	// RebootVMWithResponse request
	RebootVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RebootVMResponse, error)

	// PutVmReceiveMigrationWithBodyWithResponse request with any body
	PutVmReceiveMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmReceiveMigrationResponse, error)

	PutVmReceiveMigrationWithResponse(ctx context.Context, body PutVmReceiveMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmReceiveMigrationResponse, error)

	// PutVmRemoveDeviceWithBodyWithResponse request with any body
	PutVmRemoveDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmRemoveDeviceResponse, error)

	PutVmRemoveDeviceWithResponse(ctx context.Context, body PutVmRemoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmRemoveDeviceResponse, error)

	// PutVmResizeWithBodyWithResponse request with any body
	PutVmResizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmResizeResponse, error)

	PutVmResizeWithResponse(ctx context.Context, body PutVmResizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmResizeResponse, error)

	// PutVmResizeZoneWithBodyWithResponse request with any body
	PutVmResizeZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmResizeZoneResponse, error)

	PutVmResizeZoneWithResponse(ctx context.Context, body PutVmResizeZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmResizeZoneResponse, error)

	// PutVmRestoreWithBodyWithResponse request with any body
	PutVmRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmRestoreResponse, error)

	PutVmRestoreWithResponse(ctx context.Context, body PutVmRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmRestoreResponse, error)

	// ResumeVMWithResponse request
	ResumeVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResumeVMResponse, error)

	// PutVmSendMigrationWithBodyWithResponse request with any body
	PutVmSendMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmSendMigrationResponse, error)

	PutVmSendMigrationWithResponse(ctx context.Context, body PutVmSendMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmSendMigrationResponse, error)

	// ShutdownVMWithResponse request
	ShutdownVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownVMResponse, error)

	// PutVmSnapshotWithBodyWithResponse request with any body
	PutVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmSnapshotResponse, error)

	PutVmSnapshotWithResponse(ctx context.Context, body PutVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmSnapshotResponse, error)

	// PutVmmNmiWithResponse request
	PutVmmNmiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutVmmNmiResponse, error)

	// GetVmmPingWithResponse request
	GetVmmPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmmPingResponse, error)

	// ShutdownVMMWithResponse request
	ShutdownVMMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownVMMResponse, error)
}

type PutVmAddDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddFsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddFsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddFsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddNetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddNetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddNetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddPmemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddPmemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddPmemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddUserDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddUserDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddUserDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddVdpaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddVdpaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddVdpaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmAddVsockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PciDeviceInfo
}

// Status returns HTTPResponse.Status
func (r PutVmAddVsockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmAddVsockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BootVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BootVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BootVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmCoredumpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmCoredumpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmCoredumpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmCountersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmCounters
}

// Status returns HTTPResponse.Status
func (r GetVmCountersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmCountersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmInfo
}

// Status returns HTTPResponse.Status
func (r GetVmInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PowerButtonVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PowerButtonVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PowerButtonVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebootVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RebootVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebootVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmReceiveMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmReceiveMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmReceiveMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmRemoveDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmRemoveDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmRemoveDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmResizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmResizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmResizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmResizeZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmResizeZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmResizeZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumeVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmSendMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmSendMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmSendMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShutdownVMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ShutdownVMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShutdownVMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmmNmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmmNmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmmNmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmmPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VmmPingResponse
}

// Status returns HTTPResponse.Status
func (r GetVmmPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmmPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShutdownVMMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ShutdownVMMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShutdownVMMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PutVmAddDeviceWithBodyWithResponse request with arbitrary body returning *PutVmAddDeviceResponse
func (c *ClientWithResponses) PutVmAddDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddDeviceResponse, error) {
	rsp, err := c.PutVmAddDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddDeviceResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddDeviceWithResponse(ctx context.Context, body PutVmAddDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddDeviceResponse, error) {
	rsp, err := c.PutVmAddDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddDeviceResponse(rsp)
}

// PutVmAddDiskWithBodyWithResponse request with arbitrary body returning *PutVmAddDiskResponse
func (c *ClientWithResponses) PutVmAddDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddDiskResponse, error) {
	rsp, err := c.PutVmAddDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddDiskResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddDiskWithResponse(ctx context.Context, body PutVmAddDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddDiskResponse, error) {
	rsp, err := c.PutVmAddDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddDiskResponse(rsp)
}

// PutVmAddFsWithBodyWithResponse request with arbitrary body returning *PutVmAddFsResponse
func (c *ClientWithResponses) PutVmAddFsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddFsResponse, error) {
	rsp, err := c.PutVmAddFsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddFsResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddFsWithResponse(ctx context.Context, body PutVmAddFsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddFsResponse, error) {
	rsp, err := c.PutVmAddFs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddFsResponse(rsp)
}

// PutVmAddNetWithBodyWithResponse request with arbitrary body returning *PutVmAddNetResponse
func (c *ClientWithResponses) PutVmAddNetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddNetResponse, error) {
	rsp, err := c.PutVmAddNetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddNetResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddNetWithResponse(ctx context.Context, body PutVmAddNetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddNetResponse, error) {
	rsp, err := c.PutVmAddNet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddNetResponse(rsp)
}

// PutVmAddPmemWithBodyWithResponse request with arbitrary body returning *PutVmAddPmemResponse
func (c *ClientWithResponses) PutVmAddPmemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddPmemResponse, error) {
	rsp, err := c.PutVmAddPmemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddPmemResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddPmemWithResponse(ctx context.Context, body PutVmAddPmemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddPmemResponse, error) {
	rsp, err := c.PutVmAddPmem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddPmemResponse(rsp)
}

// PutVmAddUserDeviceWithBodyWithResponse request with arbitrary body returning *PutVmAddUserDeviceResponse
func (c *ClientWithResponses) PutVmAddUserDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddUserDeviceResponse, error) {
	rsp, err := c.PutVmAddUserDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddUserDeviceResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddUserDeviceWithResponse(ctx context.Context, body PutVmAddUserDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddUserDeviceResponse, error) {
	rsp, err := c.PutVmAddUserDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddUserDeviceResponse(rsp)
}

// PutVmAddVdpaWithBodyWithResponse request with arbitrary body returning *PutVmAddVdpaResponse
func (c *ClientWithResponses) PutVmAddVdpaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddVdpaResponse, error) {
	rsp, err := c.PutVmAddVdpaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddVdpaResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddVdpaWithResponse(ctx context.Context, body PutVmAddVdpaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddVdpaResponse, error) {
	rsp, err := c.PutVmAddVdpa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddVdpaResponse(rsp)
}

// PutVmAddVsockWithBodyWithResponse request with arbitrary body returning *PutVmAddVsockResponse
func (c *ClientWithResponses) PutVmAddVsockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmAddVsockResponse, error) {
	rsp, err := c.PutVmAddVsockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddVsockResponse(rsp)
}

func (c *ClientWithResponses) PutVmAddVsockWithResponse(ctx context.Context, body PutVmAddVsockJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmAddVsockResponse, error) {
	rsp, err := c.PutVmAddVsock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmAddVsockResponse(rsp)
}

// BootVMWithResponse request returning *BootVMResponse
func (c *ClientWithResponses) BootVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BootVMResponse, error) {
	rsp, err := c.BootVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBootVMResponse(rsp)
}

// PutVmCoredumpWithBodyWithResponse request with arbitrary body returning *PutVmCoredumpResponse
func (c *ClientWithResponses) PutVmCoredumpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmCoredumpResponse, error) {
	rsp, err := c.PutVmCoredumpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmCoredumpResponse(rsp)
}

func (c *ClientWithResponses) PutVmCoredumpWithResponse(ctx context.Context, body PutVmCoredumpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmCoredumpResponse, error) {
	rsp, err := c.PutVmCoredump(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmCoredumpResponse(rsp)
}

// GetVmCountersWithResponse request returning *GetVmCountersResponse
func (c *ClientWithResponses) GetVmCountersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmCountersResponse, error) {
	rsp, err := c.GetVmCounters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmCountersResponse(rsp)
}

// CreateVMWithBodyWithResponse request with arbitrary body returning *CreateVMResponse
func (c *ClientWithResponses) CreateVMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVMResponse, error) {
	rsp, err := c.CreateVMWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVMResponse(rsp)
}

func (c *ClientWithResponses) CreateVMWithResponse(ctx context.Context, body CreateVMJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVMResponse, error) {
	rsp, err := c.CreateVM(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVMResponse(rsp)
}

// DeleteVMWithResponse request returning *DeleteVMResponse
func (c *ClientWithResponses) DeleteVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteVMResponse, error) {
	rsp, err := c.DeleteVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVMResponse(rsp)
}

// GetVmInfoWithResponse request returning *GetVmInfoResponse
func (c *ClientWithResponses) GetVmInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmInfoResponse, error) {
	rsp, err := c.GetVmInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmInfoResponse(rsp)
}

// PauseVMWithResponse request returning *PauseVMResponse
func (c *ClientWithResponses) PauseVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PauseVMResponse, error) {
	rsp, err := c.PauseVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseVMResponse(rsp)
}

// PowerButtonVMWithResponse request returning *PowerButtonVMResponse
func (c *ClientWithResponses) PowerButtonVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PowerButtonVMResponse, error) {
	rsp, err := c.PowerButtonVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePowerButtonVMResponse(rsp)
}

// RebootVMWithResponse request returning *RebootVMResponse
func (c *ClientWithResponses) RebootVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RebootVMResponse, error) {
	rsp, err := c.RebootVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebootVMResponse(rsp)
}

// PutVmReceiveMigrationWithBodyWithResponse request with arbitrary body returning *PutVmReceiveMigrationResponse
func (c *ClientWithResponses) PutVmReceiveMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmReceiveMigrationResponse, error) {
	rsp, err := c.PutVmReceiveMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmReceiveMigrationResponse(rsp)
}

func (c *ClientWithResponses) PutVmReceiveMigrationWithResponse(ctx context.Context, body PutVmReceiveMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmReceiveMigrationResponse, error) {
	rsp, err := c.PutVmReceiveMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmReceiveMigrationResponse(rsp)
}

// PutVmRemoveDeviceWithBodyWithResponse request with arbitrary body returning *PutVmRemoveDeviceResponse
func (c *ClientWithResponses) PutVmRemoveDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmRemoveDeviceResponse, error) {
	rsp, err := c.PutVmRemoveDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmRemoveDeviceResponse(rsp)
}

func (c *ClientWithResponses) PutVmRemoveDeviceWithResponse(ctx context.Context, body PutVmRemoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmRemoveDeviceResponse, error) {
	rsp, err := c.PutVmRemoveDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmRemoveDeviceResponse(rsp)
}

// PutVmResizeWithBodyWithResponse request with arbitrary body returning *PutVmResizeResponse
func (c *ClientWithResponses) PutVmResizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmResizeResponse, error) {
	rsp, err := c.PutVmResizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmResizeResponse(rsp)
}

func (c *ClientWithResponses) PutVmResizeWithResponse(ctx context.Context, body PutVmResizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmResizeResponse, error) {
	rsp, err := c.PutVmResize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmResizeResponse(rsp)
}

// PutVmResizeZoneWithBodyWithResponse request with arbitrary body returning *PutVmResizeZoneResponse
func (c *ClientWithResponses) PutVmResizeZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmResizeZoneResponse, error) {
	rsp, err := c.PutVmResizeZoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmResizeZoneResponse(rsp)
}

func (c *ClientWithResponses) PutVmResizeZoneWithResponse(ctx context.Context, body PutVmResizeZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmResizeZoneResponse, error) {
	rsp, err := c.PutVmResizeZone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmResizeZoneResponse(rsp)
}

// PutVmRestoreWithBodyWithResponse request with arbitrary body returning *PutVmRestoreResponse
func (c *ClientWithResponses) PutVmRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmRestoreResponse, error) {
	rsp, err := c.PutVmRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmRestoreResponse(rsp)
}

func (c *ClientWithResponses) PutVmRestoreWithResponse(ctx context.Context, body PutVmRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmRestoreResponse, error) {
	rsp, err := c.PutVmRestore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmRestoreResponse(rsp)
}

// ResumeVMWithResponse request returning *ResumeVMResponse
func (c *ClientWithResponses) ResumeVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResumeVMResponse, error) {
	rsp, err := c.ResumeVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeVMResponse(rsp)
}

// PutVmSendMigrationWithBodyWithResponse request with arbitrary body returning *PutVmSendMigrationResponse
func (c *ClientWithResponses) PutVmSendMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmSendMigrationResponse, error) {
	rsp, err := c.PutVmSendMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmSendMigrationResponse(rsp)
}

func (c *ClientWithResponses) PutVmSendMigrationWithResponse(ctx context.Context, body PutVmSendMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmSendMigrationResponse, error) {
	rsp, err := c.PutVmSendMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmSendMigrationResponse(rsp)
}

// ShutdownVMWithResponse request returning *ShutdownVMResponse
func (c *ClientWithResponses) ShutdownVMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownVMResponse, error) {
	rsp, err := c.ShutdownVM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShutdownVMResponse(rsp)
}

// PutVmSnapshotWithBodyWithResponse request with arbitrary body returning *PutVmSnapshotResponse
func (c *ClientWithResponses) PutVmSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmSnapshotResponse, error) {
	rsp, err := c.PutVmSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PutVmSnapshotWithResponse(ctx context.Context, body PutVmSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmSnapshotResponse, error) {
	rsp, err := c.PutVmSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmSnapshotResponse(rsp)
}

// PutVmmNmiWithResponse request returning *PutVmmNmiResponse
func (c *ClientWithResponses) PutVmmNmiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutVmmNmiResponse, error) {
	rsp, err := c.PutVmmNmi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmmNmiResponse(rsp)
}

// GetVmmPingWithResponse request returning *GetVmmPingResponse
func (c *ClientWithResponses) GetVmmPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmmPingResponse, error) {
	rsp, err := c.GetVmmPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmmPingResponse(rsp)
}

// ShutdownVMMWithResponse request returning *ShutdownVMMResponse
func (c *ClientWithResponses) ShutdownVMMWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownVMMResponse, error) {
	rsp, err := c.ShutdownVMM(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShutdownVMMResponse(rsp)
}

// ParsePutVmAddDeviceResponse parses an HTTP response from a PutVmAddDeviceWithResponse call
func ParsePutVmAddDeviceResponse(rsp *http.Response) (*PutVmAddDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddDiskResponse parses an HTTP response from a PutVmAddDiskWithResponse call
func ParsePutVmAddDiskResponse(rsp *http.Response) (*PutVmAddDiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddFsResponse parses an HTTP response from a PutVmAddFsWithResponse call
func ParsePutVmAddFsResponse(rsp *http.Response) (*PutVmAddFsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddFsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddNetResponse parses an HTTP response from a PutVmAddNetWithResponse call
func ParsePutVmAddNetResponse(rsp *http.Response) (*PutVmAddNetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddNetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddPmemResponse parses an HTTP response from a PutVmAddPmemWithResponse call
func ParsePutVmAddPmemResponse(rsp *http.Response) (*PutVmAddPmemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddPmemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddUserDeviceResponse parses an HTTP response from a PutVmAddUserDeviceWithResponse call
func ParsePutVmAddUserDeviceResponse(rsp *http.Response) (*PutVmAddUserDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddUserDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddVdpaResponse parses an HTTP response from a PutVmAddVdpaWithResponse call
func ParsePutVmAddVdpaResponse(rsp *http.Response) (*PutVmAddVdpaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddVdpaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVmAddVsockResponse parses an HTTP response from a PutVmAddVsockWithResponse call
func ParsePutVmAddVsockResponse(rsp *http.Response) (*PutVmAddVsockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmAddVsockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PciDeviceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBootVMResponse parses an HTTP response from a BootVMWithResponse call
func ParseBootVMResponse(rsp *http.Response) (*BootVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BootVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmCoredumpResponse parses an HTTP response from a PutVmCoredumpWithResponse call
func ParsePutVmCoredumpResponse(rsp *http.Response) (*PutVmCoredumpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmCoredumpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmCountersResponse parses an HTTP response from a GetVmCountersWithResponse call
func ParseGetVmCountersResponse(rsp *http.Response) (*GetVmCountersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmCountersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmCounters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateVMResponse parses an HTTP response from a CreateVMWithResponse call
func ParseCreateVMResponse(rsp *http.Response) (*CreateVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVMResponse parses an HTTP response from a DeleteVMWithResponse call
func ParseDeleteVMResponse(rsp *http.Response) (*DeleteVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmInfoResponse parses an HTTP response from a GetVmInfoWithResponse call
func ParseGetVmInfoResponse(rsp *http.Response) (*GetVmInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePauseVMResponse parses an HTTP response from a PauseVMWithResponse call
func ParsePauseVMResponse(rsp *http.Response) (*PauseVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePowerButtonVMResponse parses an HTTP response from a PowerButtonVMWithResponse call
func ParsePowerButtonVMResponse(rsp *http.Response) (*PowerButtonVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PowerButtonVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRebootVMResponse parses an HTTP response from a RebootVMWithResponse call
func ParseRebootVMResponse(rsp *http.Response) (*RebootVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RebootVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmReceiveMigrationResponse parses an HTTP response from a PutVmReceiveMigrationWithResponse call
func ParsePutVmReceiveMigrationResponse(rsp *http.Response) (*PutVmReceiveMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmReceiveMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmRemoveDeviceResponse parses an HTTP response from a PutVmRemoveDeviceWithResponse call
func ParsePutVmRemoveDeviceResponse(rsp *http.Response) (*PutVmRemoveDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmRemoveDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmResizeResponse parses an HTTP response from a PutVmResizeWithResponse call
func ParsePutVmResizeResponse(rsp *http.Response) (*PutVmResizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmResizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmResizeZoneResponse parses an HTTP response from a PutVmResizeZoneWithResponse call
func ParsePutVmResizeZoneResponse(rsp *http.Response) (*PutVmResizeZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmResizeZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmRestoreResponse parses an HTTP response from a PutVmRestoreWithResponse call
func ParsePutVmRestoreResponse(rsp *http.Response) (*PutVmRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResumeVMResponse parses an HTTP response from a ResumeVMWithResponse call
func ParseResumeVMResponse(rsp *http.Response) (*ResumeVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmSendMigrationResponse parses an HTTP response from a PutVmSendMigrationWithResponse call
func ParsePutVmSendMigrationResponse(rsp *http.Response) (*PutVmSendMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmSendMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseShutdownVMResponse parses an HTTP response from a ShutdownVMWithResponse call
func ParseShutdownVMResponse(rsp *http.Response) (*ShutdownVMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShutdownVMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmSnapshotResponse parses an HTTP response from a PutVmSnapshotWithResponse call
func ParsePutVmSnapshotResponse(rsp *http.Response) (*PutVmSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmmNmiResponse parses an HTTP response from a PutVmmNmiWithResponse call
func ParsePutVmmNmiResponse(rsp *http.Response) (*PutVmmNmiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmmNmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmmPingResponse parses an HTTP response from a GetVmmPingWithResponse call
func ParseGetVmmPingResponse(rsp *http.Response) (*GetVmmPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmmPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VmmPingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShutdownVMMResponse parses an HTTP response from a ShutdownVMMWithResponse call
func ParseShutdownVMMResponse(rsp *http.Response) (*ShutdownVMMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShutdownVMMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

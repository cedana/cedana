// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: task.proto

package task

import (
	gpu "github.com/cedana/cedana/pkg/api/services/gpu"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DumpType int32

const (
	DumpType_PROCESS DumpType = 0
	DumpType_RUNC    DumpType = 1
	DumpType_KATA    DumpType = 2
	DumpType_ROOTFS  DumpType = 3
)

// Enum value maps for DumpType.
var (
	DumpType_name = map[int32]string{
		0: "PROCESS",
		1: "RUNC",
		2: "KATA",
		3: "ROOTFS",
	}
	DumpType_value = map[string]int32{
		"PROCESS": 0,
		"RUNC":    1,
		"KATA":    2,
		"ROOTFS":  3,
	}
)

func (x DumpType) Enum() *DumpType {
	p := new(DumpType)
	*p = x
	return p
}

func (x DumpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[0].Descriptor()
}

func (DumpType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[0]
}

func (x DumpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpType.Descriptor instead.
func (DumpType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

type ContainerRuntime int32

const (
	ContainerRuntime_CRIO       ContainerRuntime = 0
	ContainerRuntime_CONTAINERD ContainerRuntime = 1
)

// Enum value maps for ContainerRuntime.
var (
	ContainerRuntime_name = map[int32]string{
		0: "CRIO",
		1: "CONTAINERD",
	}
	ContainerRuntime_value = map[string]int32{
		"CRIO":       0,
		"CONTAINERD": 1,
	}
)

func (x ContainerRuntime) Enum() *ContainerRuntime {
	p := new(ContainerRuntime)
	*p = x
	return p
}

func (x ContainerRuntime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerRuntime) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[1].Descriptor()
}

func (ContainerRuntime) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[1]
}

func (x ContainerRuntime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerRuntime.Descriptor instead.
func (ContainerRuntime) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

type CRType int32

const (
	CRType_LOCAL  CRType = 0
	CRType_REMOTE CRType = 1
)

// Enum value maps for CRType.
var (
	CRType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	CRType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x CRType) Enum() *CRType {
	p := new(CRType)
	*p = x
	return p
}

func (x CRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[2].Descriptor()
}

func (CRType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[2]
}

func (x CRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRType.Descriptor instead.
func (CRType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

type JobState int32

const (
	JobState_JOB_STARTUP_FAILED JobState = 0
	JobState_JOB_KILLED         JobState = 1
	JobState_JOB_IDLE           JobState = 2
	JobState_JOB_RUNNING        JobState = 3
	JobState_JOB_PENDING        JobState = 4
	JobState_JOB_DONE           JobState = 5
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STARTUP_FAILED",
		1: "JOB_KILLED",
		2: "JOB_IDLE",
		3: "JOB_RUNNING",
		4: "JOB_PENDING",
		5: "JOB_DONE",
	}
	JobState_value = map[string]int32{
		"JOB_STARTUP_FAILED": 0,
		"JOB_KILLED":         1,
		"JOB_IDLE":           2,
		"JOB_RUNNING":        3,
		"JOB_PENDING":        4,
		"JOB_DONE":           5,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[3].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[3]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

type CheckpointState int32

const (
	CheckpointState_CHECKPOINTED      CheckpointState = 0
	CheckpointState_CHECKPOINT_FAILED CheckpointState = 1
	CheckpointState_RESTORED          CheckpointState = 2
	CheckpointState_RESTORE_FAILED    CheckpointState = 3
)

// Enum value maps for CheckpointState.
var (
	CheckpointState_name = map[int32]string{
		0: "CHECKPOINTED",
		1: "CHECKPOINT_FAILED",
		2: "RESTORED",
		3: "RESTORE_FAILED",
	}
	CheckpointState_value = map[string]int32{
		"CHECKPOINTED":      0,
		"CHECKPOINT_FAILED": 1,
		"RESTORED":          2,
		"RESTORE_FAILED":    3,
	}
)

func (x CheckpointState) Enum() *CheckpointState {
	p := new(CheckpointState)
	*p = x
	return p
}

func (x CheckpointState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointState) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[4].Descriptor()
}

func (CheckpointState) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[4]
}

func (x CheckpointState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointState.Descriptor instead.
func (CheckpointState) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

type OpenFilesStat_StreamType int32

const (
	OpenFilesStat_STDIN  OpenFilesStat_StreamType = 0
	OpenFilesStat_STDOUT OpenFilesStat_StreamType = 1
	OpenFilesStat_STDERR OpenFilesStat_StreamType = 2
	OpenFilesStat_NONE   OpenFilesStat_StreamType = 3
)

// Enum value maps for OpenFilesStat_StreamType.
var (
	OpenFilesStat_StreamType_name = map[int32]string{
		0: "STDIN",
		1: "STDOUT",
		2: "STDERR",
		3: "NONE",
	}
	OpenFilesStat_StreamType_value = map[string]int32{
		"STDIN":  0,
		"STDOUT": 1,
		"STDERR": 2,
		"NONE":   3,
	}
)

func (x OpenFilesStat_StreamType) Enum() *OpenFilesStat_StreamType {
	p := new(OpenFilesStat_StreamType)
	*p = x
	return p
}

func (x OpenFilesStat_StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenFilesStat_StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[5].Descriptor()
}

func (OpenFilesStat_StreamType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[5]
}

func (x OpenFilesStat_StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenFilesStat_StreamType.Descriptor instead.
func (OpenFilesStat_StreamType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{45, 0}
}

type CheckpointReason_CheckpointReasonEnum int32

const (
	CheckpointReason_INSTANCE_TERMINATION CheckpointReason_CheckpointReasonEnum = 0
	CheckpointReason_JOB_TERMINATION      CheckpointReason_CheckpointReasonEnum = 1
	CheckpointReason_HEARTBEAT            CheckpointReason_CheckpointReasonEnum = 2
)

// Enum value maps for CheckpointReason_CheckpointReasonEnum.
var (
	CheckpointReason_CheckpointReasonEnum_name = map[int32]string{
		0: "INSTANCE_TERMINATION",
		1: "JOB_TERMINATION",
		2: "HEARTBEAT",
	}
	CheckpointReason_CheckpointReasonEnum_value = map[string]int32{
		"INSTANCE_TERMINATION": 0,
		"JOB_TERMINATION":      1,
		"HEARTBEAT":            2,
	}
)

func (x CheckpointReason_CheckpointReasonEnum) Enum() *CheckpointReason_CheckpointReasonEnum {
	p := new(CheckpointReason_CheckpointReasonEnum)
	*p = x
	return p
}

func (x CheckpointReason_CheckpointReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointReason_CheckpointReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[6].Descriptor()
}

func (CheckpointReason_CheckpointReasonEnum) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[6]
}

func (x CheckpointReason_CheckpointReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointReason_CheckpointReasonEnum.Descriptor instead.
func (CheckpointReason_CheckpointReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{49, 0}
}

type DumpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpType            DumpType             `protobuf:"varint,1,opt,name=DumpType,proto3,enum=cedana.services.task.DumpType" json:"DumpType,omitempty"`
	PrepareDuration     int64                `protobuf:"varint,2,opt,name=PrepareDuration,proto3" json:"PrepareDuration,omitempty"`
	CRIUDuration        int64                `protobuf:"varint,3,opt,name=CRIUDuration,proto3" json:"CRIUDuration,omitempty"`
	GPUDuration         int64                `protobuf:"varint,4,opt,name=GPUDuration,proto3" json:"GPUDuration,omitempty"`
	UploadDuration      int64                `protobuf:"varint,5,opt,name=UploadDuration,proto3" json:"UploadDuration,omitempty"`
	ContainerRuntime    ContainerRuntime     `protobuf:"varint,6,opt,name=ContainerRuntime,proto3,enum=cedana.services.task.ContainerRuntime" json:"ContainerRuntime,omitempty"`
	Kubernetes          bool                 `protobuf:"varint,7,opt,name=Kubernetes,proto3" json:"Kubernetes,omitempty"`
	CheckpointFileStats *CheckpointFileStats `protobuf:"bytes,8,opt,name=CheckpointFileStats,proto3" json:"CheckpointFileStats,omitempty"`
}

func (x *DumpStats) Reset() {
	*x = DumpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStats) ProtoMessage() {}

func (x *DumpStats) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStats.ProtoReflect.Descriptor instead.
func (*DumpStats) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *DumpStats) GetDumpType() DumpType {
	if x != nil {
		return x.DumpType
	}
	return DumpType_PROCESS
}

func (x *DumpStats) GetPrepareDuration() int64 {
	if x != nil {
		return x.PrepareDuration
	}
	return 0
}

func (x *DumpStats) GetCRIUDuration() int64 {
	if x != nil {
		return x.CRIUDuration
	}
	return 0
}

func (x *DumpStats) GetGPUDuration() int64 {
	if x != nil {
		return x.GPUDuration
	}
	return 0
}

func (x *DumpStats) GetUploadDuration() int64 {
	if x != nil {
		return x.UploadDuration
	}
	return 0
}

func (x *DumpStats) GetContainerRuntime() ContainerRuntime {
	if x != nil {
		return x.ContainerRuntime
	}
	return ContainerRuntime_CRIO
}

func (x *DumpStats) GetKubernetes() bool {
	if x != nil {
		return x.Kubernetes
	}
	return false
}

func (x *DumpStats) GetCheckpointFileStats() *CheckpointFileStats {
	if x != nil {
		return x.CheckpointFileStats
	}
	return nil
}

type CheckpointFileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	Duration int64 `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *CheckpointFileStats) Reset() {
	*x = CheckpointFileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointFileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointFileStats) ProtoMessage() {}

func (x *CheckpointFileStats) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointFileStats.ProtoReflect.Descriptor instead.
func (*CheckpointFileStats) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *CheckpointFileStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CheckpointFileStats) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type RestoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpType            DumpType             `protobuf:"varint,1,opt,name=DumpType,proto3,enum=cedana.services.task.DumpType" json:"DumpType,omitempty"`
	ContainerRuntime    ContainerRuntime     `protobuf:"varint,2,opt,name=ContainerRuntime,proto3,enum=cedana.services.task.ContainerRuntime" json:"ContainerRuntime,omitempty"`
	PrepareDuration     int64                `protobuf:"varint,3,opt,name=PrepareDuration,proto3" json:"PrepareDuration,omitempty"`
	CRIUDuration        int64                `protobuf:"varint,4,opt,name=CRIUDuration,proto3" json:"CRIUDuration,omitempty"`
	GPUDuration         int64                `protobuf:"varint,5,opt,name=GPUDuration,proto3" json:"GPUDuration,omitempty"`
	DownloadDuration    int64                `protobuf:"varint,6,opt,name=DownloadDuration,proto3" json:"DownloadDuration,omitempty"`
	CheckpointFileStats *CheckpointFileStats `protobuf:"bytes,7,opt,name=CheckpointFileStats,proto3" json:"CheckpointFileStats,omitempty"`
	GPURestoreStats     *gpu.GPURestoreStats `protobuf:"bytes,8,opt,name=GPURestoreStats,proto3" json:"GPURestoreStats,omitempty"`
}

func (x *RestoreStats) Reset() {
	*x = RestoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreStats) ProtoMessage() {}

func (x *RestoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreStats.ProtoReflect.Descriptor instead.
func (*RestoreStats) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *RestoreStats) GetDumpType() DumpType {
	if x != nil {
		return x.DumpType
	}
	return DumpType_PROCESS
}

func (x *RestoreStats) GetContainerRuntime() ContainerRuntime {
	if x != nil {
		return x.ContainerRuntime
	}
	return ContainerRuntime_CRIO
}

func (x *RestoreStats) GetPrepareDuration() int64 {
	if x != nil {
		return x.PrepareDuration
	}
	return 0
}

func (x *RestoreStats) GetCRIUDuration() int64 {
	if x != nil {
		return x.CRIUDuration
	}
	return 0
}

func (x *RestoreStats) GetGPUDuration() int64 {
	if x != nil {
		return x.GPUDuration
	}
	return 0
}

func (x *RestoreStats) GetDownloadDuration() int64 {
	if x != nil {
		return x.DownloadDuration
	}
	return 0
}

func (x *RestoreStats) GetCheckpointFileStats() *CheckpointFileStats {
	if x != nil {
		return x.CheckpointFileStats
	}
	return nil
}

func (x *RestoreStats) GetGPURestoreStats() *gpu.GPURestoreStats {
	if x != nil {
		return x.GPURestoreStats
	}
	return nil
}

type CRIOImagePushArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalImageRef      string `protobuf:"bytes,1,opt,name=OriginalImageRef,proto3" json:"OriginalImageRef,omitempty"`
	NewImageRef           string `protobuf:"bytes,2,opt,name=NewImageRef,proto3" json:"NewImageRef,omitempty"`
	RootfsDiffPath        string `protobuf:"bytes,3,opt,name=RootfsDiffPath,proto3" json:"RootfsDiffPath,omitempty"`
	ContainerStorage      string `protobuf:"bytes,4,opt,name=ContainerStorage,proto3" json:"ContainerStorage,omitempty"`
	RegistryAuthTokenPush string `protobuf:"bytes,5,opt,name=RegistryAuthTokenPush,proto3" json:"RegistryAuthTokenPush,omitempty"`
	RegistryAuthTokenPull string `protobuf:"bytes,6,opt,name=RegistryAuthTokenPull,proto3" json:"RegistryAuthTokenPull,omitempty"`
}

func (x *CRIOImagePushArgs) Reset() {
	*x = CRIOImagePushArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRIOImagePushArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRIOImagePushArgs) ProtoMessage() {}

func (x *CRIOImagePushArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRIOImagePushArgs.ProtoReflect.Descriptor instead.
func (*CRIOImagePushArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *CRIOImagePushArgs) GetOriginalImageRef() string {
	if x != nil {
		return x.OriginalImageRef
	}
	return ""
}

func (x *CRIOImagePushArgs) GetNewImageRef() string {
	if x != nil {
		return x.NewImageRef
	}
	return ""
}

func (x *CRIOImagePushArgs) GetRootfsDiffPath() string {
	if x != nil {
		return x.RootfsDiffPath
	}
	return ""
}

func (x *CRIOImagePushArgs) GetContainerStorage() string {
	if x != nil {
		return x.ContainerStorage
	}
	return ""
}

func (x *CRIOImagePushArgs) GetRegistryAuthTokenPush() string {
	if x != nil {
		return x.RegistryAuthTokenPush
	}
	return ""
}

func (x *CRIOImagePushArgs) GetRegistryAuthTokenPull() string {
	if x != nil {
		return x.RegistryAuthTokenPull
	}
	return ""
}

type CRIOImagePushResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CRIOImagePushResp) Reset() {
	*x = CRIOImagePushResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRIOImagePushResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRIOImagePushResp) ProtoMessage() {}

func (x *CRIOImagePushResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRIOImagePushResp.ProtoReflect.Descriptor instead.
func (*CRIOImagePushResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *CRIOImagePushResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CRIORootfsDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID      string `protobuf:"bytes,1,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	Dest             string `protobuf:"bytes,2,opt,name=Dest,proto3" json:"Dest,omitempty"`
	ContainerStorage string `protobuf:"bytes,3,opt,name=ContainerStorage,proto3" json:"ContainerStorage,omitempty"`
}

func (x *CRIORootfsDumpArgs) Reset() {
	*x = CRIORootfsDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRIORootfsDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRIORootfsDumpArgs) ProtoMessage() {}

func (x *CRIORootfsDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRIORootfsDumpArgs.ProtoReflect.Descriptor instead.
func (*CRIORootfsDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *CRIORootfsDumpArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *CRIORootfsDumpArgs) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *CRIORootfsDumpArgs) GetContainerStorage() string {
	if x != nil {
		return x.ContainerStorage
	}
	return ""
}

type CRIORootfsDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest string `protobuf:"bytes,1,opt,name=Dest,proto3" json:"Dest,omitempty"`
}

func (x *CRIORootfsDumpResp) Reset() {
	*x = CRIORootfsDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRIORootfsDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRIORootfsDumpResp) ProtoMessage() {}

func (x *CRIORootfsDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRIORootfsDumpResp.ProtoReflect.Descriptor instead.
func (*CRIORootfsDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *CRIORootfsDumpResp) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type StartArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task          string   `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
	JID           string   `protobuf:"bytes,2,opt,name=JID,proto3" json:"JID,omitempty"`
	WorkingDir    string   `protobuf:"bytes,3,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	Env           []string `protobuf:"bytes,4,rep,name=Env,proto3" json:"Env,omitempty"`
	LogOutputFile string   `protobuf:"bytes,5,opt,name=LogOutputFile,proto3" json:"LogOutputFile,omitempty"`
	UID           int32    `protobuf:"varint,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID           int32    `protobuf:"varint,7,opt,name=GID,proto3" json:"GID,omitempty"`
	GPU           bool     `protobuf:"varint,8,opt,name=GPU,proto3" json:"GPU,omitempty"`
	Groups        []int32  `protobuf:"varint,9,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *StartArgs) Reset() {
	*x = StartArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartArgs) ProtoMessage() {}

func (x *StartArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartArgs.ProtoReflect.Descriptor instead.
func (*StartArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *StartArgs) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *StartArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *StartArgs) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *StartArgs) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StartArgs) GetLogOutputFile() string {
	if x != nil {
		return x.LogOutputFile
	}
	return ""
}

func (x *StartArgs) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *StartArgs) GetGID() int32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *StartArgs) GetGPU() bool {
	if x != nil {
		return x.GPU
	}
	return false
}

func (x *StartArgs) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type StartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	PID     int32  `protobuf:"varint,2,opt,name=PID,proto3" json:"PID,omitempty"`
	JID     string `protobuf:"bytes,3,opt,name=JID,proto3" json:"JID,omitempty"`
}

func (x *StartResp) Reset() {
	*x = StartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResp) ProtoMessage() {}

func (x *StartResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResp.ProtoReflect.Descriptor instead.
func (*StartResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *StartResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartResp) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *StartResp) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

type DumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID            int32  `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Dir            string `protobuf:"bytes,2,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Type           CRType `protobuf:"varint,3,opt,name=Type,proto3,enum=cedana.services.task.CRType" json:"Type,omitempty"`
	JID            string `protobuf:"bytes,4,opt,name=JID,proto3" json:"JID,omitempty"`
	GPU            bool   `protobuf:"varint,5,opt,name=GPU,proto3" json:"GPU,omitempty"`
	TcpEstablished bool   `protobuf:"varint,6,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	Stream         bool   `protobuf:"varint,7,opt,name=Stream,proto3" json:"Stream,omitempty"`
}

func (x *DumpArgs) Reset() {
	*x = DumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpArgs) ProtoMessage() {}

func (x *DumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpArgs.ProtoReflect.Descriptor instead.
func (*DumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *DumpArgs) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *DumpArgs) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DumpArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *DumpArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *DumpArgs) GetGPU() bool {
	if x != nil {
		return x.GPU
	}
	return false
}

func (x *DumpArgs) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *DumpArgs) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type DumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	CheckpointID string        `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string        `protobuf:"bytes,3,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	State        *ProcessState `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	DumpStats    *DumpStats    `protobuf:"bytes,5,opt,name=DumpStats,proto3" json:"DumpStats,omitempty"`
}

func (x *DumpResp) Reset() {
	*x = DumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpResp) ProtoMessage() {}

func (x *DumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpResp.ProtoReflect.Descriptor instead.
func (*DumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *DumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DumpResp) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *DumpResp) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *DumpResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DumpResp) GetDumpStats() *DumpStats {
	if x != nil {
		return x.DumpStats
	}
	return nil
}

type RestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           CRType  `protobuf:"varint,1,opt,name=Type,proto3,enum=cedana.services.task.CRType" json:"Type,omitempty"`
	CheckpointID   string  `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	CheckpointPath string  `protobuf:"bytes,3,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	JID            string  `protobuf:"bytes,4,opt,name=JID,proto3" json:"JID,omitempty"`
	UID            int32   `protobuf:"varint,5,opt,name=UID,proto3" json:"UID,omitempty"`
	GID            int32   `protobuf:"varint,6,opt,name=GID,proto3" json:"GID,omitempty"`
	Groups         []int32 `protobuf:"varint,7,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
	TcpEstablished bool    `protobuf:"varint,8,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	Stream         bool    `protobuf:"varint,9,opt,name=Stream,proto3" json:"Stream,omitempty"`
}

func (x *RestoreArgs) Reset() {
	*x = RestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreArgs) ProtoMessage() {}

func (x *RestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreArgs.ProtoReflect.Descriptor instead.
func (*RestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *RestoreArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *RestoreArgs) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RestoreArgs) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *RestoreArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *RestoreArgs) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *RestoreArgs) GetGID() int32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *RestoreArgs) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RestoreArgs) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *RestoreArgs) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type RestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	NewPID       int32         `protobuf:"varint,2,opt,name=NewPID,proto3" json:"NewPID,omitempty"`
	State        *ProcessState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
	RestoreStats *RestoreStats `protobuf:"bytes,6,opt,name=RestoreStats,proto3" json:"RestoreStats,omitempty"`
}

func (x *RestoreResp) Reset() {
	*x = RestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResp) ProtoMessage() {}

func (x *RestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResp.ProtoReflect.Descriptor instead.
func (*RestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RestoreResp) GetNewPID() int32 {
	if x != nil {
		return x.NewPID
	}
	return 0
}

func (x *RestoreResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RestoreResp) GetRestoreStats() *RestoreStats {
	if x != nil {
		return x.RestoreStats
	}
	return nil
}

type QueryArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PIDs []int32  `protobuf:"varint,1,rep,packed,name=PIDs,proto3" json:"PIDs,omitempty"`
	JIDs []string `protobuf:"bytes,2,rep,name=JIDs,proto3" json:"JIDs,omitempty"`
}

func (x *QueryArgs) Reset() {
	*x = QueryArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArgs) ProtoMessage() {}

func (x *QueryArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArgs.ProtoReflect.Descriptor instead.
func (*QueryArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *QueryArgs) GetPIDs() []int32 {
	if x != nil {
		return x.PIDs
	}
	return nil
}

func (x *QueryArgs) GetJIDs() []string {
	if x != nil {
		return x.JIDs
	}
	return nil
}

type QueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*ProcessState `protobuf:"bytes,1,rep,name=Processes,proto3" json:"Processes,omitempty"`
}

func (x *QueryResp) Reset() {
	*x = QueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResp) ProtoMessage() {}

func (x *QueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResp.ProtoReflect.Descriptor instead.
func (*QueryResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *QueryResp) GetProcesses() []*ProcessState {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ContainerdDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuncDumpArgs             *RuncDumpArgs             `protobuf:"bytes,1,opt,name=RuncDumpArgs,proto3" json:"RuncDumpArgs,omitempty"`
	ContainerdRootfsDumpArgs *ContainerdRootfsDumpArgs `protobuf:"bytes,2,opt,name=ContainerdRootfsDumpArgs,proto3" json:"ContainerdRootfsDumpArgs,omitempty"`
}

func (x *ContainerdDumpArgs) Reset() {
	*x = ContainerdDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdDumpArgs) ProtoMessage() {}

func (x *ContainerdDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdDumpArgs.ProtoReflect.Descriptor instead.
func (*ContainerdDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *ContainerdDumpArgs) GetRuncDumpArgs() *RuncDumpArgs {
	if x != nil {
		return x.RuncDumpArgs
	}
	return nil
}

func (x *ContainerdDumpArgs) GetContainerdRootfsDumpArgs() *ContainerdRootfsDumpArgs {
	if x != nil {
		return x.ContainerdRootfsDumpArgs
	}
	return nil
}

type ContainerdDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointPath string `protobuf:"bytes,1,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ContainerdDumpResp) Reset() {
	*x = ContainerdDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdDumpResp) ProtoMessage() {}

func (x *ContainerdDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdDumpResp.ProtoReflect.Descriptor instead.
func (*ContainerdDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *ContainerdDumpResp) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *ContainerdDumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ContainerdRestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgPath     string `protobuf:"bytes,1,opt,name=ImgPath,proto3" json:"ImgPath,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
}

func (x *ContainerdRestoreArgs) Reset() {
	*x = ContainerdRestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRestoreArgs) ProtoMessage() {}

func (x *ContainerdRestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRestoreArgs.ProtoReflect.Descriptor instead.
func (*ContainerdRestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *ContainerdRestoreArgs) GetImgPath() string {
	if x != nil {
		return x.ImgPath
	}
	return ""
}

func (x *ContainerdRestoreArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type ContainerdRestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ContainerdRestoreResp) Reset() {
	*x = ContainerdRestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRestoreResp) ProtoMessage() {}

func (x *ContainerdRestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRestoreResp.ProtoReflect.Descriptor instead.
func (*ContainerdRestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *ContainerdRestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ContainerdQueryArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      string `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *ContainerdQueryArgs) Reset() {
	*x = ContainerdQueryArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdQueryArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdQueryArgs) ProtoMessage() {}

func (x *ContainerdQueryArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdQueryArgs.ProtoReflect.Descriptor instead.
func (*ContainerdQueryArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *ContainerdQueryArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *ContainerdQueryArgs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ContainerdQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*ContainerdContainer `protobuf:"bytes,1,rep,name=Containers,proto3" json:"Containers,omitempty"`
}

func (x *ContainerdQueryResp) Reset() {
	*x = ContainerdQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdQueryResp) ProtoMessage() {}

func (x *ContainerdQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdQueryResp.ProtoReflect.Descriptor instead.
func (*ContainerdQueryResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *ContainerdQueryResp) GetContainers() []*ContainerdContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

type ContainerdContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName    string `protobuf:"bytes,1,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	ImageName        string `protobuf:"bytes,2,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	SandboxId        string `protobuf:"bytes,3,opt,name=SandboxId,proto3" json:"SandboxId,omitempty"`
	SandboxName      string `protobuf:"bytes,4,opt,name=SandboxName,proto3" json:"SandboxName,omitempty"`
	SandboxNamespace string `protobuf:"bytes,5,opt,name=SandboxNamespace,proto3" json:"SandboxNamespace,omitempty"`
	SandboxUid       string `protobuf:"bytes,6,opt,name=SandboxUid,proto3" json:"SandboxUid,omitempty"`
}

func (x *ContainerdContainer) Reset() {
	*x = ContainerdContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdContainer) ProtoMessage() {}

func (x *ContainerdContainer) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdContainer.ProtoReflect.Descriptor instead.
func (*ContainerdContainer) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *ContainerdContainer) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerdContainer) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerdContainer) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *ContainerdContainer) GetSandboxName() string {
	if x != nil {
		return x.SandboxName
	}
	return ""
}

func (x *ContainerdContainer) GetSandboxNamespace() string {
	if x != nil {
		return x.SandboxNamespace
	}
	return ""
}

func (x *ContainerdContainer) GetSandboxUid() string {
	if x != nil {
		return x.SandboxUid
	}
	return ""
}

type ContainerdRootfsDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID string `protobuf:"bytes,1,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ImageRef    string `protobuf:"bytes,2,opt,name=ImageRef,proto3" json:"ImageRef,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Namespace   string `protobuf:"bytes,4,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *ContainerdRootfsDumpArgs) Reset() {
	*x = ContainerdRootfsDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRootfsDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRootfsDumpArgs) ProtoMessage() {}

func (x *ContainerdRootfsDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRootfsDumpArgs.ProtoReflect.Descriptor instead.
func (*ContainerdRootfsDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *ContainerdRootfsDumpArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerdRootfsDumpArgs) GetImageRef() string {
	if x != nil {
		return x.ImageRef
	}
	return ""
}

func (x *ContainerdRootfsDumpArgs) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContainerdRootfsDumpArgs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ContainerdRootfsDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageRef string `protobuf:"bytes,1,opt,name=ImageRef,proto3" json:"ImageRef,omitempty"`
}

func (x *ContainerdRootfsDumpResp) Reset() {
	*x = ContainerdRootfsDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRootfsDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRootfsDumpResp) ProtoMessage() {}

func (x *ContainerdRootfsDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRootfsDumpResp.ProtoReflect.Descriptor instead.
func (*ContainerdRootfsDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *ContainerdRootfsDumpResp) GetImageRef() string {
	if x != nil {
		return x.ImageRef
	}
	return ""
}

type ContainerdRootfsRestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID string `protobuf:"bytes,1,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ImageRef    string `protobuf:"bytes,2,opt,name=ImageRef,proto3" json:"ImageRef,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Namespace   string `protobuf:"bytes,4,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *ContainerdRootfsRestoreArgs) Reset() {
	*x = ContainerdRootfsRestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRootfsRestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRootfsRestoreArgs) ProtoMessage() {}

func (x *ContainerdRootfsRestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRootfsRestoreArgs.ProtoReflect.Descriptor instead.
func (*ContainerdRootfsRestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{24}
}

func (x *ContainerdRootfsRestoreArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerdRootfsRestoreArgs) GetImageRef() string {
	if x != nil {
		return x.ImageRef
	}
	return ""
}

func (x *ContainerdRootfsRestoreArgs) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContainerdRootfsRestoreArgs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ContainerdRootfsRestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageRef string `protobuf:"bytes,1,opt,name=ImageRef,proto3" json:"ImageRef,omitempty"`
}

func (x *ContainerdRootfsRestoreResp) Reset() {
	*x = ContainerdRootfsRestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRootfsRestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRootfsRestoreResp) ProtoMessage() {}

func (x *ContainerdRootfsRestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRootfsRestoreResp.ProtoReflect.Descriptor instead.
func (*ContainerdRootfsRestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{25}
}

func (x *ContainerdRootfsRestoreResp) GetImageRef() string {
	if x != nil {
		return x.ImageRef
	}
	return ""
}

type RuncDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root           string        `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	CheckpointPath string        `protobuf:"bytes,2,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	ContainerID    string        `protobuf:"bytes,3,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	CriuOpts       *CriuOpts     `protobuf:"bytes,4,opt,name=CriuOpts,proto3" json:"CriuOpts,omitempty"`
	Type           CRType        `protobuf:"varint,5,opt,name=Type,proto3,enum=cedana.services.task.CRType" json:"Type,omitempty"`
	State          *ProcessState `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	GPU            bool          `protobuf:"varint,7,opt,name=GPU,proto3" json:"GPU,omitempty"`
	Pid            int32         `protobuf:"varint,8,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RuncDumpArgs) Reset() {
	*x = RuncDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncDumpArgs) ProtoMessage() {}

func (x *RuncDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncDumpArgs.ProtoReflect.Descriptor instead.
func (*RuncDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{26}
}

func (x *RuncDumpArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RuncDumpArgs) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *RuncDumpArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *RuncDumpArgs) GetCriuOpts() *CriuOpts {
	if x != nil {
		return x.CriuOpts
	}
	return nil
}

func (x *RuncDumpArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *RuncDumpArgs) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RuncDumpArgs) GetGPU() bool {
	if x != nil {
		return x.GPU
	}
	return false
}

func (x *RuncDumpArgs) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RuncDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	CheckpointID string        `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string        `protobuf:"bytes,3,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	State        *ProcessState `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *RuncDumpResp) Reset() {
	*x = RuncDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncDumpResp) ProtoMessage() {}

func (x *RuncDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncDumpResp.ProtoReflect.Descriptor instead.
func (*RuncDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{27}
}

func (x *RuncDumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RuncDumpResp) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RuncDumpResp) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *RuncDumpResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

type CriuOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImagesDirectory         string   `protobuf:"bytes,1,opt,name=ImagesDirectory,proto3" json:"ImagesDirectory,omitempty"`
	WorkDirectory           string   `protobuf:"bytes,2,opt,name=WorkDirectory,proto3" json:"WorkDirectory,omitempty"`
	ParentImage             string   `protobuf:"bytes,3,opt,name=ParentImage,proto3" json:"ParentImage,omitempty"`
	LeaveRunning            bool     `protobuf:"varint,4,opt,name=LeaveRunning,proto3" json:"LeaveRunning,omitempty"`
	TcpEstablished          bool     `protobuf:"varint,5,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	ExternalUnixConnections bool     `protobuf:"varint,6,opt,name=ExternalUnixConnections,proto3" json:"ExternalUnixConnections,omitempty"`
	ShellJob                bool     `protobuf:"varint,7,opt,name=ShellJob,proto3" json:"ShellJob,omitempty"`
	FileLocks               bool     `protobuf:"varint,8,opt,name=FileLocks,proto3" json:"FileLocks,omitempty"`
	PreDump                 bool     `protobuf:"varint,9,opt,name=PreDump,proto3" json:"PreDump,omitempty"`
	Stream                  bool     `protobuf:"varint,10,opt,name=Stream,proto3" json:"Stream,omitempty"`
	EmptyNs                 int32    `protobuf:"varint,12,opt,name=EmptyNs,proto3" json:"EmptyNs,omitempty"`
	AutoDedup               bool     `protobuf:"varint,13,opt,name=AutoDedup,proto3" json:"AutoDedup,omitempty"`
	LazyPages               bool     `protobuf:"varint,14,opt,name=LazyPages,proto3" json:"LazyPages,omitempty"`
	StatusFd                int32    `protobuf:"varint,15,opt,name=StatusFd,proto3" json:"StatusFd,omitempty"`
	LsmProfile              string   `protobuf:"bytes,16,opt,name=LsmProfile,proto3" json:"LsmProfile,omitempty"`
	LsmMountContext         string   `protobuf:"bytes,17,opt,name=LsmMountContext,proto3" json:"LsmMountContext,omitempty"`
	External                []string `protobuf:"bytes,18,rep,name=External,proto3" json:"External,omitempty"`
}

func (x *CriuOpts) Reset() {
	*x = CriuOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriuOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriuOpts) ProtoMessage() {}

func (x *CriuOpts) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriuOpts.ProtoReflect.Descriptor instead.
func (*CriuOpts) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{28}
}

func (x *CriuOpts) GetImagesDirectory() string {
	if x != nil {
		return x.ImagesDirectory
	}
	return ""
}

func (x *CriuOpts) GetWorkDirectory() string {
	if x != nil {
		return x.WorkDirectory
	}
	return ""
}

func (x *CriuOpts) GetParentImage() string {
	if x != nil {
		return x.ParentImage
	}
	return ""
}

func (x *CriuOpts) GetLeaveRunning() bool {
	if x != nil {
		return x.LeaveRunning
	}
	return false
}

func (x *CriuOpts) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *CriuOpts) GetExternalUnixConnections() bool {
	if x != nil {
		return x.ExternalUnixConnections
	}
	return false
}

func (x *CriuOpts) GetShellJob() bool {
	if x != nil {
		return x.ShellJob
	}
	return false
}

func (x *CriuOpts) GetFileLocks() bool {
	if x != nil {
		return x.FileLocks
	}
	return false
}

func (x *CriuOpts) GetPreDump() bool {
	if x != nil {
		return x.PreDump
	}
	return false
}

func (x *CriuOpts) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CriuOpts) GetEmptyNs() int32 {
	if x != nil {
		return x.EmptyNs
	}
	return 0
}

func (x *CriuOpts) GetAutoDedup() bool {
	if x != nil {
		return x.AutoDedup
	}
	return false
}

func (x *CriuOpts) GetLazyPages() bool {
	if x != nil {
		return x.LazyPages
	}
	return false
}

func (x *CriuOpts) GetStatusFd() int32 {
	if x != nil {
		return x.StatusFd
	}
	return 0
}

func (x *CriuOpts) GetLsmProfile() string {
	if x != nil {
		return x.LsmProfile
	}
	return ""
}

func (x *CriuOpts) GetLsmMountContext() string {
	if x != nil {
		return x.LsmMountContext
	}
	return ""
}

func (x *CriuOpts) GetExternal() []string {
	if x != nil {
		return x.External
	}
	return nil
}

type RuncRestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerID  string    `protobuf:"bytes,1,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ImagePath    string    `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	IsK3S        bool      `protobuf:"varint,3,opt,name=IsK3s,proto3" json:"IsK3s,omitempty"`
	Opts         *RuncOpts `protobuf:"bytes,4,opt,name=Opts,proto3" json:"Opts,omitempty"`
	Type         CRType    `protobuf:"varint,5,opt,name=Type,proto3,enum=cedana.services.task.CRType" json:"Type,omitempty"`
	CheckpointID string    `protobuf:"bytes,6,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
}

func (x *RuncRestoreArgs) Reset() {
	*x = RuncRestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncRestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncRestoreArgs) ProtoMessage() {}

func (x *RuncRestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncRestoreArgs.ProtoReflect.Descriptor instead.
func (*RuncRestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{29}
}

func (x *RuncRestoreArgs) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *RuncRestoreArgs) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *RuncRestoreArgs) GetIsK3S() bool {
	if x != nil {
		return x.IsK3S
	}
	return false
}

func (x *RuncRestoreArgs) GetOpts() *RuncOpts {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *RuncRestoreArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *RuncRestoreArgs) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

type RuncRestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	State   *ProcessState `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *RuncRestoreResp) Reset() {
	*x = RuncRestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncRestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncRestoreResp) ProtoMessage() {}

func (x *RuncRestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncRestoreResp.ProtoReflect.Descriptor instead.
func (*RuncRestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{30}
}

func (x *RuncRestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RuncRestoreResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

type RuncOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root            string `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	ContainerID     string `protobuf:"bytes,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	Bundle          string `protobuf:"bytes,3,opt,name=Bundle,proto3" json:"Bundle,omitempty"`
	SystemdCgroup   bool   `protobuf:"varint,4,opt,name=SystemdCgroup,proto3" json:"SystemdCgroup,omitempty"`
	NoPivot         bool   `protobuf:"varint,5,opt,name=NoPivot,proto3" json:"NoPivot,omitempty"`
	NoMountFallback bool   `protobuf:"varint,6,opt,name=NoMountFallback,proto3" json:"NoMountFallback,omitempty"`
	NoNewKeyring    bool   `protobuf:"varint,7,opt,name=NoNewKeyring,proto3" json:"NoNewKeyring,omitempty"`
	Rootless        string `protobuf:"bytes,8,opt,name=Rootless,proto3" json:"Rootless,omitempty"`
	NoSubreaper     bool   `protobuf:"varint,9,opt,name=NoSubreaper,proto3" json:"NoSubreaper,omitempty"`
	Keep            bool   `protobuf:"varint,10,opt,name=Keep,proto3" json:"Keep,omitempty"`
	ConsoleSocket   string `protobuf:"bytes,11,opt,name=ConsoleSocket,proto3" json:"ConsoleSocket,omitempty"`
	Detach          bool   `protobuf:"varint,12,opt,name=Detach,proto3" json:"Detach,omitempty"`
	PidFile         string `protobuf:"bytes,13,opt,name=PidFile,proto3" json:"PidFile,omitempty"`
	PreserveFds     int32  `protobuf:"varint,14,opt,name=PreserveFds,proto3" json:"PreserveFds,omitempty"`
	NetPid          int32  `protobuf:"varint,15,opt,name=NetPid,proto3" json:"NetPid,omitempty"`
}

func (x *RuncOpts) Reset() {
	*x = RuncOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncOpts) ProtoMessage() {}

func (x *RuncOpts) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncOpts.ProtoReflect.Descriptor instead.
func (*RuncOpts) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{31}
}

func (x *RuncOpts) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RuncOpts) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *RuncOpts) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

func (x *RuncOpts) GetSystemdCgroup() bool {
	if x != nil {
		return x.SystemdCgroup
	}
	return false
}

func (x *RuncOpts) GetNoPivot() bool {
	if x != nil {
		return x.NoPivot
	}
	return false
}

func (x *RuncOpts) GetNoMountFallback() bool {
	if x != nil {
		return x.NoMountFallback
	}
	return false
}

func (x *RuncOpts) GetNoNewKeyring() bool {
	if x != nil {
		return x.NoNewKeyring
	}
	return false
}

func (x *RuncOpts) GetRootless() string {
	if x != nil {
		return x.Rootless
	}
	return ""
}

func (x *RuncOpts) GetNoSubreaper() bool {
	if x != nil {
		return x.NoSubreaper
	}
	return false
}

func (x *RuncOpts) GetKeep() bool {
	if x != nil {
		return x.Keep
	}
	return false
}

func (x *RuncOpts) GetConsoleSocket() string {
	if x != nil {
		return x.ConsoleSocket
	}
	return ""
}

func (x *RuncOpts) GetDetach() bool {
	if x != nil {
		return x.Detach
	}
	return false
}

func (x *RuncOpts) GetPidFile() string {
	if x != nil {
		return x.PidFile
	}
	return ""
}

func (x *RuncOpts) GetPreserveFds() int32 {
	if x != nil {
		return x.PreserveFds
	}
	return 0
}

func (x *RuncOpts) GetNetPid() int32 {
	if x != nil {
		return x.NetPid
	}
	return 0
}

type RuncQueryArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root           string   `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	Namespace      string   `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	ContainerNames []string `protobuf:"bytes,3,rep,name=ContainerNames,proto3" json:"ContainerNames,omitempty"`
	SandboxNames   []string `protobuf:"bytes,4,rep,name=SandboxNames,proto3" json:"SandboxNames,omitempty"`
}

func (x *RuncQueryArgs) Reset() {
	*x = RuncQueryArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncQueryArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncQueryArgs) ProtoMessage() {}

func (x *RuncQueryArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncQueryArgs.ProtoReflect.Descriptor instead.
func (*RuncQueryArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{32}
}

func (x *RuncQueryArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RuncQueryArgs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RuncQueryArgs) GetContainerNames() []string {
	if x != nil {
		return x.ContainerNames
	}
	return nil
}

func (x *RuncQueryArgs) GetSandboxNames() []string {
	if x != nil {
		return x.SandboxNames
	}
	return nil
}

type RuncQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*RuncContainer `protobuf:"bytes,1,rep,name=Containers,proto3" json:"Containers,omitempty"`
}

func (x *RuncQueryResp) Reset() {
	*x = RuncQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncQueryResp) ProtoMessage() {}

func (x *RuncQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncQueryResp.ProtoReflect.Descriptor instead.
func (*RuncQueryResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{33}
}

func (x *RuncQueryResp) GetContainers() []*RuncContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

type RuncContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BundlePath    string `protobuf:"bytes,2,opt,name=BundlePath,proto3" json:"BundlePath,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	ImageName     string `protobuf:"bytes,4,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	SandboxId     string `protobuf:"bytes,5,opt,name=SandboxId,proto3" json:"SandboxId,omitempty"`
	SandboxName   string `protobuf:"bytes,6,opt,name=SandboxName,proto3" json:"SandboxName,omitempty"`
	SandboxUid    string `protobuf:"bytes,7,opt,name=SandboxUid,proto3" json:"SandboxUid,omitempty"`
}

func (x *RuncContainer) Reset() {
	*x = RuncContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncContainer) ProtoMessage() {}

func (x *RuncContainer) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncContainer.ProtoReflect.Descriptor instead.
func (*RuncContainer) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{34}
}

func (x *RuncContainer) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RuncContainer) GetBundlePath() string {
	if x != nil {
		return x.BundlePath
	}
	return ""
}

func (x *RuncContainer) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *RuncContainer) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *RuncContainer) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *RuncContainer) GetSandboxName() string {
	if x != nil {
		return x.SandboxName
	}
	return ""
}

func (x *RuncContainer) GetSandboxUid() string {
	if x != nil {
		return x.SandboxUid
	}
	return ""
}

type RuncGetPausePidArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundlePath string `protobuf:"bytes,1,opt,name=BundlePath,proto3" json:"BundlePath,omitempty"`
}

func (x *RuncGetPausePidArgs) Reset() {
	*x = RuncGetPausePidArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncGetPausePidArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncGetPausePidArgs) ProtoMessage() {}

func (x *RuncGetPausePidArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncGetPausePidArgs.ProtoReflect.Descriptor instead.
func (*RuncGetPausePidArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35}
}

func (x *RuncGetPausePidArgs) GetBundlePath() string {
	if x != nil {
		return x.BundlePath
	}
	return ""
}

type RuncGetPausePidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PausePid int64 `protobuf:"varint,1,opt,name=PausePid,proto3" json:"PausePid,omitempty"`
}

func (x *RuncGetPausePidResp) Reset() {
	*x = RuncGetPausePidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncGetPausePidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncGetPausePidResp) ProtoMessage() {}

func (x *RuncGetPausePidResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncGetPausePidResp.ProtoReflect.Descriptor instead.
func (*RuncGetPausePidResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{36}
}

func (x *RuncGetPausePidResp) GetPausePid() int64 {
	if x != nil {
		return x.PausePid
	}
	return 0
}

type LogStreamingArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Source    string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *LogStreamingArgs) Reset() {
	*x = LogStreamingArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStreamingArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamingArgs) ProtoMessage() {}

func (x *LogStreamingArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamingArgs.ProtoReflect.Descriptor instead.
func (*LogStreamingArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{37}
}

func (x *LogStreamingArgs) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LogStreamingArgs) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogStreamingArgs) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogStreamingArgs) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LogStreamingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *LogStreamingResp) Reset() {
	*x = LogStreamingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStreamingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamingResp) ProtoMessage() {}

func (x *LogStreamingResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamingResp.ProtoReflect.Descriptor instead.
func (*LogStreamingResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{38}
}

func (x *LogStreamingResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ProcessState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID             int32           `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Task            string          `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty"`
	ContainerID     string          `protobuf:"bytes,4,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	StartedAt       string          `protobuf:"bytes,5,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	ProcessInfo     *ProcessInfo    `protobuf:"bytes,6,opt,name=ProcessInfo,proto3" json:"ProcessInfo,omitempty"`
	CheckpointPath  string          `protobuf:"bytes,7,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	CheckpointState CheckpointState `protobuf:"varint,8,opt,name=CheckpointState,proto3,enum=cedana.services.task.CheckpointState" json:"CheckpointState,omitempty"`
	JobState        JobState        `protobuf:"varint,9,opt,name=JobState,proto3,enum=cedana.services.task.JobState" json:"JobState,omitempty"`
	RemoteState     []*RemoteState  `protobuf:"bytes,10,rep,name=RemoteState,proto3" json:"RemoteState,omitempty"`
	GPUCheckpointed bool            `protobuf:"varint,11,opt,name=GPUCheckpointed,proto3" json:"GPUCheckpointed,omitempty"`
	JID             string          `protobuf:"bytes,12,opt,name=JID,proto3" json:"JID,omitempty"`
	HostInfo        *HostInfo       `protobuf:"bytes,13,opt,name=HostInfo,proto3" json:"HostInfo,omitempty"`
	CPUInfo         *CPUInfo        `protobuf:"bytes,14,opt,name=CPUInfo,proto3" json:"CPUInfo,omitempty"`
	MemoryInfo      *MemoryInfo     `protobuf:"bytes,15,opt,name=MemoryInfo,proto3" json:"MemoryInfo,omitempty"`
	UIDs            []int32         `protobuf:"varint,16,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	GIDs            []int32         `protobuf:"varint,17,rep,packed,name=GIDs,proto3" json:"GIDs,omitempty"`
	Groups          []int32         `protobuf:"varint,18,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *ProcessState) Reset() {
	*x = ProcessState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessState) ProtoMessage() {}

func (x *ProcessState) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessState.ProtoReflect.Descriptor instead.
func (*ProcessState) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{39}
}

func (x *ProcessState) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessState) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ProcessState) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ProcessState) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ProcessState) GetProcessInfo() *ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

func (x *ProcessState) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *ProcessState) GetCheckpointState() CheckpointState {
	if x != nil {
		return x.CheckpointState
	}
	return CheckpointState_CHECKPOINTED
}

func (x *ProcessState) GetJobState() JobState {
	if x != nil {
		return x.JobState
	}
	return JobState_JOB_STARTUP_FAILED
}

func (x *ProcessState) GetRemoteState() []*RemoteState {
	if x != nil {
		return x.RemoteState
	}
	return nil
}

func (x *ProcessState) GetGPUCheckpointed() bool {
	if x != nil {
		return x.GPUCheckpointed
	}
	return false
}

func (x *ProcessState) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *ProcessState) GetHostInfo() *HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *ProcessState) GetCPUInfo() *CPUInfo {
	if x != nil {
		return x.CPUInfo
	}
	return nil
}

func (x *ProcessState) GetMemoryInfo() *MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

func (x *ProcessState) GetUIDs() []int32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ProcessState) GetGIDs() []int32 {
	if x != nil {
		return x.GIDs
	}
	return nil
}

func (x *ProcessState) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type RemoteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointID string `protobuf:"bytes,1,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string `protobuf:"bytes,2,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	Timestamp    int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RemoteState) Reset() {
	*x = RemoteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteState) ProtoMessage() {}

func (x *RemoteState) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteState.ProtoReflect.Descriptor instead.
func (*RemoteState) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{40}
}

func (x *RemoteState) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RemoteState) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *RemoteState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID                     int32             `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	AttachedToHardwareAccel bool              `protobuf:"varint,2,opt,name=AttachedToHardwareAccel,proto3" json:"AttachedToHardwareAccel,omitempty"`
	OpenFds                 []*OpenFilesStat  `protobuf:"bytes,3,rep,name=OpenFds,proto3" json:"OpenFds,omitempty"`
	WorkingDir              string            `protobuf:"bytes,4,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	OpenConnections         []*ConnectionStat `protobuf:"bytes,5,rep,name=OpenConnections,proto3" json:"OpenConnections,omitempty"`
	MemoryPercent           float32           `protobuf:"fixed32,6,opt,name=MemoryPercent,proto3" json:"MemoryPercent,omitempty"`
	IsRunning               bool              `protobuf:"varint,7,opt,name=IsRunning,proto3" json:"IsRunning,omitempty"`
	Status                  string            `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{41}
}

func (x *ProcessInfo) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessInfo) GetAttachedToHardwareAccel() bool {
	if x != nil {
		return x.AttachedToHardwareAccel
	}
	return false
}

func (x *ProcessInfo) GetOpenFds() []*OpenFilesStat {
	if x != nil {
		return x.OpenFds
	}
	return nil
}

func (x *ProcessInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ProcessInfo) GetOpenConnections() []*ConnectionStat {
	if x != nil {
		return x.OpenConnections
	}
	return nil
}

func (x *ProcessInfo) GetMemoryPercent() float32 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *ProcessInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *ProcessInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostID               string `protobuf:"bytes,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	Hostname             string `protobuf:"bytes,4,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	OS                   string `protobuf:"bytes,5,opt,name=OS,proto3" json:"OS,omitempty"`
	Platform             string `protobuf:"bytes,6,opt,name=Platform,proto3" json:"Platform,omitempty"`
	KernelVersion        string `protobuf:"bytes,7,opt,name=KernelVersion,proto3" json:"KernelVersion,omitempty"`
	KernelArch           string `protobuf:"bytes,8,opt,name=KernelArch,proto3" json:"KernelArch,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,9,opt,name=VirtualizationSystem,proto3" json:"VirtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,10,opt,name=VirtualizationRole,proto3" json:"VirtualizationRole,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{42}
}

func (x *HostInfo) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *HostInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HostInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *HostInfo) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *HostInfo) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *HostInfo) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	CPU        int32  `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	VendorID   string `protobuf:"bytes,3,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Family     string `protobuf:"bytes,4,opt,name=Family,proto3" json:"Family,omitempty"`
	PhysicalID string `protobuf:"bytes,5,opt,name=PhysicalID,proto3" json:"PhysicalID,omitempty"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{43}
}

func (x *CPUInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CPUInfo) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *CPUInfo) GetVendorID() string {
	if x != nil {
		return x.VendorID
	}
	return ""
}

func (x *CPUInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *CPUInfo) GetPhysicalID() string {
	if x != nil {
		return x.PhysicalID
	}
	return ""
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Available uint64 `protobuf:"varint,2,opt,name=Available,proto3" json:"Available,omitempty"`
	Used      uint64 `protobuf:"varint,3,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{44}
}

func (x *MemoryInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryInfo) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *MemoryInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type OpenFilesStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string                   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Fd     uint64                   `protobuf:"varint,2,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Mode   string                   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Stream OpenFilesStat_StreamType `protobuf:"varint,5,opt,name=Stream,proto3,enum=cedana.services.task.OpenFilesStat_StreamType" json:"Stream,omitempty"`
}

func (x *OpenFilesStat) Reset() {
	*x = OpenFilesStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFilesStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFilesStat) ProtoMessage() {}

func (x *OpenFilesStat) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFilesStat.ProtoReflect.Descriptor instead.
func (*OpenFilesStat) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{45}
}

func (x *OpenFilesStat) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenFilesStat) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *OpenFilesStat) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *OpenFilesStat) GetStream() OpenFilesStat_StreamType {
	if x != nil {
		return x.Stream
	}
	return OpenFilesStat_STDIN
}

type ConnectionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint32  `protobuf:"varint,1,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Family uint32  `protobuf:"varint,2,opt,name=Family,proto3" json:"Family,omitempty"`
	Type   uint32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Laddr  *Addr   `protobuf:"bytes,4,opt,name=Laddr,proto3" json:"Laddr,omitempty"`
	Raddr  *Addr   `protobuf:"bytes,5,opt,name=Raddr,proto3" json:"Raddr,omitempty"`
	Status string  `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	UIDs   []int32 `protobuf:"varint,7,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	PID    int32   `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *ConnectionStat) Reset() {
	*x = ConnectionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStat) ProtoMessage() {}

func (x *ConnectionStat) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStat.ProtoReflect.Descriptor instead.
func (*ConnectionStat) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{46}
}

func (x *ConnectionStat) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *ConnectionStat) GetFamily() uint32 {
	if x != nil {
		return x.Family
	}
	return 0
}

func (x *ConnectionStat) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConnectionStat) GetLaddr() *Addr {
	if x != nil {
		return x.Laddr
	}
	return nil
}

func (x *ConnectionStat) GetRaddr() *Addr {
	if x != nil {
		return x.Raddr
	}
	return nil
}

func (x *ConnectionStat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConnectionStat) GetUIDs() []int32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ConnectionStat) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{47}
}

func (x *Addr) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Addr) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ProcessStateStreamingArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID string `protobuf:"bytes,1,opt,name=JID,proto3" json:"JID,omitempty"`
}

func (x *ProcessStateStreamingArgs) Reset() {
	*x = ProcessStateStreamingArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStateStreamingArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStateStreamingArgs) ProtoMessage() {}

func (x *ProcessStateStreamingArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStateStreamingArgs.ProtoReflect.Descriptor instead.
func (*ProcessStateStreamingArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{48}
}

func (x *ProcessStateStreamingArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

type CheckpointReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason CheckpointReason_CheckpointReasonEnum `protobuf:"varint,1,opt,name=Reason,proto3,enum=cedana.services.task.CheckpointReason_CheckpointReasonEnum" json:"Reason,omitempty"`
}

func (x *CheckpointReason) Reset() {
	*x = CheckpointReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointReason) ProtoMessage() {}

func (x *CheckpointReason) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointReason.ProtoReflect.Descriptor instead.
func (*CheckpointReason) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{49}
}

func (x *CheckpointReason) GetReason() CheckpointReason_CheckpointReasonEnum {
	if x != nil {
		return x.Reason
	}
	return CheckpointReason_INSTANCE_TERMINATION
}

type StartAttachArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args  *StartArgs `protobuf:"bytes,1,opt,name=Args,proto3" json:"Args,omitempty"`
	Stdin string     `protobuf:"bytes,2,opt,name=Stdin,proto3" json:"Stdin,omitempty"` // TODO:add signals
}

func (x *StartAttachArgs) Reset() {
	*x = StartAttachArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAttachArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAttachArgs) ProtoMessage() {}

func (x *StartAttachArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAttachArgs.ProtoReflect.Descriptor instead.
func (*StartAttachArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{50}
}

func (x *StartAttachArgs) GetArgs() *StartArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *StartAttachArgs) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

type StartAttachResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout   string `protobuf:"bytes,1,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr   string `protobuf:"bytes,2,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	ExitCode int32  `protobuf:"varint,3,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
}

func (x *StartAttachResp) Reset() {
	*x = StartAttachResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAttachResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAttachResp) ProtoMessage() {}

func (x *StartAttachResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAttachResp.ProtoReflect.Descriptor instead.
func (*StartAttachResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{51}
}

func (x *StartAttachResp) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *StartAttachResp) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *StartAttachResp) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type RestoreAttachArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args  *RestoreArgs `protobuf:"bytes,1,opt,name=Args,proto3" json:"Args,omitempty"`
	Stdin string       `protobuf:"bytes,2,opt,name=Stdin,proto3" json:"Stdin,omitempty"`
}

func (x *RestoreAttachArgs) Reset() {
	*x = RestoreAttachArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreAttachArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreAttachArgs) ProtoMessage() {}

func (x *RestoreAttachArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreAttachArgs.ProtoReflect.Descriptor instead.
func (*RestoreAttachArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{52}
}

func (x *RestoreAttachArgs) GetArgs() *RestoreArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RestoreAttachArgs) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

type RestoreAttachResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout   string `protobuf:"bytes,1,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr   string `protobuf:"bytes,2,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	ExitCode int32  `protobuf:"varint,3,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
}

func (x *RestoreAttachResp) Reset() {
	*x = RestoreAttachResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreAttachResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreAttachResp) ProtoMessage() {}

func (x *RestoreAttachResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreAttachResp.ProtoReflect.Descriptor instead.
func (*RestoreAttachResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{53}
}

func (x *RestoreAttachResp) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *RestoreAttachResp) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *RestoreAttachResp) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type DetailedHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID    int32   `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	GID    int32   `protobuf:"varint,2,opt,name=GID,proto3" json:"GID,omitempty"`
	Groups []int32 `protobuf:"varint,3,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *DetailedHealthCheckRequest) Reset() {
	*x = DetailedHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedHealthCheckRequest) ProtoMessage() {}

func (x *DetailedHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*DetailedHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{54}
}

func (x *DetailedHealthCheckRequest) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *DetailedHealthCheckRequest) GetGID() int32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *DetailedHealthCheckRequest) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DetailedHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthCheckStats *HealthCheckStats `protobuf:"bytes,1,opt,name=HealthCheckStats,proto3" json:"HealthCheckStats,omitempty"`
	UnhealthyReasons []string          `protobuf:"bytes,2,rep,name=unhealthyReasons,proto3" json:"unhealthyReasons,omitempty"`
}

func (x *DetailedHealthCheckResponse) Reset() {
	*x = DetailedHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedHealthCheckResponse) ProtoMessage() {}

func (x *DetailedHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*DetailedHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{55}
}

func (x *DetailedHealthCheckResponse) GetHealthCheckStats() *HealthCheckStats {
	if x != nil {
		return x.HealthCheckStats
	}
	return nil
}

func (x *DetailedHealthCheckResponse) GetUnhealthyReasons() []string {
	if x != nil {
		return x.UnhealthyReasons
	}
	return nil
}

type HealthCheckStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriuVersion    string                   `protobuf:"bytes,1,opt,name=criuVersion,proto3" json:"criuVersion,omitempty"`
	GPUHealthCheck *gpu.HealthCheckResponse `protobuf:"bytes,2,opt,name=GPUHealthCheck,proto3" json:"GPUHealthCheck,omitempty"`
}

func (x *HealthCheckStats) Reset() {
	*x = HealthCheckStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckStats) ProtoMessage() {}

func (x *HealthCheckStats) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckStats.ProtoReflect.Descriptor instead.
func (*HealthCheckStats) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{56}
}

func (x *HealthCheckStats) GetCriuVersion() string {
	if x != nil {
		return x.CriuVersion
	}
	return ""
}

func (x *HealthCheckStats) GetGPUHealthCheck() *gpu.HealthCheckResponse {
	if x != nil {
		return x.GPUHealthCheck
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{57}
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSON string `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{58}
}

func (x *GetConfigResponse) GetJSON() string {
	if x != nil {
		return x.JSON
	}
	return ""
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x1a, 0x09, 0x67, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x03,
	0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x44,
	0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44,
	0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x50, 0x55, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x45, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x75, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x50, 0x55,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x43, 0x52, 0x49, 0x4f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x69, 0x66, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x75, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x22, 0x2d, 0x0a, 0x11, 0x43,
	0x52, 0x49, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x12, 0x43, 0x52,
	0x49, 0x4f, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x44, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x52, 0x49, 0x4f, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x74, 0x22, 0xd7, 0x01, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x45,
	0x6e, 0x76, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x47, 0x50, 0x55, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x49, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49,
	0x44, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44,
	0x69, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x44, 0x75, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x44,
	0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x63,
	0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4e, 0x65, 0x77, 0x50, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4e, 0x65, 0x77, 0x50, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x04, 0x50, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x49, 0x44, 0x73, 0x22, 0x4d, 0x0a,
	0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0c, 0x52,
	0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52,
	0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x52, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x53, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x36, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66,
	0x73, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x22, 0xb8, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x63, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f, 0x70, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x72, 0x69, 0x75, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x47, 0x50, 0x55, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x78,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x44, 0x75, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x73, 0x6d,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x73, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x73, 0x6d,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4c, 0x73, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22,
	0xf1, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4b, 0x33, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4b, 0x33, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x4f, 0x70, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x75, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xca, 0x03, 0x0a, 0x08, 0x52,
	0x75, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x6f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4e, 0x6f,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x4e, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x53, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4e, 0x6f, 0x53, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x65, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x65, 0x74, 0x50, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4e, 0x65, 0x74, 0x50, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x63,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x63, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xe3, 0x01,
	0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x55, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x13, 0x52, 0x75,
	0x6e, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x22, 0x70, 0x0a,
	0x10, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22,
	0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x05, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x4f, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x50, 0x55, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4a,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x43, 0x50, 0x55,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x55, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x49, 0x44, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x47, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xe4, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54,
	0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x3d, 0x0a,
	0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x4e, 0x0a, 0x0f,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x2e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x43, 0x50, 0x55, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x55, 0x73, 0x65, 0x64, 0x22, 0xca, 0x01,
	0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x46, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22,
	0x39, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x54, 0x44, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x46, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x46, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x4c, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x4c, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x52,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x04, 0x55, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x04, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2d, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x42, 0x45, 0x41, 0x54, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x74, 0x64, 0x69, 0x6e, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x74, 0x64, 0x69, 0x6e, 0x22, 0x5f, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x22, 0x7c, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x75, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x75, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x47, 0x50, 0x55, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x67, 0x70, 0x75, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e,
	0x47, 0x50, 0x55, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x12,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x2a, 0x37, 0x0a, 0x08, 0x44,
	0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4b, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x4f, 0x54,
	0x46, 0x53, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x49, 0x4f,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44,
	0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x06, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x10, 0x01, 0x2a, 0x70, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x42, 0x5f, 0x4b,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x49,
	0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x05, 0x2a, 0x5c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x32, 0xc8, 0x11, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1f, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x04, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x64, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64,
	0x44, 0x75, 0x6d, 0x70, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2b, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x76, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f,
	0x6f, 0x74, 0x66, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x2e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73,
	0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7f, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x31, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x08, 0x52, 0x75, 0x6e,
	0x63, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e,
	0x63, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a,
	0x0b, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x09, 0x52, 0x75,
	0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x75, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x67, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x69, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x0e, 0x43, 0x52,
	0x49, 0x4f, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x28, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52, 0x49, 0x4f, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x75,
	0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52,
	0x49, 0x4f, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x61, 0x0a, 0x0d, 0x43, 0x52, 0x49, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x52, 0x49, 0x4f, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x27, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x52, 0x49, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x12, 0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x25, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x27,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x1a, 0x26, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x6e, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12,
	0x7c, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x30, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x08, 0x4b, 0x61, 0x74, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0b, 0x4b, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_task_proto_goTypes = []interface{}{
	(DumpType)(0),                              // 0: cedana.services.task.DumpType
	(ContainerRuntime)(0),                      // 1: cedana.services.task.ContainerRuntime
	(CRType)(0),                                // 2: cedana.services.task.CRType
	(JobState)(0),                              // 3: cedana.services.task.JobState
	(CheckpointState)(0),                       // 4: cedana.services.task.CheckpointState
	(OpenFilesStat_StreamType)(0),              // 5: cedana.services.task.OpenFilesStat.StreamType
	(CheckpointReason_CheckpointReasonEnum)(0), // 6: cedana.services.task.CheckpointReason.CheckpointReasonEnum
	(*DumpStats)(nil),                          // 7: cedana.services.task.DumpStats
	(*CheckpointFileStats)(nil),                // 8: cedana.services.task.CheckpointFileStats
	(*RestoreStats)(nil),                       // 9: cedana.services.task.RestoreStats
	(*CRIOImagePushArgs)(nil),                  // 10: cedana.services.task.CRIOImagePushArgs
	(*CRIOImagePushResp)(nil),                  // 11: cedana.services.task.CRIOImagePushResp
	(*CRIORootfsDumpArgs)(nil),                 // 12: cedana.services.task.CRIORootfsDumpArgs
	(*CRIORootfsDumpResp)(nil),                 // 13: cedana.services.task.CRIORootfsDumpResp
	(*StartArgs)(nil),                          // 14: cedana.services.task.StartArgs
	(*StartResp)(nil),                          // 15: cedana.services.task.StartResp
	(*DumpArgs)(nil),                           // 16: cedana.services.task.DumpArgs
	(*DumpResp)(nil),                           // 17: cedana.services.task.DumpResp
	(*RestoreArgs)(nil),                        // 18: cedana.services.task.RestoreArgs
	(*RestoreResp)(nil),                        // 19: cedana.services.task.RestoreResp
	(*QueryArgs)(nil),                          // 20: cedana.services.task.QueryArgs
	(*QueryResp)(nil),                          // 21: cedana.services.task.QueryResp
	(*ContainerdDumpArgs)(nil),                 // 22: cedana.services.task.ContainerdDumpArgs
	(*ContainerdDumpResp)(nil),                 // 23: cedana.services.task.ContainerdDumpResp
	(*ContainerdRestoreArgs)(nil),              // 24: cedana.services.task.ContainerdRestoreArgs
	(*ContainerdRestoreResp)(nil),              // 25: cedana.services.task.ContainerdRestoreResp
	(*ContainerdQueryArgs)(nil),                // 26: cedana.services.task.ContainerdQueryArgs
	(*ContainerdQueryResp)(nil),                // 27: cedana.services.task.ContainerdQueryResp
	(*ContainerdContainer)(nil),                // 28: cedana.services.task.ContainerdContainer
	(*ContainerdRootfsDumpArgs)(nil),           // 29: cedana.services.task.ContainerdRootfsDumpArgs
	(*ContainerdRootfsDumpResp)(nil),           // 30: cedana.services.task.ContainerdRootfsDumpResp
	(*ContainerdRootfsRestoreArgs)(nil),        // 31: cedana.services.task.ContainerdRootfsRestoreArgs
	(*ContainerdRootfsRestoreResp)(nil),        // 32: cedana.services.task.ContainerdRootfsRestoreResp
	(*RuncDumpArgs)(nil),                       // 33: cedana.services.task.RuncDumpArgs
	(*RuncDumpResp)(nil),                       // 34: cedana.services.task.RuncDumpResp
	(*CriuOpts)(nil),                           // 35: cedana.services.task.CriuOpts
	(*RuncRestoreArgs)(nil),                    // 36: cedana.services.task.RuncRestoreArgs
	(*RuncRestoreResp)(nil),                    // 37: cedana.services.task.RuncRestoreResp
	(*RuncOpts)(nil),                           // 38: cedana.services.task.RuncOpts
	(*RuncQueryArgs)(nil),                      // 39: cedana.services.task.RuncQueryArgs
	(*RuncQueryResp)(nil),                      // 40: cedana.services.task.RuncQueryResp
	(*RuncContainer)(nil),                      // 41: cedana.services.task.RuncContainer
	(*RuncGetPausePidArgs)(nil),                // 42: cedana.services.task.RuncGetPausePidArgs
	(*RuncGetPausePidResp)(nil),                // 43: cedana.services.task.RuncGetPausePidResp
	(*LogStreamingArgs)(nil),                   // 44: cedana.services.task.LogStreamingArgs
	(*LogStreamingResp)(nil),                   // 45: cedana.services.task.LogStreamingResp
	(*ProcessState)(nil),                       // 46: cedana.services.task.ProcessState
	(*RemoteState)(nil),                        // 47: cedana.services.task.RemoteState
	(*ProcessInfo)(nil),                        // 48: cedana.services.task.ProcessInfo
	(*HostInfo)(nil),                           // 49: cedana.services.task.HostInfo
	(*CPUInfo)(nil),                            // 50: cedana.services.task.CPUInfo
	(*MemoryInfo)(nil),                         // 51: cedana.services.task.MemoryInfo
	(*OpenFilesStat)(nil),                      // 52: cedana.services.task.OpenFilesStat
	(*ConnectionStat)(nil),                     // 53: cedana.services.task.ConnectionStat
	(*Addr)(nil),                               // 54: cedana.services.task.Addr
	(*ProcessStateStreamingArgs)(nil),          // 55: cedana.services.task.ProcessStateStreamingArgs
	(*CheckpointReason)(nil),                   // 56: cedana.services.task.CheckpointReason
	(*StartAttachArgs)(nil),                    // 57: cedana.services.task.StartAttachArgs
	(*StartAttachResp)(nil),                    // 58: cedana.services.task.StartAttachResp
	(*RestoreAttachArgs)(nil),                  // 59: cedana.services.task.RestoreAttachArgs
	(*RestoreAttachResp)(nil),                  // 60: cedana.services.task.RestoreAttachResp
	(*DetailedHealthCheckRequest)(nil),         // 61: cedana.services.task.DetailedHealthCheckRequest
	(*DetailedHealthCheckResponse)(nil),        // 62: cedana.services.task.DetailedHealthCheckResponse
	(*HealthCheckStats)(nil),                   // 63: cedana.services.task.HealthCheckStats
	(*GetConfigRequest)(nil),                   // 64: cedana.services.task.GetConfigRequest
	(*GetConfigResponse)(nil),                  // 65: cedana.services.task.GetConfigResponse
	(*gpu.GPURestoreStats)(nil),                // 66: cedanagpu.GPURestoreStats
	(*gpu.HealthCheckResponse)(nil),            // 67: cedanagpu.HealthCheckResponse
}
var file_task_proto_depIdxs = []int32{
	0,  // 0: cedana.services.task.DumpStats.DumpType:type_name -> cedana.services.task.DumpType
	1,  // 1: cedana.services.task.DumpStats.ContainerRuntime:type_name -> cedana.services.task.ContainerRuntime
	8,  // 2: cedana.services.task.DumpStats.CheckpointFileStats:type_name -> cedana.services.task.CheckpointFileStats
	0,  // 3: cedana.services.task.RestoreStats.DumpType:type_name -> cedana.services.task.DumpType
	1,  // 4: cedana.services.task.RestoreStats.ContainerRuntime:type_name -> cedana.services.task.ContainerRuntime
	8,  // 5: cedana.services.task.RestoreStats.CheckpointFileStats:type_name -> cedana.services.task.CheckpointFileStats
	66, // 6: cedana.services.task.RestoreStats.GPURestoreStats:type_name -> cedanagpu.GPURestoreStats
	2,  // 7: cedana.services.task.DumpArgs.Type:type_name -> cedana.services.task.CRType
	46, // 8: cedana.services.task.DumpResp.State:type_name -> cedana.services.task.ProcessState
	7,  // 9: cedana.services.task.DumpResp.DumpStats:type_name -> cedana.services.task.DumpStats
	2,  // 10: cedana.services.task.RestoreArgs.Type:type_name -> cedana.services.task.CRType
	46, // 11: cedana.services.task.RestoreResp.State:type_name -> cedana.services.task.ProcessState
	9,  // 12: cedana.services.task.RestoreResp.RestoreStats:type_name -> cedana.services.task.RestoreStats
	46, // 13: cedana.services.task.QueryResp.Processes:type_name -> cedana.services.task.ProcessState
	33, // 14: cedana.services.task.ContainerdDumpArgs.RuncDumpArgs:type_name -> cedana.services.task.RuncDumpArgs
	29, // 15: cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs:type_name -> cedana.services.task.ContainerdRootfsDumpArgs
	28, // 16: cedana.services.task.ContainerdQueryResp.Containers:type_name -> cedana.services.task.ContainerdContainer
	35, // 17: cedana.services.task.RuncDumpArgs.CriuOpts:type_name -> cedana.services.task.CriuOpts
	2,  // 18: cedana.services.task.RuncDumpArgs.Type:type_name -> cedana.services.task.CRType
	46, // 19: cedana.services.task.RuncDumpArgs.state:type_name -> cedana.services.task.ProcessState
	46, // 20: cedana.services.task.RuncDumpResp.State:type_name -> cedana.services.task.ProcessState
	38, // 21: cedana.services.task.RuncRestoreArgs.Opts:type_name -> cedana.services.task.RuncOpts
	2,  // 22: cedana.services.task.RuncRestoreArgs.Type:type_name -> cedana.services.task.CRType
	46, // 23: cedana.services.task.RuncRestoreResp.State:type_name -> cedana.services.task.ProcessState
	41, // 24: cedana.services.task.RuncQueryResp.Containers:type_name -> cedana.services.task.RuncContainer
	48, // 25: cedana.services.task.ProcessState.ProcessInfo:type_name -> cedana.services.task.ProcessInfo
	4,  // 26: cedana.services.task.ProcessState.CheckpointState:type_name -> cedana.services.task.CheckpointState
	3,  // 27: cedana.services.task.ProcessState.JobState:type_name -> cedana.services.task.JobState
	47, // 28: cedana.services.task.ProcessState.RemoteState:type_name -> cedana.services.task.RemoteState
	49, // 29: cedana.services.task.ProcessState.HostInfo:type_name -> cedana.services.task.HostInfo
	50, // 30: cedana.services.task.ProcessState.CPUInfo:type_name -> cedana.services.task.CPUInfo
	51, // 31: cedana.services.task.ProcessState.MemoryInfo:type_name -> cedana.services.task.MemoryInfo
	52, // 32: cedana.services.task.ProcessInfo.OpenFds:type_name -> cedana.services.task.OpenFilesStat
	53, // 33: cedana.services.task.ProcessInfo.OpenConnections:type_name -> cedana.services.task.ConnectionStat
	5,  // 34: cedana.services.task.OpenFilesStat.Stream:type_name -> cedana.services.task.OpenFilesStat.StreamType
	54, // 35: cedana.services.task.ConnectionStat.Laddr:type_name -> cedana.services.task.Addr
	54, // 36: cedana.services.task.ConnectionStat.Raddr:type_name -> cedana.services.task.Addr
	6,  // 37: cedana.services.task.CheckpointReason.Reason:type_name -> cedana.services.task.CheckpointReason.CheckpointReasonEnum
	14, // 38: cedana.services.task.StartAttachArgs.Args:type_name -> cedana.services.task.StartArgs
	18, // 39: cedana.services.task.RestoreAttachArgs.Args:type_name -> cedana.services.task.RestoreArgs
	63, // 40: cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats:type_name -> cedana.services.task.HealthCheckStats
	67, // 41: cedana.services.task.HealthCheckStats.GPUHealthCheck:type_name -> cedanagpu.HealthCheckResponse
	14, // 42: cedana.services.task.TaskService.Start:input_type -> cedana.services.task.StartArgs
	16, // 43: cedana.services.task.TaskService.Dump:input_type -> cedana.services.task.DumpArgs
	18, // 44: cedana.services.task.TaskService.Restore:input_type -> cedana.services.task.RestoreArgs
	20, // 45: cedana.services.task.TaskService.Query:input_type -> cedana.services.task.QueryArgs
	22, // 46: cedana.services.task.TaskService.ContainerdDump:input_type -> cedana.services.task.ContainerdDumpArgs
	24, // 47: cedana.services.task.TaskService.ContainerdRestore:input_type -> cedana.services.task.ContainerdRestoreArgs
	26, // 48: cedana.services.task.TaskService.ContainerdQuery:input_type -> cedana.services.task.ContainerdQueryArgs
	29, // 49: cedana.services.task.TaskService.ContainerdRootfsDump:input_type -> cedana.services.task.ContainerdRootfsDumpArgs
	31, // 50: cedana.services.task.TaskService.ContainerdRootfsRestore:input_type -> cedana.services.task.ContainerdRootfsRestoreArgs
	33, // 51: cedana.services.task.TaskService.RuncDump:input_type -> cedana.services.task.RuncDumpArgs
	36, // 52: cedana.services.task.TaskService.RuncRestore:input_type -> cedana.services.task.RuncRestoreArgs
	39, // 53: cedana.services.task.TaskService.RuncQuery:input_type -> cedana.services.task.RuncQueryArgs
	42, // 54: cedana.services.task.TaskService.RuncGetPausePid:input_type -> cedana.services.task.RuncGetPausePidArgs
	12, // 55: cedana.services.task.TaskService.CRIORootfsDump:input_type -> cedana.services.task.CRIORootfsDumpArgs
	10, // 56: cedana.services.task.TaskService.CRIOImagePush:input_type -> cedana.services.task.CRIOImagePushArgs
	57, // 57: cedana.services.task.TaskService.StartAttach:input_type -> cedana.services.task.StartAttachArgs
	59, // 58: cedana.services.task.TaskService.RestoreAttach:input_type -> cedana.services.task.RestoreAttachArgs
	45, // 59: cedana.services.task.TaskService.LogStreaming:input_type -> cedana.services.task.LogStreamingResp
	55, // 60: cedana.services.task.TaskService.ProcessStateStreaming:input_type -> cedana.services.task.ProcessStateStreamingArgs
	61, // 61: cedana.services.task.TaskService.DetailedHealthCheck:input_type -> cedana.services.task.DetailedHealthCheckRequest
	16, // 62: cedana.services.task.TaskService.KataDump:input_type -> cedana.services.task.DumpArgs
	18, // 63: cedana.services.task.TaskService.KataRestore:input_type -> cedana.services.task.RestoreArgs
	64, // 64: cedana.services.task.TaskService.GetConfig:input_type -> cedana.services.task.GetConfigRequest
	15, // 65: cedana.services.task.TaskService.Start:output_type -> cedana.services.task.StartResp
	17, // 66: cedana.services.task.TaskService.Dump:output_type -> cedana.services.task.DumpResp
	19, // 67: cedana.services.task.TaskService.Restore:output_type -> cedana.services.task.RestoreResp
	21, // 68: cedana.services.task.TaskService.Query:output_type -> cedana.services.task.QueryResp
	23, // 69: cedana.services.task.TaskService.ContainerdDump:output_type -> cedana.services.task.ContainerdDumpResp
	25, // 70: cedana.services.task.TaskService.ContainerdRestore:output_type -> cedana.services.task.ContainerdRestoreResp
	27, // 71: cedana.services.task.TaskService.ContainerdQuery:output_type -> cedana.services.task.ContainerdQueryResp
	30, // 72: cedana.services.task.TaskService.ContainerdRootfsDump:output_type -> cedana.services.task.ContainerdRootfsDumpResp
	32, // 73: cedana.services.task.TaskService.ContainerdRootfsRestore:output_type -> cedana.services.task.ContainerdRootfsRestoreResp
	34, // 74: cedana.services.task.TaskService.RuncDump:output_type -> cedana.services.task.RuncDumpResp
	37, // 75: cedana.services.task.TaskService.RuncRestore:output_type -> cedana.services.task.RuncRestoreResp
	40, // 76: cedana.services.task.TaskService.RuncQuery:output_type -> cedana.services.task.RuncQueryResp
	43, // 77: cedana.services.task.TaskService.RuncGetPausePid:output_type -> cedana.services.task.RuncGetPausePidResp
	13, // 78: cedana.services.task.TaskService.CRIORootfsDump:output_type -> cedana.services.task.CRIORootfsDumpResp
	11, // 79: cedana.services.task.TaskService.CRIOImagePush:output_type -> cedana.services.task.CRIOImagePushResp
	58, // 80: cedana.services.task.TaskService.StartAttach:output_type -> cedana.services.task.StartAttachResp
	60, // 81: cedana.services.task.TaskService.RestoreAttach:output_type -> cedana.services.task.RestoreAttachResp
	44, // 82: cedana.services.task.TaskService.LogStreaming:output_type -> cedana.services.task.LogStreamingArgs
	46, // 83: cedana.services.task.TaskService.ProcessStateStreaming:output_type -> cedana.services.task.ProcessState
	62, // 84: cedana.services.task.TaskService.DetailedHealthCheck:output_type -> cedana.services.task.DetailedHealthCheckResponse
	17, // 85: cedana.services.task.TaskService.KataDump:output_type -> cedana.services.task.DumpResp
	19, // 86: cedana.services.task.TaskService.KataRestore:output_type -> cedana.services.task.RestoreResp
	65, // 87: cedana.services.task.TaskService.GetConfig:output_type -> cedana.services.task.GetConfigResponse
	65, // [65:88] is the sub-list for method output_type
	42, // [42:65] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointFileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRIOImagePushArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRIOImagePushResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRIORootfsDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRIORootfsDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdQueryArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRootfsDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRootfsDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRootfsRestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRootfsRestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriuOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncRestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncRestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncQueryArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncGetPausePidArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncGetPausePidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStreamingArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStreamingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFilesStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStateStreamingArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAttachArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAttachResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreAttachArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreAttachResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		EnumInfos:         file_task_proto_enumTypes,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}

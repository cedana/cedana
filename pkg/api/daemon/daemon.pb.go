// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: daemon.proto

package daemon

import (
	runc "github.com/cedana/cedana/pkg/api/plugins/runc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DumpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir     string       `protobuf:"bytes,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Stream  bool         `protobuf:"varint,2,opt,name=Stream,proto3" json:"Stream,omitempty"`
	Details *DumpDetails `protobuf:"bytes,3,opt,name=Details,proto3" json:"Details,omitempty"`
}

func (x *DumpReq) Reset() {
	*x = DumpReq{}
	mi := &file_daemon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpReq) ProtoMessage() {}

func (x *DumpReq) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpReq.ProtoReflect.Descriptor instead.
func (*DumpReq) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *DumpReq) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DumpReq) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *DumpReq) GetDetails() *DumpDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type DumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Path    string        `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	State   *ProcessState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *DumpResp) Reset() {
	*x = DumpResp{}
	mi := &file_daemon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpResp) ProtoMessage() {}

func (x *DumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpResp.ProtoReflect.Descriptor instead.
func (*DumpResp) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *DumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DumpResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DumpResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

type DumpDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Criu *CriuOpts `protobuf:"bytes,2,opt,name=Criu,proto3" json:"Criu,omitempty"`
	// Types that are assignable to Opts:
	//
	//	*DumpDetails_PID
	//	*DumpDetails_JID
	//	*DumpDetails_Runc
	Opts isDumpDetails_Opts `protobuf_oneof:"Opts"`
}

func (x *DumpDetails) Reset() {
	*x = DumpDetails{}
	mi := &file_daemon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpDetails) ProtoMessage() {}

func (x *DumpDetails) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpDetails.ProtoReflect.Descriptor instead.
func (*DumpDetails) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *DumpDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DumpDetails) GetCriu() *CriuOpts {
	if x != nil {
		return x.Criu
	}
	return nil
}

func (m *DumpDetails) GetOpts() isDumpDetails_Opts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (x *DumpDetails) GetPID() uint32 {
	if x, ok := x.GetOpts().(*DumpDetails_PID); ok {
		return x.PID
	}
	return 0
}

func (x *DumpDetails) GetJID() string {
	if x, ok := x.GetOpts().(*DumpDetails_JID); ok {
		return x.JID
	}
	return ""
}

func (x *DumpDetails) GetRunc() *runc.DumpOpts {
	if x, ok := x.GetOpts().(*DumpDetails_Runc); ok {
		return x.Runc
	}
	return nil
}

type isDumpDetails_Opts interface {
	isDumpDetails_Opts()
}

type DumpDetails_PID struct {
	PID uint32 `protobuf:"varint,3,opt,name=PID,proto3,oneof"`
}

type DumpDetails_JID struct {
	JID string `protobuf:"bytes,4,opt,name=JID,proto3,oneof"`
}

type DumpDetails_Runc struct {
	// Plugin-specific dump options:
	Runc *runc.DumpOpts `protobuf:"bytes,5,opt,name=Runc,proto3,oneof"`
}

func (*DumpDetails_PID) isDumpDetails_Opts() {}

func (*DumpDetails_JID) isDumpDetails_Opts() {}

func (*DumpDetails_Runc) isDumpDetails_Opts() {}

type RestoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string          `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Stream  bool            `protobuf:"varint,2,opt,name=Stream,proto3" json:"Stream,omitempty"`
	Details *RestoreDetails `protobuf:"bytes,3,opt,name=Details,proto3" json:"Details,omitempty"`
}

func (x *RestoreReq) Reset() {
	*x = RestoreReq{}
	mi := &file_daemon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreReq) ProtoMessage() {}

func (x *RestoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreReq.ProtoReflect.Descriptor instead.
func (*RestoreReq) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{3}
}

func (x *RestoreReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RestoreReq) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *RestoreReq) GetDetails() *RestoreDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	PID     uint32        `protobuf:"varint,2,opt,name=PID,proto3" json:"PID,omitempty"`
	State   *ProcessState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *RestoreResp) Reset() {
	*x = RestoreResp{}
	mi := &file_daemon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResp) ProtoMessage() {}

func (x *RestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResp.ProtoReflect.Descriptor instead.
func (*RestoreResp) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{4}
}

func (x *RestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RestoreResp) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *RestoreResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

type RestoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Criu *CriuOpts `protobuf:"bytes,2,opt,name=Criu,proto3" json:"Criu,omitempty"`
	// Types that are assignable to Opts:
	//
	//	*RestoreDetails_JID
	//	*RestoreDetails_Runc
	Opts isRestoreDetails_Opts `protobuf_oneof:"Opts"`
}

func (x *RestoreDetails) Reset() {
	*x = RestoreDetails{}
	mi := &file_daemon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreDetails) ProtoMessage() {}

func (x *RestoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreDetails.ProtoReflect.Descriptor instead.
func (*RestoreDetails) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{5}
}

func (x *RestoreDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RestoreDetails) GetCriu() *CriuOpts {
	if x != nil {
		return x.Criu
	}
	return nil
}

func (m *RestoreDetails) GetOpts() isRestoreDetails_Opts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (x *RestoreDetails) GetJID() string {
	if x, ok := x.GetOpts().(*RestoreDetails_JID); ok {
		return x.JID
	}
	return ""
}

func (x *RestoreDetails) GetRunc() *runc.RestoreOpts {
	if x, ok := x.GetOpts().(*RestoreDetails_Runc); ok {
		return x.Runc
	}
	return nil
}

type isRestoreDetails_Opts interface {
	isRestoreDetails_Opts()
}

type RestoreDetails_JID struct {
	JID string `protobuf:"bytes,3,opt,name=JID,proto3,oneof"`
}

type RestoreDetails_Runc struct {
	// Plugin-specific restore options:
	Runc *runc.RestoreOpts `protobuf:"bytes,4,opt,name=Runc,proto3,oneof"`
}

func (*RestoreDetails_JID) isRestoreDetails_Opts() {}

func (*RestoreDetails_Runc) isRestoreDetails_Opts() {}

// XXX YA: Find a way to re-use CRIU's rpc.proto
type CriuOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImagesDir       string       `protobuf:"bytes,1,opt,name=ImagesDir,proto3" json:"ImagesDir,omitempty"`
	ImagesDirFd     int32        `protobuf:"varint,2,opt,name=ImagesDirFd,proto3" json:"ImagesDirFd,omitempty"`
	WorkDirFd       int32        `protobuf:"varint,3,opt,name=WorkDirFd,proto3" json:"WorkDirFd,omitempty"`
	ParentImg       string       `protobuf:"bytes,4,opt,name=ParentImg,proto3" json:"ParentImg,omitempty"`
	LeaveRunning    bool         `protobuf:"varint,5,opt,name=LeaveRunning,proto3" json:"LeaveRunning,omitempty"`
	External        []string     `protobuf:"bytes,6,rep,name=External,proto3" json:"External,omitempty"`
	ExtUnixSk       bool         `protobuf:"varint,7,opt,name=ExtUnixSk,proto3" json:"ExtUnixSk,omitempty"`
	ShellJob        bool         `protobuf:"varint,8,opt,name=ShellJob,proto3" json:"ShellJob,omitempty"`
	FileLocks       bool         `protobuf:"varint,9,opt,name=FileLocks,proto3" json:"FileLocks,omitempty"`
	PreDump         bool         `protobuf:"varint,10,opt,name=PreDump,proto3" json:"PreDump,omitempty"`
	Stream          bool         `protobuf:"varint,11,opt,name=Stream,proto3" json:"Stream,omitempty"`
	EmptyNs         uint32       `protobuf:"varint,12,opt,name=EmptyNs,proto3" json:"EmptyNs,omitempty"`
	AutoDedup       bool         `protobuf:"varint,13,opt,name=AutoDedup,proto3" json:"AutoDedup,omitempty"`
	LazyPages       bool         `protobuf:"varint,14,opt,name=LazyPages,proto3" json:"LazyPages,omitempty"`
	StatusFd        int32        `protobuf:"varint,15,opt,name=StatusFd,proto3" json:"StatusFd,omitempty"`
	LsmProfile      string       `protobuf:"bytes,16,opt,name=LsmProfile,proto3" json:"LsmProfile,omitempty"`
	LsmMountContext string       `protobuf:"bytes,17,opt,name=LsmMountContext,proto3" json:"LsmMountContext,omitempty"`
	TcpEstablished  bool         `protobuf:"varint,18,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	TcpClose        bool         `protobuf:"varint,19,opt,name=TcpClose,proto3" json:"TcpClose,omitempty"`
	InheritFd       []*InheritFd `protobuf:"bytes,20,rep,name=InheritFd,proto3" json:"InheritFd,omitempty"`
}

func (x *CriuOpts) Reset() {
	*x = CriuOpts{}
	mi := &file_daemon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CriuOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriuOpts) ProtoMessage() {}

func (x *CriuOpts) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriuOpts.ProtoReflect.Descriptor instead.
func (*CriuOpts) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{6}
}

func (x *CriuOpts) GetImagesDir() string {
	if x != nil {
		return x.ImagesDir
	}
	return ""
}

func (x *CriuOpts) GetImagesDirFd() int32 {
	if x != nil {
		return x.ImagesDirFd
	}
	return 0
}

func (x *CriuOpts) GetWorkDirFd() int32 {
	if x != nil {
		return x.WorkDirFd
	}
	return 0
}

func (x *CriuOpts) GetParentImg() string {
	if x != nil {
		return x.ParentImg
	}
	return ""
}

func (x *CriuOpts) GetLeaveRunning() bool {
	if x != nil {
		return x.LeaveRunning
	}
	return false
}

func (x *CriuOpts) GetExternal() []string {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *CriuOpts) GetExtUnixSk() bool {
	if x != nil {
		return x.ExtUnixSk
	}
	return false
}

func (x *CriuOpts) GetShellJob() bool {
	if x != nil {
		return x.ShellJob
	}
	return false
}

func (x *CriuOpts) GetFileLocks() bool {
	if x != nil {
		return x.FileLocks
	}
	return false
}

func (x *CriuOpts) GetPreDump() bool {
	if x != nil {
		return x.PreDump
	}
	return false
}

func (x *CriuOpts) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CriuOpts) GetEmptyNs() uint32 {
	if x != nil {
		return x.EmptyNs
	}
	return 0
}

func (x *CriuOpts) GetAutoDedup() bool {
	if x != nil {
		return x.AutoDedup
	}
	return false
}

func (x *CriuOpts) GetLazyPages() bool {
	if x != nil {
		return x.LazyPages
	}
	return false
}

func (x *CriuOpts) GetStatusFd() int32 {
	if x != nil {
		return x.StatusFd
	}
	return 0
}

func (x *CriuOpts) GetLsmProfile() string {
	if x != nil {
		return x.LsmProfile
	}
	return ""
}

func (x *CriuOpts) GetLsmMountContext() string {
	if x != nil {
		return x.LsmMountContext
	}
	return ""
}

func (x *CriuOpts) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *CriuOpts) GetTcpClose() bool {
	if x != nil {
		return x.TcpClose
	}
	return false
}

func (x *CriuOpts) GetInheritFd() []*InheritFd {
	if x != nil {
		return x.InheritFd
	}
	return nil
}

type InheritFd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Fd  int32  `protobuf:"varint,2,opt,name=Fd,proto3" json:"Fd,omitempty"`
}

func (x *InheritFd) Reset() {
	*x = InheritFd{}
	mi := &file_daemon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InheritFd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritFd) ProtoMessage() {}

func (x *InheritFd) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritFd.ProtoReflect.Descriptor instead.
func (*InheritFd) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{7}
}

func (x *InheritFd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InheritFd) GetFd() int32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID            string        `protobuf:"bytes,1,opt,name=JID,proto3" json:"JID,omitempty"`
	Type           string        `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Process        *ProcessState `protobuf:"bytes,3,opt,name=Process,proto3" json:"Process,omitempty"`
	ExitCode       int32         `protobuf:"varint,4,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	CheckpointPath string        `protobuf:"bytes,5,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	GPU            bool          `protobuf:"varint,6,opt,name=GPU,proto3" json:"GPU,omitempty"`
	// Types that are assignable to Details:
	//
	//	*Job_Runc
	Details isJob_Details `protobuf_oneof:"Details"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_daemon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{8}
}

func (x *Job) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *Job) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Job) GetProcess() *ProcessState {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Job) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Job) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *Job) GetGPU() bool {
	if x != nil {
		return x.GPU
	}
	return false
}

func (m *Job) GetDetails() isJob_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Job) GetRunc() *runc.Job {
	if x, ok := x.GetDetails().(*Job_Runc); ok {
		return x.Runc
	}
	return nil
}

type isJob_Details interface {
	isJob_Details()
}

type Job_Runc struct {
	// Plugin-specific job details:
	Runc *runc.Job `protobuf:"bytes,7,opt,name=Runc,proto3,oneof"`
}

func (*Job_Runc) isJob_Details() {}

type ProcessState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID        uint32       `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Task       string       `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty"`
	StartedAt  string       `protobuf:"bytes,3,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	Info       *ProcessInfo `protobuf:"bytes,4,opt,name=Info,proto3" json:"Info,omitempty"`
	HostInfo   *HostInfo    `protobuf:"bytes,5,opt,name=HostInfo,proto3" json:"HostInfo,omitempty"`
	CPUInfo    *CPUInfo     `protobuf:"bytes,6,opt,name=CPUInfo,proto3" json:"CPUInfo,omitempty"`
	MemoryInfo *MemoryInfo  `protobuf:"bytes,7,opt,name=MemoryInfo,proto3" json:"MemoryInfo,omitempty"`
	UIDs       []uint32     `protobuf:"varint,8,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	GIDs       []uint32     `protobuf:"varint,9,rep,packed,name=GIDs,proto3" json:"GIDs,omitempty"`
	Groups     []uint32     `protobuf:"varint,10,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *ProcessState) Reset() {
	*x = ProcessState{}
	mi := &file_daemon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessState) ProtoMessage() {}

func (x *ProcessState) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessState.ProtoReflect.Descriptor instead.
func (*ProcessState) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessState) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessState) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ProcessState) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ProcessState) GetInfo() *ProcessInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ProcessState) GetHostInfo() *HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *ProcessState) GetCPUInfo() *CPUInfo {
	if x != nil {
		return x.CPUInfo
	}
	return nil
}

func (x *ProcessState) GetMemoryInfo() *MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

func (x *ProcessState) GetUIDs() []uint32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ProcessState) GetGIDs() []uint32 {
	if x != nil {
		return x.GIDs
	}
	return nil
}

func (x *ProcessState) GetGroups() []uint32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID                     uint32            `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	AttachedToHardwareAccel bool              `protobuf:"varint,2,opt,name=AttachedToHardwareAccel,proto3" json:"AttachedToHardwareAccel,omitempty"`
	OpenFiles               []*OpenFilesStat  `protobuf:"bytes,3,rep,name=OpenFiles,proto3" json:"OpenFiles,omitempty"`
	WorkingDir              string            `protobuf:"bytes,4,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	OpenConnections         []*ConnectionStat `protobuf:"bytes,5,rep,name=OpenConnections,proto3" json:"OpenConnections,omitempty"`
	MemoryPercent           float32           `protobuf:"fixed32,6,opt,name=MemoryPercent,proto3" json:"MemoryPercent,omitempty"`
	IsRunning               bool              `protobuf:"varint,7,opt,name=IsRunning,proto3" json:"IsRunning,omitempty"`
	Status                  string            `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	mi := &file_daemon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessInfo) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessInfo) GetAttachedToHardwareAccel() bool {
	if x != nil {
		return x.AttachedToHardwareAccel
	}
	return false
}

func (x *ProcessInfo) GetOpenFiles() []*OpenFilesStat {
	if x != nil {
		return x.OpenFiles
	}
	return nil
}

func (x *ProcessInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ProcessInfo) GetOpenConnections() []*ConnectionStat {
	if x != nil {
		return x.OpenConnections
	}
	return nil
}

func (x *ProcessInfo) GetMemoryPercent() float32 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *ProcessInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *ProcessInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostID               string `protobuf:"bytes,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	Hostname             string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	OS                   string `protobuf:"bytes,3,opt,name=OS,proto3" json:"OS,omitempty"`
	Platform             string `protobuf:"bytes,4,opt,name=Platform,proto3" json:"Platform,omitempty"`
	KernelVersion        string `protobuf:"bytes,5,opt,name=KernelVersion,proto3" json:"KernelVersion,omitempty"`
	KernelArch           string `protobuf:"bytes,6,opt,name=KernelArch,proto3" json:"KernelArch,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,7,opt,name=VirtualizationSystem,proto3" json:"VirtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,8,opt,name=VirtualizationRole,proto3" json:"VirtualizationRole,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	mi := &file_daemon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{11}
}

func (x *HostInfo) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *HostInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HostInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *HostInfo) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *HostInfo) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *HostInfo) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	CPU        int32  `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	VendorID   string `protobuf:"bytes,3,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Family     string `protobuf:"bytes,4,opt,name=Family,proto3" json:"Family,omitempty"`
	PhysicalID string `protobuf:"bytes,5,opt,name=PhysicalID,proto3" json:"PhysicalID,omitempty"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	mi := &file_daemon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{12}
}

func (x *CPUInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CPUInfo) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *CPUInfo) GetVendorID() string {
	if x != nil {
		return x.VendorID
	}
	return ""
}

func (x *CPUInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *CPUInfo) GetPhysicalID() string {
	if x != nil {
		return x.PhysicalID
	}
	return ""
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Available uint64 `protobuf:"varint,2,opt,name=Available,proto3" json:"Available,omitempty"`
	Used      uint64 `protobuf:"varint,3,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	mi := &file_daemon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{13}
}

func (x *MemoryInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryInfo) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *MemoryInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type OpenFilesStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Fd   uint64 `protobuf:"varint,2,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Mode string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *OpenFilesStat) Reset() {
	*x = OpenFilesStat{}
	mi := &file_daemon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenFilesStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFilesStat) ProtoMessage() {}

func (x *OpenFilesStat) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFilesStat.ProtoReflect.Descriptor instead.
func (*OpenFilesStat) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{14}
}

func (x *OpenFilesStat) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenFilesStat) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *OpenFilesStat) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type ConnectionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint32  `protobuf:"varint,1,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Family uint32  `protobuf:"varint,2,opt,name=Family,proto3" json:"Family,omitempty"`
	Type   uint32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Laddr  *Addr   `protobuf:"bytes,4,opt,name=Laddr,proto3" json:"Laddr,omitempty"`
	Raddr  *Addr   `protobuf:"bytes,5,opt,name=Raddr,proto3" json:"Raddr,omitempty"`
	Status string  `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	UIDs   []int32 `protobuf:"varint,7,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	PID    uint32  `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *ConnectionStat) Reset() {
	*x = ConnectionStat{}
	mi := &file_daemon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStat) ProtoMessage() {}

func (x *ConnectionStat) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStat.ProtoReflect.Descriptor instead.
func (*ConnectionStat) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectionStat) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *ConnectionStat) GetFamily() uint32 {
	if x != nil {
		return x.Family
	}
	return 0
}

func (x *ConnectionStat) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConnectionStat) GetLaddr() *Addr {
	if x != nil {
		return x.Laddr
	}
	return nil
}

func (x *ConnectionStat) GetRaddr() *Addr {
	if x != nil {
		return x.Raddr
	}
	return nil
}

func (x *ConnectionStat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConnectionStat) GetUIDs() []int32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ConnectionStat) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	mi := &file_daemon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_daemon_proto_rawDescGZIP(), []int{16}
}

func (x *Addr) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Addr) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_daemon_proto protoreflect.FileDescriptor

var file_daemon_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x1a, 0x12, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x69, 0x0a, 0x07, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x08,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x44, 0x75,
	0x6d, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x43, 0x72, 0x69, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x69, 0x75,
	0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x43, 0x72, 0x69, 0x75, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x4a,
	0x49, 0x44, 0x12, 0x33, 0x0a, 0x04, 0x52, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x4f, 0x70, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x52, 0x75, 0x6e, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x22,
	0x71, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x6c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x31, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x72, 0x69, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x69, 0x75, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04,
	0x43, 0x72, 0x69, 0x75, 0x12, 0x12, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x04, 0x52, 0x75, 0x6e, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04, 0x52, 0x75, 0x6e, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x22, 0x88, 0x05, 0x0a, 0x08, 0x43, 0x72, 0x69,
	0x75, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x44,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72,
	0x46, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x44, 0x69, 0x72, 0x46, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72,
	0x46, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69,
	0x72, 0x46, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x45, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x44, 0x75, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x44,
	0x75, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x64,
	0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65,
	0x64, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4c, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x73, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x73, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x54, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x64, 0x52, 0x09, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x46, 0x64, 0x22, 0x2d, 0x0a, 0x09, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x46, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x47,
	0x50, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x2e, 0x0a,
	0x04, 0x52, 0x75, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x52, 0x75, 0x6e, 0x63, 0x42, 0x09, 0x0a,
	0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x50, 0x55,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x55,
	0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x47, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0xda, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x02, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x4f, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x55, 0x73, 0x65,
	0x64, 0x22, 0x47, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x46, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x46, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x46, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x4c, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x4c,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x55, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22, 0x2a, 0x0a,
	0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x32, 0x87, 0x01, 0x0a, 0x06, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x16, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_proto_rawDescOnce sync.Once
	file_daemon_proto_rawDescData = file_daemon_proto_rawDesc
)

func file_daemon_proto_rawDescGZIP() []byte {
	file_daemon_proto_rawDescOnce.Do(func() {
		file_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_proto_rawDescData)
	})
	return file_daemon_proto_rawDescData
}

var file_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_daemon_proto_goTypes = []any{
	(*DumpReq)(nil),          // 0: cedana.daemon.DumpReq
	(*DumpResp)(nil),         // 1: cedana.daemon.DumpResp
	(*DumpDetails)(nil),      // 2: cedana.daemon.DumpDetails
	(*RestoreReq)(nil),       // 3: cedana.daemon.RestoreReq
	(*RestoreResp)(nil),      // 4: cedana.daemon.RestoreResp
	(*RestoreDetails)(nil),   // 5: cedana.daemon.RestoreDetails
	(*CriuOpts)(nil),         // 6: cedana.daemon.CriuOpts
	(*InheritFd)(nil),        // 7: cedana.daemon.InheritFd
	(*Job)(nil),              // 8: cedana.daemon.Job
	(*ProcessState)(nil),     // 9: cedana.daemon.ProcessState
	(*ProcessInfo)(nil),      // 10: cedana.daemon.ProcessInfo
	(*HostInfo)(nil),         // 11: cedana.daemon.HostInfo
	(*CPUInfo)(nil),          // 12: cedana.daemon.CPUInfo
	(*MemoryInfo)(nil),       // 13: cedana.daemon.MemoryInfo
	(*OpenFilesStat)(nil),    // 14: cedana.daemon.OpenFilesStat
	(*ConnectionStat)(nil),   // 15: cedana.daemon.ConnectionStat
	(*Addr)(nil),             // 16: cedana.daemon.Addr
	(*runc.DumpOpts)(nil),    // 17: cedana.plugins.runc.DumpOpts
	(*runc.RestoreOpts)(nil), // 18: cedana.plugins.runc.RestoreOpts
	(*runc.Job)(nil),         // 19: cedana.plugins.runc.Job
}
var file_daemon_proto_depIdxs = []int32{
	2,  // 0: cedana.daemon.DumpReq.Details:type_name -> cedana.daemon.DumpDetails
	9,  // 1: cedana.daemon.DumpResp.State:type_name -> cedana.daemon.ProcessState
	6,  // 2: cedana.daemon.DumpDetails.Criu:type_name -> cedana.daemon.CriuOpts
	17, // 3: cedana.daemon.DumpDetails.Runc:type_name -> cedana.plugins.runc.DumpOpts
	5,  // 4: cedana.daemon.RestoreReq.Details:type_name -> cedana.daemon.RestoreDetails
	9,  // 5: cedana.daemon.RestoreResp.State:type_name -> cedana.daemon.ProcessState
	6,  // 6: cedana.daemon.RestoreDetails.Criu:type_name -> cedana.daemon.CriuOpts
	18, // 7: cedana.daemon.RestoreDetails.Runc:type_name -> cedana.plugins.runc.RestoreOpts
	7,  // 8: cedana.daemon.CriuOpts.InheritFd:type_name -> cedana.daemon.InheritFd
	9,  // 9: cedana.daemon.Job.Process:type_name -> cedana.daemon.ProcessState
	19, // 10: cedana.daemon.Job.Runc:type_name -> cedana.plugins.runc.Job
	10, // 11: cedana.daemon.ProcessState.Info:type_name -> cedana.daemon.ProcessInfo
	11, // 12: cedana.daemon.ProcessState.HostInfo:type_name -> cedana.daemon.HostInfo
	12, // 13: cedana.daemon.ProcessState.CPUInfo:type_name -> cedana.daemon.CPUInfo
	13, // 14: cedana.daemon.ProcessState.MemoryInfo:type_name -> cedana.daemon.MemoryInfo
	14, // 15: cedana.daemon.ProcessInfo.OpenFiles:type_name -> cedana.daemon.OpenFilesStat
	15, // 16: cedana.daemon.ProcessInfo.OpenConnections:type_name -> cedana.daemon.ConnectionStat
	16, // 17: cedana.daemon.ConnectionStat.Laddr:type_name -> cedana.daemon.Addr
	16, // 18: cedana.daemon.ConnectionStat.Raddr:type_name -> cedana.daemon.Addr
	0,  // 19: cedana.daemon.Daemon.Dump:input_type -> cedana.daemon.DumpReq
	3,  // 20: cedana.daemon.Daemon.Restore:input_type -> cedana.daemon.RestoreReq
	1,  // 21: cedana.daemon.Daemon.Dump:output_type -> cedana.daemon.DumpResp
	4,  // 22: cedana.daemon.Daemon.Restore:output_type -> cedana.daemon.RestoreResp
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_daemon_proto_init() }
func file_daemon_proto_init() {
	if File_daemon_proto != nil {
		return
	}
	file_daemon_proto_msgTypes[2].OneofWrappers = []any{
		(*DumpDetails_PID)(nil),
		(*DumpDetails_JID)(nil),
		(*DumpDetails_Runc)(nil),
	}
	file_daemon_proto_msgTypes[5].OneofWrappers = []any{
		(*RestoreDetails_JID)(nil),
		(*RestoreDetails_Runc)(nil),
	}
	file_daemon_proto_msgTypes[8].OneofWrappers = []any{
		(*Job_Runc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_daemon_proto_goTypes,
		DependencyIndexes: file_daemon_proto_depIdxs,
		MessageInfos:      file_daemon_proto_msgTypes,
	}.Build()
	File_daemon_proto = out.File
	file_daemon_proto_rawDesc = nil
	file_daemon_proto_goTypes = nil
	file_daemon_proto_depIdxs = nil
}

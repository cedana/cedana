// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlite

import (
	"context"
	_ "embed"
	"github.com/cedana/cedana/pkg/db/models"
)

//go:embed schema.sql
var Ddl string

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  jid, state
) VALUES (
  ?, ?
)
RETURNING jid, state
`

type CreateJobParams struct {
	Jid   []byte
	State []byte
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (models.Job, error) {
	row := q.db.QueryRowContext(ctx, createJob, arg.Jid, arg.State)
	var i models.Job
	err := row.Scan(&i.Jid, &i.State)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT jid, state FROM jobs
WHERE jid = ? LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, jid []byte) (models.Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, jid)
	var i models.Job
	err := row.Scan(&i.Jid, &i.State)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT jid, state FROM jobs
`

func (q *Queries) ListJobs(ctx context.Context) ([]models.Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Job
	for rows.Next() {
		var i models.Job
		if err := rows.Scan(&i.Jid, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs
set state = ?
WHERE jid = ?
`

type UpdateJobParams struct {
	Jid   []byte
	State []byte
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.ExecContext(ctx, updateJob, arg.State, arg.Jid)
	return err
}

---
description: 
globs: 
alwaysApply: true
---
# Git and GitHub Workflow for MainProjectName

**Last Updated:** 2025-05-15

This document outlines the Git branching strategy, commit message conventions, and Pull Request (PR) process for the MainProjectName project hosted on GitHub.

## 1. Branching Strategy

* **`main` branch**: Represents the production-ready code. Direct commits to `main` are prohibited. Merges to `main` happen only from the `develop` branch after thorough testing and approval, typically as part of a release process.
* **`develop` branch**: The primary integration branch for ongoing development. All feature branches are merged into `develop`. This branch should always be in a state that could potentially be released.
* **Feature branches**:
    * Create for new features, bug fixes, or improvements.
    * Branch off from `develop`.
    * Naming convention:
        * Features: `feature/descriptive-name` (e.g., `feature/user-profile-page`)
        * Bug fixes: `fix/descriptive-name` (e.g., `fix/login-validation-error`)
        * Chores/Refactoring: `chore/descriptive-name` (e.g., `chore/update-efcore-version`)
* **Release branches (optional)**: `release/vX.Y.Z` - Branched from `develop` when preparing for a new production release. Allows for stabilization and bug fixes specific to the release.
* **Hotfix branches (optional)**: `hotfix/issue-description` - Branched from `main` to address critical production bugs. Merged back into both `main` and `develop`.

## 2. Commit Messages

* **Format**: Follow the Conventional Commits specification.
    * `type(scope): short description`
    * `type`: `feat`, `fix`, `build`, `chore`, `docs`, `test`.
    * `scope` (optional): Module or part of the codebase affected (e.g., `frontend`, `api`, `db`, `openai`).
    * Example: `feat(account): add password reset functionality`
    * Example: `fix(efdal): correct query for fetching user orders`
* **Imperative Mood**: Start the short description with a verb in the imperative mood (e.g., "Add feature" not "Added feature" or "Adds feature").
* **Body (optional)**: Provide more context if needed, after a blank line.
* **Footer (optional)**: Reference issue numbers (e.g., `Closes #123`).
* **Resource**: [Conventional Commits](mdc:https:/www.conventionalcommits.org)

## 3. Pull Requests (PRs)

* **Target Branch**: PRs for features and fixes should target the `develop` branch.
* **PR Template**: Use a GitHub PR template to ensure descriptions include:
    * Purpose of the change.
    * How it was tested.
    * Related issue numbers.
* **Code Reviews**:
    * At least one approval from another team member is required before merging.
    * Reviewers should check for adherence to coding standards, correctness, performance, and test coverage.
* **CI Checks**: All CI checks (build, tests, linting) must pass before a PR can be merged.
* **Squash and Merge / Rebase and Merge**: Prefer "Squash and merge" or "Rebase and merge" to keep the `develop` branch history clean. Discuss team preference.

## 4. General Git Practices

* **Fetch and Rebase**: Regularly `git fetch` and `git rebase origin/develop` (or your feature branch's base) onto your local feature branch to incorporate the latest changes and avoid complex merge conflicts.
* **Small, Atomic Commits**: Make small, logical commits that represent a single unit of work.
* **`.gitignore`**: Ensure the `.gitignore` file is comprehensive and up-to-date to exclude build artifacts, user-specific files, and environment files.
    * A standard .NET `.gitignore` should be used as a base.
    * [GitHub's .gitignore template for VisualStudio](mdc:https:/github.com/github/gitignore/blob/main/VisualStudio.gitignore)
* **No Force Pushing to Shared Branches**: Avoid `git push --force` on `main`, `develop`, or other shared branches.

## 5. GitHub Usage

* **Issues**: Use GitHub Issues for tracking tasks, bugs, and feature requests.
* **Projects/Boards**: Utilize GitHub Projects for sprint planning and task visualization.

* **Labels**: Use labels effectively on issues and PRs.
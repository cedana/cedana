name: Test / Kubernetes

permissions:
  contents: read
  packages: read
  id-token: write
  pull-requests: write
  checks: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      gpu:
        type: boolean
        description: "Run including GPU tests"
        required: false
        default: false
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 4cpu-16g
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 4
      post_summary:
        type: boolean
        description: "Post test summary"
        required: false
        default: false

env:
  CEDANA_URL: ${{ vars.CEDANA_URL }}
  CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}

jobs:
  propagator-connectivity:
    name: Propagator Connectivity
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quick connectivity test
        run: |
          echo "Testing basic connectivity to Propagator API..."
          curl -I "$CEDANA_URL/user" -H "Authorization: Bearer $CEDANA_AUTH_TOKEN"
          echo "âœ“ Connectivity test completed"

  k3s:
    name: K3s
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.gpu && (matrix.arch == 'amd64' && inputs.runner_gpu || inputs.runner_gpu_arm64) || inputs.runner }}-${{ matrix.arch }}${{ inputs.gpu && '-cuda-12-4' || '' }}/extras=s3-cache
    timeout-minutes: 30
    needs: propagator-connectivity
    strategy:
      fail-fast: false
      matrix:
        cr:
          - streamer
          - default
        arch:
          - amd64
          - arm64
    container:
      image: ${{ inputs.gpu && 'cedana/cedana-test:cuda' || 'cedana/cedana-test:latest' }}
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init ${{ inputs.gpu && '--ipc=host --gpus all' || '' }} -v /var/run/docker.sock:/var/run/docker.sock --cgroupns=host
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download helm chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart
          path: /tmp/helm-chart

      - name: Download helper digest
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests

      - name: Download helper image name
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: /tmp/image-name

      - name: Download controller digest
        uses: actions/download-artifact@v4
        with:
          name: controller-digests-${{ matrix.arch }}
          path: /tmp/controller-digests

      - name: Download controller image name
        uses: actions/download-artifact@v4
        with:
          name: controller-image-name
          path: /tmp/controller-image-name

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Download runtime shim
        uses: actions/download-artifact@v4
        with:
          name: runtime-shim-${{ matrix.arch }}

      - name: Download GPU plugin
        if: ${{ inputs.gpu }}
        uses: actions/download-artifact@v4
        with:
          name: gpu-${{ matrix.arch }}

      - name: Download streamer plugin
        if: ${{ matrix.cr == 'streamer' }}
        uses: actions/download-artifact@v4
        with:
          name: streamer-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install
        env:
          GPU: ${{ inputs.gpu }}
          STREAMER: ${{ matrix.cr == 'streamer' }}
        run: |
          make install
          sudo -E cedana plugin install runc containerd crio criu storage/cedana
          sudo -E cedana plugin install k8s/runtime-shim  # automatically installs the downloaded binary if available instead
          if [ "$GPU" = "true" ]; then
            sudo -E cedana plugin install gpu # automatically installs the downloaded binary if available instead
          fi
          if [ "$STREAMER" = "true" ]; then
            sudo -E cedana plugin install streamer # automatically installs the downloaded binary if available instead
          fi

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run k8s tests
        env:
          CEDANA_CHECKPOINT_STREAMS: ${{ matrix.cr == 'streamer' && '4' || '0' }}
          GPU: ${{ inputs.gpu }}
          PARALLELISM: 1 # TODO: revert onces tested
          DEBUG: 0 # debug logging
          RETRIES: 1
        run: |
          HELPER_DIGEST=sha256:$(ls /tmp/digests | head -n 1)
          HELPER_REPO=$(cat /tmp/image-name/name.txt | head -n 1)
          CONTROLLER_DIGEST=sha256:$(ls /tmp/controller-digests | head -n 1)
          CONTROLLER_REPO=$(cat /tmp/controller-image-name/name.txt | head -n 1)
          HELM_CHART=/tmp/helm-chart

          if [ "$GPU" = "true" ]; then
            if [ "$LARGE" = "true" ]; then
              make test-k8s \
                TAGS=k3s \
                PARALLELISM=$PARALLELISM \
                RETRIES=$RETRIES \
                DEBUG=$DEBUG \
                CONTROLLER_REPO=$CONTROLLER_REPO \
                CONTROLLER_DIGEST=$CONTROLLER_DIGEST \
                HELPER_REPO=$HELPER_REPO \
                HELPER_DIGEST=$HELPER_DIGEST \
                HELM_CHART=$HELM_CHART
            else
              make test-k8s \
                TAGS=k3s,!large \
                PARALLELISM=$PARALLELISM \
                RETRIES=$RETRIES \
                DEBUG=$DEBUG \
                CONTROLLER_REPO=$CONTROLLER_REPO \
                CONTROLLER_DIGEST=$CONTROLLER_DIGEST \
                HELPER_REPO=$HELPER_REPO \
                HELPER_DIGEST=$HELPER_DIGEST \
                HELM_CHART=$HELM_CHART
            fi
          else
            if [ "$LARGE" = "true" ]; then
              make test-k8s \
                TAGS=k3s,!gpu \
                PARALLELISM=$PARALLELISM \
                RETRIES=$RETRIES \
                DEBUG=$DEBUG \
                CONTROLLER_REPO=$CONTROLLER_REPO \
                CONTROLLER_DIGEST=$CONTROLLER_DIGEST \
                HELPER_REPO=$HELPER_REPO \
                HELPER_DIGEST=$HELPER_DIGEST \
                HELM_CHART=$HELM_CHART
            else
              make test-k8s \
                TAGS=k3s,!gpu,!large \
                PARALLELISM=$PARALLELISM \
                RETRIES=$RETRIES \
                DEBUG=$DEBUG \
                CONTROLLER_REPO=$CONTROLLER_REPO \
                CONTROLLER_DIGEST=$CONTROLLER_DIGEST \
                HELPER_REPO=$HELPER_REPO \
                HELPER_DIGEST=$HELPER_DIGEST \
                HELM_CHART=$HELM_CHART
            fi
          fi

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}-k8s-k3s-${{ matrix.cr }}
          path: |
            /tmp/report*.xml

  post-summary:
    name: Post Summary
    if: inputs.post_summary && always()
    needs: k3s
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download report
        id: download-report
        uses: actions/download-artifact@v4
        with:
          pattern: test-report-${{ matrix.arch }}-k8s*
          path: report

      - name: Generate consolidated report
        run: npx junit-to-ctrf "report/**/*.xml" -o ctrf/report.json

      - name: Post report
        uses: ctrf-io/github-test-reporter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report-path: ctrf/*.json
          github-report: true
          failed-folded-report: true
          summary: true
          pull-request: true
          title: ${{ matrix.arch }}
          update-comment: true
          overwrite-comment: true
          comment-tag: test-report-k8s-${{ matrix.arch }}
          group-by: "suite"
          always-group-by: true
          upload-artifact: true
          artifact-name: ctrf-report-k8s-${{ matrix.arch }}

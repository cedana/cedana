name: Test

permissions:
  contents: read
  packages: read
  id-token: write
  pull-requests: write
  checks: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      platform:
        type: string
        description: "Platform to run tests on (K3s, EKS, GKE)"
        required: false
        default: K3s
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 4cpu-16g
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 4
      post_summary:
        type: boolean
        description: "Post test summary"
        required: false
        default: false

env:
  CEDANA_URL: ${{ vars.CEDANA_URL }}
  CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
  CEDANA_LOG_LEVEL: debug
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  GCLOUD_PROJECT_ID: ${{ vars.GCLOUD_PROJECT_ID }}
  GCLOUD_SERVICE_ACCOUNT_KEY: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}
  GCLOUD_REGION: ${{ vars.GCLOUD_REGION }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  FORMATTER: junit
  RETRIES: 1
  DEBUG: 0 # bats debug logging

jobs:
  propagator-connectivity:
    name: Propagator Connectivity (${{ inputs.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quick connectivity test
        run: |
          echo "Testing basic connectivity to Propagator API..."
          curl -I "$CEDANA_URL/user" -H "Authorization: Bearer $CEDANA_AUTH_TOKEN"
          echo "âœ“ Connectivity test completed"

  k8s:
    name: Kubernetes
    runs-on:
      ${{ (inputs.platform == 'eks' || inputs.platform == 'gke') && 'ubuntu-latest' || format(
      'runs-on={0}/runner={1}-{2}{3}/tag={4}-{5}/extras=s3-cache',
      github.run_id,
      matrix.compute == 'CUDA' && (matrix.arch == 'amd64' && inputs.runner_gpu || inputs.runner_gpu_arm64) || inputs.runner,
      matrix.arch,
      matrix.compute == 'CUDA' && '-cuda-12-4' || '',
      matrix.cr,
      matrix.storage
      ) }}
    timeout-minutes: 30
    needs: propagator-connectivity
    strategy:
      fail-fast: true
      matrix:
        platform:
          - ${{ inputs.platform }}
        compute:
          - CPU
          # - CUDA # TODO: Enable when GPU tests are added
        cr:
          - default
          - streamer
        storage:
          - storage/cedana
          - storage/s3
        arch:
          - amd64
          - arm64
        exclude: # XXX: Until github actions supports concurrency with matrix
          - platform: EKS
            arch: amd64
          - platform: GKE
            arch: arm64
      max-parallel: ${{ (inputs.platform == 'EKS' || inputs.platform == 'GKE') && 1 || 9999 }}
    container:
      image: ${{ matrix.compute == 'CUDA' && 'cedana/cedana-test:cuda' || 'cedana/cedana-test:latest' }}
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init ${{ matrix.compute == 'CUDA' && '--ipc=host --gpus all' || '' }} -v /var/run/docker.sock:/var/run/docker.sock --cgroupns=host
    steps:
      - uses: runs-on/action@v1

      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download helm chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart
          path: /tmp/helm-chart

      - name: Download helper digest
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests

      - name: Download helper image name
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: /tmp/image-name

      - name: Download controller digest
        uses: actions/download-artifact@v4
        with:
          name: controller-digests-${{ matrix.arch }}
          path: /tmp/controller-digests

      - name: Download controller image name
        uses: actions/download-artifact@v4
        with:
          name: controller-image-name
          path: /tmp/controller-image-name

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Download runtime shim
        uses: actions/download-artifact@v4
        with:
          name: shim-runc-v2-${{ matrix.arch }}

      - name: Download GPU plugin
        if: ${{ matrix.compute == 'CUDA' }}
        uses: actions/download-artifact@v4
        with:
          name: gpu-${{ matrix.arch }}

      - name: Download streamer plugin
        if: ${{ matrix.cr == 'streamer' }}
        uses: actions/download-artifact@v4
        with:
          name: streamer-${{ matrix.arch }}

      - name: Pre-install runtime shim
        if: matrix.platform == 'K3s' # k3s needs it pre-installed
        run: |
          chmod +x ./cedana*
          sudo -E ./cedana plugin install k8s/runtime-shim

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run k8s tests
        env:
          CEDANA_CHECKPOINT_DIR: ${{ matrix.storage == 'storage/s3' && 's3://checkpoints-ci' || 'cedana://ci' }}
          CEDANA_CHECKPOINT_STREAMS: ${{ matrix.cr == 'streamer' && '4' || '0' }}
          PLATFORM: ${{ matrix.platform }}
          GPU: ${{ matrix.compute == 'CUDA' && 'true' || 'false' }}
          STREAMER: ${{ matrix.cr == 'streamer' && 'true' || 'false' }}
          LARGE: ${{ inputs.large && 'true' || 'false' }}
          PARALLELISM: ${{ inputs.parallelism }}
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}-${{ matrix.arch }}
          GKE_CLUSTER_NAME: ${{ env.GKE_CLUSTER_NAME }}-${{ matrix.arch }}
        run: |
          HELPER_DIGEST=sha256:$(ls /tmp/digests | head -n 1)
          HELPER_REPO=$(cat /tmp/image-name/name.txt | head -n 1)
          CONTROLLER_DIGEST=sha256:$(ls /tmp/controller-digests | head -n 1)
          CONTROLLER_REPO=$(cat /tmp/controller-image-name/name.txt | head -n 1)
          HELM_CHART=/tmp/helm-chart

          CEDANA_PLUGINS_BUILDS=alpha
          CEDANA_PLUGINS_CRIU_VERSION=$(cat ./criu-version.txt)
          CEDANA_PLUGINS_RUNTIME_SHIM_VERSION=$(cat ./runtime-shim-version.txt)
          if [ "$GPU" = "true" ]; then
            CEDANA_PLUGINS_GPU_VERSION=$(cat ./gpu-version.txt)
          fi
          if [ "$STREAMER" = "true" ]; then
            CEDANA_PLUGINS_STREAMER_VERSION=$(cat ./streamer-version.txt)
          fi

          TAGS=$PLATFORM
          if [ "$GPU" = "true" ]; then
            TAGS=$TAGS,gpu
          else
            TAGS=$TAGS,!gpu
          fi
          if [ "$LARGE" != "true" ]; then
            TAGS=$TAGS,!large
          fi

          make test-k8s \
            TAGS=$TAGS \
            PARALLELISM=$PARALLELISM \
            RETRIES=$RETRIES \
            DEBUG=$DEBUG \
            FORMATTER=$FORMATTER \
            CONTROLLER_REPO=$CONTROLLER_REPO \
            CONTROLLER_DIGEST=$CONTROLLER_DIGEST \
            HELPER_REPO=$HELPER_REPO \
            HELPER_DIGEST=$HELPER_DIGEST \
            HELM_CHART=$HELM_CHART

      - name: Setup node
        if: always()
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate report
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report.xml" -t bats -o /tmp/report.json -e \
            appName="cedana" appVersion="$(git describe --tags --always)" \
            buildName="${{ github.head_ref || github.ref_name }}" buildNumber="${{ github.run_number }}" \
            buildUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            repositoryName="${{ github.repository }}" repositoryUrl="${{ github.server_url }}/${{ github.repository }}" \
            commit="${{ github.sha }}" branchName="${{ github.head_ref || github.ref_name }}" \
            osPlatform="$(uname -s) (${{ matrix.arch }})" osRelease="$(uname -r)" \
            testEnvironment="cedana/cedana-test" reportName="Kubernetes (${{ matrix.platform }}, ${{ matrix.compute }}, ${{ matrix.cr }}, ${{ matrix.arch }})"

      - name: Set sanitized storage
        if: always()
        env:
          STORAGE: ${{ matrix.storage }}
        run: |
          STORAGE=$(echo $STORAGE | sed 's/\//-/g')
          echo "STORAGE=$STORAGE" >> $GITHUB_ENV

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}-k8s-${{ matrix.platform }}-${{ matrix.cr }}-${{ env.STORAGE }}-${{ matrix.compute }}
          path: |
            /tmp/report*.json

  post-summary:
    name: Post Summary
    if: inputs.post_summary && always()
    needs: k8s
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download report
        id: download-report
        uses: actions/download-artifact@v4
        with:
          pattern: test-report-${{ matrix.arch }}-k8s*
          path: report

      - name: Post report
        uses: ctrf-io/github-test-reporter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report-path: report/**/*.json
          github-report: true
          failed-folded-report: true
          summary: true
          pull-request: true
          title: ${{ matrix.arch }}
          update-comment: true
          overwrite-comment: true
          comment-tag: test-report-k8s-${{ matrix.arch }}
          group-by: "suite"
          always-group-by: true
          upload-artifact: true
          artifact-name: ctrf-report-k8s-${{ matrix.arch }}

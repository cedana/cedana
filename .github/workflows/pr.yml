name: PR

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
  workflow_dispatch:
    inputs:
      debug_build:
        type: boolean
        description: 'Run build with debugging enabled'
        required: false
        default: false
      debug_smoke_test:
        type: boolean
        description: 'Run smoke test with debugging enabled'
        required: false
        default: false
      debug_regression_test:
        type: boolean
        description: 'Run regression test with debugging enabled'
        required: false
        default: false
      debug_correctness_test:
        type: boolean
        description: 'Run correctness test with debugging enabled'
        required: false
        default: false
      debug_unit_test:
        type: boolean
        description: 'Run unit test with debugging enabled'
        required: false
        default: false
      debug_bench:
        type: boolean
        description: 'Run benchmark with debugging enabled'
        required: false
        default: false
  workflow_call: # to reuse this workflow in other worflows
    inputs:
      debug_build:
        type: boolean
        description: 'Run build with debugging enabled'
        required: false
        default: false
      debug_smoke_test:
        type: boolean
        description: 'Run smoke test with debugging enabled'
        required: false
        default: false
      debug_regression_test:
        type: boolean
        description: 'Run regression test with debugging enabled'
        required: false
        default: false
      debug_correctness_test:
        type: boolean
        description: 'Run correctness test with debugging enabled'
        required: false
        default: false
      debug_unit_test:
        type: boolean
        description: 'Run unit test with debugging enabled'
        required: false
        default: false
      debug_bench:
        type: boolean
        description: 'Run benchmark with debugging enabled'
        required: false
        default: false
      skip_bench:
        type: boolean
        description: 'Skip benchmark or not'
        required: false
        default: false
      skip_shellcheck:
        type: boolean
        description: 'Skip shellcheck or not'
        required: false
        default: false

concurrency:
  group: cedana-pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: 'recursive'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_build }}
        with:
          limit-access-to-actor: true

      - name: Setup CI
        run: sudo -E make -C scripts/ci setup-build

      - name: Build
        run: sudo -E ./build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./cedana

  shellcheck:
    name: Shell Check
    if: ${{ !inputs.skip_shellcheck }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review # Change reporter.
          path: "." # Optional.
          pattern: |
            *.bash
            *.sh
            *.bats
          exclude: "./.git/*" # Optional.
          check_all_files_with_shebangs: "true" # Optional

  smoke-test:
    name: Smoke Tests
    runs-on: ubicloud-standard-8
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: 'recursive'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_smoke_test }}
        with:
          limit-access-to-actor: true

      - name: Setup CI
        run: |
          chmod +x cedana
          sudo -E make -C scripts/ci setup-full

      - name: Run smoke tests
        env:
          CI_BRANCH: ${{ github.ref_name }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          SIGNOZ_ACCESS_TOKEN: ${{ secrets.SIGNOZ_ACCESS_TOKEN }}
          CEDANA_OTEL_ENABLED: true
        run: sudo -E make -C scripts/ci smoke

  regression-test:
    name: Regression Tests
    runs-on: ubicloud-standard-8
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: 'recursive'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_regression_test }}
        with:
          limit-access-to-actor: true

      - name: Setup CI
        run: |
          chmod +x cedana
          sudo -E make -C scripts/ci setup-full
        env:
          SIGNOZ_ACCESS_TOKEN: ${{ secrets.SIGNOZ_ACCESS_TOKEN }}

      - name: Run regression tests
        env:
          CI_BRANCH: ${{ github.ref_name }}
          SIGNOZ_ACCESS_TOKEN: ${{ secrets.SIGNOZ_ACCESS_TOKEN }}
        run: sudo -E make -C scripts/ci regression

  correctness-test:
    name: Correctness Tests
    runs-on: ubicloud-standard-8
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: 'recursive'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_correctness_test }}
        with:
          limit-access-to-actor: true

      - name: Setup CI
        run: |
          chmod +x cedana
          sudo -E make -C scripts/ci setup-full
        env:
          SIGNOZ_ACCESS_TOKEN: ${{ secrets.SIGNOZ_ACCESS_TOKEN }}

      - name: Run correctness tests
        env:
          CI_BRANCH: ${{ github.ref_name }}
          SIGNOZ_ACCESS_TOKEN: ${{ secrets.SIGNOZ_ACCESS_TOKEN }}
        run: sudo -E make -C scripts/ci correctness

  unit-test:
    name: Unit Tests
    runs-on: ubicloud-standard-8
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: 'recursive'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_unit_test }}
        with:
          limit-access-to-actor: true

      - name: Install Go 1.23
        uses: actions/setup-go@v4
        with:
          go-version: 1.23
          check-latest: true

      - name: Setup CI
        run: |
          chmod +x cedana
          sudo -E make -C scripts/ci setup-build

      - name: Run unit tests
        run: |
          go test ./pkg/utils -v
        env:
          GO111MODULE: "on"
          CI_BRANCH: ${{ github.ref_name }}

  benchmark:
    name: Benchmark
    if: ${{ !inputs.skip_bench }}
    permissions:
      contents: 'read'
      packages: 'read'
      id-token: 'write'
      pull-requests: 'write'
    runs-on: ubicloud-standard-8
    needs: build
    container:
      image: ghcr.io/cedana/cedana-bench.ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged
    defaults:
      run:
        working-directory: /src
    steps:
      # Github actions unfortunately mounts the docker socket, which we don't want
      - name: Workaround for dind
        run: |
          umount /var/run/docker.sock
          sudo service supervisor start
          sleep 1
          supervisorctl restart dockerd

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        env:
          WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER }}
          SERVICE_ACCOUNT: ${{ vars.GCLOUD_BENCHMARK_SERVICE_ACCOUNT }}
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Download artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Configure
        env:
          PATH_CEDANA: ${{ steps.download-artifacts.outputs.download-path }}
          TAG: ${{ github.event.pull_request.head.ref }}
          COLOR_PALETTE: ${{ vars.BENCH_PALETTE_COMPARISON_LAST_PATCH }}
        run: |
          BINDIR=`jq -r '.crtools.list."cedana".bindir' bench.json`
          cp $PATH_CEDANA/cedana crtools/cedana/$BINDIR/
          jq '.crtools.list."cedana".source = "local"' bench.json > temp.json
          mv temp.json bench.json
          jq '.crtools.list."cedana".tag = "'$TAG'"' bench.json > temp.json
          mv temp.json bench.json
          jq '.plots.color_palette = "'$COLOR_PALETTE'"' bench.json > temp.json
          mv temp.json bench.json

      - name: Pull last result
        env:
          GCLOUD_PROJECT: ${{ steps.auth.outputs.project_id }}
          BIGQUERY_RESULTS_DATASET: ${{ vars.BIGQUERY_BENCH_RESULTS_DATASET }}
        run: ./bench results pull --runtime cedana:1

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_bench }}
        with:
          limit-access-to-actor: true

      - name: Run
        env:
          CLOUDSMITH_CEDANA_BENCH_TOKEN: ${{ secrets.CLOUDSMITH_ENTITLEMENT_TOKEN_BENCH }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          CMD: ${{ vars.BENCH_RUN_CMD_PR }}
        run: $CMD

      - name: Upload logs
        if: always()
        id: upload-logs
        uses: actions/upload-artifact@v4
        with:
          name: bench-logs
          path: |
            /src/*.log

      - name: Plot comparison
        run: ./bench plot --runtime cedana:2 --save

      - name: Upload plots
        id: upload-plots
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          predefinedAcl: publicRead
          project_id: ${{ steps.auth.outputs.project_id }}
          path: /src/results
          destination: cedana/pr-${{ github.event.pull_request.number }}
          glob: '**/*.png'

      - name: Generate summary
        env:
          RESULTS_BASE_URL: https://storage.googleapis.com/cedana/pr-${{ github.event.pull_request.number }}/results
          RESULTS_TITLE: "## Benchmark preview"
          RESULTS_DESCRIPTION: "> **${{ github.event.pull_request.head.ref }}** comparison w/ last patch\n*Updates on every commit to this branch*"
        run: |
          utils/results-summary > summary.md
          cat summary.md > $GITHUB_STEP_SUMMARY

      - name: Post summary
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: /src/summary.md
          comment_tag: execution

name: Test / CUDA

permissions:
  contents: read
  packages: read
  id-token: write
  pull-requests: write
  checks: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      streamer:
        type: boolean
        description: "Run including streamer tests"
        required: false
        default: false
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 2
      runner:
        type: string
        description: "Runner machine for tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_arm64:
        type: string
        description: "Runner machine for tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      post_summary:
        type: boolean
        description: "Post test summary"
        required: false
        default: false

env:
  CEDANA_URL: ${{ vars.CEDANA_URL }}
  CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}

jobs:
  cuda:
    name: CUDA
    runs-on: runs-on=${{github.run_id}}/runner=${{ matrix.arch == 'amd64' && inputs.runner || inputs.runner_arm64 }}-${{ matrix.arch }}-cuda-${{ matrix.cuda_version }}/extras=s3-cache
    if: ${{ inputs.streamer || matrix.cr != 'streamer' }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          # - 11-8  TODO: re-enable once compatibility is fixed
          # - 12-2
          - 12-4
          - 12-8
        cr:
          - default
          - streamer
        arch:
          - amd64
          - arm64
    container:
      image: cedana/cedana-test:cuda
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init --ipc=host --gpus all -v /var/run/docker.sock:/var/run/docker.sock --cgroupns=host
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Download streamer plugin # if provided from a caller workflow, will be later installed
        if: ${{ matrix.cr == 'streamer' }}
        uses: actions/download-artifact@v4
        with:
          name: streamer-${{ matrix.arch }}

      - name: Download GPU plugin # if provided from a caller workflow, will be later installed
        uses: actions/download-artifact@v4
        with:
          name: gpu-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install
        env:
          STREAMER: ${{ matrix.cr == 'streamer' && 'true' || 'false' }}
        run: |
          make install
          sudo -E cedana plugin install runc containerd crio criu storage/cedana
          sudo -E cedana plugin install gpu # automatically installs the downloaded binary if available instead
          if [ "$STREAMER" = "true" ]; then
            sudo -E cedana plugin install streamer # automatically installs the downloaded binary if available instead
          fi

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          STREAMER: ${{ matrix.cr == 'streamer' && 'true' || 'false' }}
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
          RETRIES: 1
        run: |
          if [ "$STREAMER" = "true" ]; then
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=gpu,streamer PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            else
              make test-regression TAGS=gpu,streamer,!large PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            fi
          else
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=gpu,!streamer PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            else
              make test-regression TAGS=gpu,!streamer,!large PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            fi
          fi

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}-cuda-${{ matrix.cuda_version }}
          path: |
            /tmp/report*.xml

  post-summary:
    name: Post Summary
    if: inputs.post_summary && always()
    needs: cuda
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          # - 11-8  TODO: re-enable once compatibility is fixed
          # - 12-2
          - 12-4
          - 12-8
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download report
        id: download-report
        uses: actions/download-artifact@v4
        with:
          pattern: test-report-${{ matrix.arch }}-cuda-${{ matrix.cuda_version }}
          path: report

      - name: Generate consolidated report
        run: npx junit-to-ctrf "report/**/*.xml" -o ctrf/report.json

      - name: Post report
        uses: ctrf-io/github-test-reporter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report-path: ctrf/*.json
          github-report: true
          failed-folded-report: true
          summary: true
          pull-request: true
          title: CUDA ${{ matrix.cuda_version }}, ${{ matrix.arch }}
          update-comment: true
          overwrite-comment: true
          comment-tag: test-report-cuda-${{ matrix.cuda_version }}-${{ matrix.arch }}
          group-by: "suite"
          always-group-by: true
          upload-artifact: true
          artifact-name: ctrf-report-cuda-${{ matrix.cuda_version }}-${{ matrix.arch }}

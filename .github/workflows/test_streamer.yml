name: Test / Streamer

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      gpu:
        type: boolean
        description: "Run including GPU tests"
        required: false
        default: false
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 4cpu-16g
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 4
      parallelism_gpu:
        type: number
        description: "Parallelism for running GPU tests"
        required: false
        default: 4

jobs:
  streamer:
    name: Streamer
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.gpu && (matrix.arch == 'amd64' && inputs.runner_gpu || inputs.runner_gpu_arm64) || inputs.runner }}-${{ matrix.arch }}${{ inputs.gpu && '-cuda-12-4' || '' }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    container:
      image: ${{ inputs.gpu && 'cedana/cedana-test:cuda' || 'cedana/cedana-test:latest' }}
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init ${{ inputs.gpu && '--ipc=host --gpus all' || '' }}
    env:
      CEDANA_URL: ${{ vars.CEDANA_URL }}
      CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Download streamer plugin # if provided from a caller workflow, will be later installed
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: streamer-${{ matrix.arch }}

      - name: Download GPU plugin # if provided from a caller workflow, will be later installed
        if: inputs.gpu
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: gpu-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          chmod +x ./libcedana-*.so
          echo "$PWD" >> $GITHUB_PATH

      - name: Install plugins
        env:
          GPU: ${{ inputs.gpu }}
        run: |
          sudo -E ./cedana plugin install runc containerd crio criu storage/cedana
          sudo -E ./cedana plugin install streamer  # automatically installs the downloaded binary if available instead
          if [ "$GPU" = "true" ]; then
            sudo -E ./cedana plugin install gpu # automatically installs the downloaded binary if available instead
          fi

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          GPU: ${{ inputs.gpu }}
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
          PARALLELISM_GPU: ${{ inputs.parallelism_gpu }}
        run: |
          if [ "$GPU" = "true" ]; then
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=streamer PARALLELISM=$PARALLELISM_GPU
            else
              make test-regression TAGS=streamer,!large PARALLELISM=$PARALLELISM_GPU
            fi
          else
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=streamer,!gpu PARALLELISM=$PARALLELISM
            else
              make test-regression TAGS=streamer,!gpu,!large PARALLELISM=$PARALLELISM
            fi
          fi

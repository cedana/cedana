name: Test / Streamer

permissions:
  contents: read
  packages: read
  id-token: write
  pull-requests: write
  checks: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 4cpu-16g
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 4
      parallelism_gpu:
        type: number
        description: "Parallelism for running GPU tests"
        required: false
        default: 2
      post_summary:
        type: boolean
        description: "Post test summary"
        required: false
        default: false

env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  CEDANA_URL: ${{ vars.CEDANA_URL }}
  CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
  CEDANA_LOG_LEVEL: debug
  RETRIES: 1
  DEBUG: 0 # bats debug logging

jobs:
  streamer:
    name: Streamer
    runs-on: runs-on=${{github.run_id}}/runner=${{ matrix.compute == 'CUDA' && (matrix.arch == 'amd64' && inputs.runner_gpu || inputs.runner_gpu_arm64) || inputs.runner }}-${{ matrix.arch }}${{ matrix.compute == 'CUDA' && '-cuda-12-4' || '' }}/extras=s3-cache
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        compute:
          - CPU
          - CUDA
        arch:
          - amd64
          - arm64
    container:
      image: ${{ matrix.compute == 'CUDA' && 'cedana/cedana-test:cuda' || 'cedana/cedana-test:latest' }}
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init ${{ matrix.compute == 'CUDA' && '--ipc=host --gpus all' || '' }} -v /var/run/docker.sock:/var/run/docker.sock --cgroupns=host
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Download streamer plugin # if provided from a caller workflow, will be later installed
        uses: actions/download-artifact@v4
        with:
          name: streamer-${{ matrix.arch }}

      - name: Download GPU plugin # if provided from a caller workflow, will be later installed
        if: matrix.compute == 'CUDA'
        uses: actions/download-artifact@v4
        with:
          name: gpu-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install
        env:
          GPU: ${{ matrix.compute == 'CUDA' && 'true' || 'false' }}
        run: |
          make install
          sudo -E cedana plugin install runc containerd crio criu storage/cedana
          sudo -E cedana plugin install streamer  # automatically installs the downloaded binary if available instead
          if [ "$GPU" = "true" ]; then
            sudo -E cedana plugin install gpu # automatically installs the downloaded binary if available instead
          fi

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          GPU: ${{ matrix.compute == 'CUDA' && 'true' || 'false' }}
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
          PARALLELISM_GPU: ${{ inputs.parallelism_gpu }}
        run: |
          if [ "$GPU" = "true" ]; then
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=gpu,streamer PARALLELISM=$PARALLELISM_GPU RETRIES=$RETRIES
            else
              make test-regression TAGS=gpu,streamer,!large PARALLELISM=$PARALLELISM_GPU RETRIES=$RETRIES
            fi
          else
            if [ "$LARGE" = "true" ]; then
              make test-regression TAGS=streamer,!gpu PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            else
              make test-regression TAGS=streamer,!gpu,!large PARALLELISM=$PARALLELISM RETRIES=$RETRIES
            fi
          fi

      - name: Setup node
        if: always()
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate report (isolated)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-isolated.xml" -t bats -o /tmp/report-isolated.json -e \
            --appName "cedana" --appVersion "${{ github.head_ref || github.ref_name }}" \
            --buildName "${{ github.head_ref || github.ref_name }}" --buildNumber "${{ github.run_number }}" \
            --buildUrl "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --repositoryName "${{ github.repository }}" --repositoryUrl "${{ github.server_url }}/${{ github.repository }}" \
            --commit "${{ github.sha }}" --branchName "${{ github.head_ref || github.ref_name }}" \
            --osPlatform "$(uname -s) (${{ matrix.arch }})" --osRelease "$(uname -r)" \
            --testEnvironment "Isolated daemon" --reportName "streamer (${{ matrix.compute }}, ${{ matrix.arch }})"

      - name: Generate report (persistent)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-persistent.xml" -t bats -o /tmp/report-persistent.json -e \
            --appName "cedana" --appVersion "${{ github.head_ref || github.ref_name }}" \
            --buildName "${{ github.head_ref || github.ref_name }}" --buildNumber "${{ github.run_number }}" \
            --buildUrl "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --repositoryName "${{ github.repository }}" --repositoryUrl "${{ github.server_url }}/${{ github.repository }}" \
            --commit "${{ github.sha }}" --branchName "${{ github.head_ref || github.ref_name }}" \
            --osPlatform "$(uname -s) (${{ matrix.arch }})" --osRelease "$(uname -r)" \
            --testEnvironment "Persistent daemon" --reportName "streamer (${{ matrix.compute }}, ${{ matrix.arch }})"

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}-streamer-${{ matrix.compute }}
          path: |
            /tmp/report*.json

  post-summary:
    name: Post Summary
    if: inputs.post_summary && always()
    needs: streamer
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download report
        id: download-report
        uses: actions/download-artifact@v4
        with:
          pattern: test-report-${{ matrix.arch }}-streamer-*
          path: report

      - name: Post report
        uses: ctrf-io/github-test-reporter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report-path: report/**/*.json
          github-report: true
          failed-folded-report: true
          summary: true
          pull-request: true
          title: ${{ matrix.arch }}
          update-comment: true
          overwrite-comment: true
          comment-tag: test-report-streamer-${{ matrix.arch }}
          group-by: "suite"
          always-group-by: true
          upload-artifact: true
          artifact-name: ctrf-report-streamer-${{ matrix.arch }}

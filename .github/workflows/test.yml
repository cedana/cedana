name: Test

permissions:
  contents: read
  packages: read
  id-token: write
  pull-requests: write
  checks: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      kubernetes:
        type: boolean
        description: "Run kubernetes tests"
        required: false
        default: true
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 2
      parallelism_gpu:
        type: number
        description: "Parallelism for running GPU tests"
        required: false
        default: 2
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 2cpu
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xT4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G
      post_summary_slack:
        type: string
        description: "Webhook URL for posting summary to Slack"
        required: false
        default: ""

env:
  CEDANA_URL: ${{ vars.CEDANA_URL }}
  CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
  CEDANA_LOG_LEVEL: debug
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  FORMATTER: junit
  RETRIES: 1
  DEBUG: 0 # bats debug logging

jobs:
  unit:
    name: Unit
    runs-on: runs-on=${{github.run_id}}/runner=1cpu-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          pattern: plugin-${{ matrix.arch }}*
          merge-multiple: true

      - name: Make executable
        run: |
          chmod +x ./cedana
          chmod +x ./libcedana-*.so

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Run unit tests
        run: make test-unit

  script:
    name: Script
    runs-on: runs-on=${{github.run_id}}/runner=1cpu-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        name:
          - k8s-setup-host
          # - slurm-setup-host
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Run k8s setup host
        env:
          CEDANA_PLUGINS_BUILDS: local
        run: |
          sudo -E chmod +x ./cedana
          sudo -E cp ./cedana /usr/local/bin/
          sudo -E mkdir -p /cedana/scripts/host
          sudo -E cp -r ./scripts/host/* /cedana/scripts/host
          sudo -E /cedana/scripts/host/${{ matrix.name }}.sh

  basic:
    name: Basic
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.runner }}-${{ matrix.arch }}/extras=s3-cache
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    container:
      image: cedana/cedana-test:latest
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init --cgroupns=host
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install
        run: |
          make install
          sudo -E cedana plugin install criu

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
        run: |
          if [ "$LARGE" = "true" ]; then
            make test-regression TAGS=base PARALLELISM=$PARALLELISM RETRIES=$RETRIES DEBUG=$DEBUG FORMATTER=$FORMATTER
          else
            make test-regression TAGS=base,!large PARALLELISM=$PARALLELISM RETRIES=$RETRIES DEBUG=$DEBUG FORMATTER=$FORMATTER
          fi

      - name: Setup node
        if: always()
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate report (isolated)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-isolated.xml" -t bats -o /tmp/report-isolated.json -e \
            appName="cedana" appVersion="$(git describe --tags --always)" \
            buildName="${{ github.head_ref || github.ref_name }}" buildNumber="${{ github.run_number }}" \
            buildUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            repositoryName="${{ github.repository }}" repositoryUrl="${{ github.server_url }}/${{ github.repository }}" \
            commit="${{ github.sha }}" branchName="${{ github.head_ref || github.ref_name }}" \
            osPlatform="$(uname -s) (${{ matrix.arch }})" osRelease="$(uname -r)" \
            testEnvironment="cedana/cedana-test" reportName="Basic (${{ matrix.arch }})"

      - name: Generate report (persistent)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-persistent.xml" -t bats -o /tmp/report-persistent.json -e \
            appName="cedana" appVersion="$(git describe --tags --always)" \
            buildName="${{ github.head_ref || github.ref_name }}" buildNumber="${{ github.run_number }}" \
            buildUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            repositoryName="${{ github.repository }}" repositoryUrl="${{ github.server_url }}/${{ github.repository }}" \
            commit="${{ github.sha }}" branchName="${{ github.head_ref || github.ref_name }}" \
            osPlatform="$(uname -s) (${{ matrix.arch }})" osRelease="$(uname -r)" \
            testEnvironment="cedana/cedana-test" reportName="Basic (${{ matrix.arch }})"

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}
          path: |
            /tmp/report*.json

  plugin:
    name: Plugin
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.runner }}-${{ matrix.arch }}/tag=${{ matrix.plugin }}/extras=s3-cache
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        plugin:
          - runc
          - containerd
          - crio
          - storage/cedana
          - storage/s3
          - storage/gcs
        arch:
          - amd64
          - arm64
    container:
      image: cedana/cedana-test:latest
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init --cgroupns=host
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          pattern: plugin-${{ matrix.arch }}*
          merge-multiple: true

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install
        run: |
          make install
          sudo -E cedana plugin install ${{ matrix.plugin }} criu runc storage/cedana storage/s3 storage/gcs

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
          PLUGIN: ${{ matrix.plugin }}
        run: |
          # replace slash in plugin with colon so that the tag is namespaced correctly
          # e.g. storage/cedana -> storage:cedana
          PLUGIN=$(echo $PLUGIN | sed 's/\//:/g')
          if [ "$LARGE" = "true" ]; then
            make test-regression TAGS=!gpu,!streamer,$PLUGIN PARALLELISM=$PARALLELISM RETRIES=$RETRIES DEBUG=$DEBUG FORMATTER=$FORMATTER
          else
            make test-regression TAGS=!gpu,!streamer,$PLUGIN,!large PARALLELISM=$PARALLELISM RETRIES=$RETRIES DEBUG=$DEBUG FORMATTER=$FORMATTER
          fi

      - name: Set plugin name
        if: always()
        env:
          PLUGIN: ${{ matrix.plugin }}
        run: |
          PLUGIN=$(echo $PLUGIN | sed 's/\//-/g')
          echo "PLUGIN=$PLUGIN" >> $GITHUB_ENV

      - name: Setup node
        if: always()
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate report (isolated)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-isolated.xml" -t bats -o /tmp/report-isolated.json -e \
            appName="cedana" appVersion="$(git describe --tags --always)" \
            buildName="${{ github.head_ref || github.ref_name }}" buildNumber="${{ github.run_number }}" \
            buildUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            repositoryName="${{ github.repository }}" repositoryUrl="${{ github.server_url }}/${{ github.repository }}" \
            commit="${{ github.sha }}" branchName="${{ github.head_ref || github.ref_name }}" \
            osPlatform="$(uname -s) (${{ matrix.arch }})" osRelease="$(uname -r)" \
            testEnvironment="cedana/cedana-test" reportName="${{ matrix.plugin }} (${{ matrix.arch }})"

      - name: Generate report (persistent)
        if: always()
        run: |
          npx junit-to-ctrf "/tmp/report-persistent.xml" -t bats -o /tmp/report-persistent.json -e \
            appName="cedana" appVersion="$(git describe --tags --always)" \
            buildName="${{ github.head_ref || github.ref_name }}" buildNumber="${{ github.run_number }}" \
            buildUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            repositoryName="${{ github.repository }}" repositoryUrl="${{ github.server_url }}/${{ github.repository }}" \
            commit="${{ github.sha }}" branchName="${{ github.head_ref || github.ref_name }}" \
            osPlatform="$(uname -s) (${{ matrix.arch }})" osRelease="$(uname -r)" \
            testEnvironment="cedana/cedana-test" reportName="${{ matrix.plugin }} (${{ matrix.arch }})"

      - name: Upload report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.arch }}-${{ env.PLUGIN }}
          path: |
            /tmp/report*.json

  streamer:
    name: Streamer
    uses: ./.github/workflows/test_streamer.yml
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      large: ${{ inputs.large }}
      parallelism: ${{ inputs.parallelism }}
      parallelism_gpu: ${{ inputs.parallelism_gpu }}
      runner: ${{ inputs.runner }}
      runner_gpu: ${{ inputs.runner_gpu }}
      runner_gpu_arm64: ${{ inputs.runner_gpu_arm64 }}
      post_summary: false # Will post consolidated summary instead

  gpu:
    name: GPU
    uses: ./.github/workflows/test_gpu.yml
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      large: ${{ inputs.large }}
      parallelism: ${{ inputs.parallelism_gpu }}
      runner: ${{ inputs.runner_gpu }}
      runner_arm64: ${{ inputs.runner_gpu_arm64 }}
      post_summary: false # Will post consolidated summary instead

  # XXX: Below kubernetes tests are split into separate workflows, instead of using matrix,
  # because of Github Actions issue of using concurrency group together with matrix jobs
  # within the same workflow file.
  # https://github.com/orgs/community/discussions/26774

  k3s:
    name: Kubernetes
    uses: ./.github/workflows/test_k8s.yml
    if: ${{ inputs.kubernetes }}
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      platform: K3s
      large: ${{ inputs.large }}
      runner: ${{ inputs.runner }}
      runner_gpu: ${{ inputs.runner_gpu }}
      runner_gpu_arm64: ${{ inputs.runner_gpu_arm64 }}
      post_summary: false # Will post consolidated summary instead

  eks:
    name: Kubernetes
    uses: ./.github/workflows/test_k8s.yml
    if: ${{ inputs.kubernetes }}
    secrets: inherit
    concurrency: test-k8s-eks # Since the cluster is reused
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      platform: EKS
      large: ${{ inputs.large }}
      post_summary: false # Will post consolidated summary instead

  gke:
    name: Kubernetes
    uses: ./.github/workflows/test_k8s.yml
    if: ${{ inputs.kubernetes }}
    secrets: inherit
    concurrency: test-k8s-gke # Since the cluster is reused
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      platform: GKE
      large: ${{ inputs.large }}
      post_summary: false # Will post consolidated summary instead

  post-summary:
    name: Post Summary
    if: always()
    needs: [basic, plugin, streamer, gpu, k3s, eks, gke]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
      max-parallel: 1
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download report
        id: download-report
        uses: actions/download-artifact@v4
        with:
          pattern: test-report-${{ matrix.arch }}*
          path: report

      - name: Post report
        uses: ctrf-io/github-test-reporter@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report-path: report/**/*.json
          github-report: true
          failed-folded-report: true
          flaky-report: true
          summary: true
          pull-request: true
          title: ${{ matrix.arch }}
          update-comment: true
          overwrite-comment: true
          comment-tag: test-report-${{ matrix.arch }}
          group-by: "suite"
          always-group-by: true
          upload-artifact: true
          artifact-name: ctrf-report-${{ matrix.arch }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Post report to Slack
        if: ${{ inputs.post_summary_slack != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.post_summary_slack == 'nightly' && secrets.SLACK_WEBHOOK_URL_TESTS_NIGHTLY || secrets.SLACK_WEBHOOK_URL_TESTS }}
          TITLE: "Test results (${{ matrix.arch }})"
        run: |
          npx slack-ctrf results "report/**/*.json" --title "$TITLE" --prefix ${{ github.repository }}

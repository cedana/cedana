name: Test

permissions:
  contents: read
  packages: read
  id-token: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "The branch, tag, or SHA to run on"
        required: false
        default: ""
      debug:
        type: boolean
        description: "Run with debugging enabled"
        required: false
        default: false
      gpu:
        type: boolean
        description: "Run GPU tests"
        required: false
        default: true
      streamer:
        type: boolean
        description: "Run streamer tests"
        required: false
        default: true
      large:
        type: boolean
        description: "Run large tests"
        required: false
        default: false
      parallelism:
        type: number
        description: "Parallelism for running tests"
        required: false
        default: 4
      parallelism_gpu:
        type: number
        description: "Parallelism for running GPU tests"
        required: false
        default: 1 # Low parallelism to avoid OOM on the GPU runner
      runner:
        type: string
        description: "Runner machine for CPU tests"
        required: false
        default: 4cpu-16g
      runner_gpu:
        type: string
        description: "Runner machine for GPU tests"
        required: false
        default: 4cpu-16g-1xL4
      runner_gpu_arm64:
        type: string
        description: "Runner machine for GPU tests (arm64)"
        required: false
        default: 8cpu-16g-1xT4G

jobs:
  unit:
    name: Unit
    runs-on: runs-on=${{github.run_id}}/runner=1cpu-4g-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana
          chmod +x ./libcedana-*.so

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Run unit tests
        run: make test-unit

  script:
    name: Scripts
    runs-on: runs-on=${{github.run_id}}/runner=1cpu-4g-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    env:
      CEDANA_URL: ${{ vars.CEDANA_URL }}
      CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Run k8s setup host
        run: |
          sudo -E chmod +x ./cedana
          sudo -E cp ./cedana /usr/local/bin/
          sudo -E mkdir -p /cedana/scripts
          sudo -E cp -r ./scripts/host/* /cedana/scripts/
          sudo -E /cedana/scripts/k8s-setup-host.sh

  regression:
    name: Basic
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.runner }}-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
    container:
      image: cedana/cedana-test:latest
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init
    env:
      CEDANA_URL: ${{ vars.CEDANA_URL }}
      CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          echo "$PWD" >> $GITHUB_PATH

      - name: Install CRIU
        run: sudo -E ./cedana plugin install criu

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
        run: |
          if [ "$LARGE" = "true" ]; then
            make test-regression TAGS=base PARALLELISM=$PARALLELISM
          else
            make test-regression TAGS=base,!large PARALLELISM=$PARALLELISM
          fi

  regression-plugins:
    name: Plugins
    runs-on: runs-on=${{github.run_id}}/runner=${{ inputs.runner }}-${{ matrix.arch }}/extras=s3-cache
    strategy:
      fail-fast: false
      matrix:
        plugin:
          - runc
          - containerd
          - crio
          - storage/cedana
          - storage/s3
          - storage/gcs
        arch:
          - amd64
          - arm64
    container:
      image: cedana/cedana-test:latest
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      options: --privileged --init
    env:
      CEDANA_URL: ${{ vars.CEDANA_URL }}
      CEDANA_AUTH_TOKEN: ${{ secrets.CEDANA_AUTH_TOKEN }}
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          repository: cedana/cedana # required for workflows reusing this workflow
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cedana-${{ matrix.arch }}

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          name: plugins-${{ matrix.arch }}

      - name: Download CRIU
        uses: actions/download-artifact@v4
        with:
          name: criu-${{ matrix.arch }}

      - name: Make executable
        run: |
          chmod +x ./cedana*
          chmod +x ./criu
          chmod +x ./libcedana-*.so
          echo "$PWD" >> $GITHUB_PATH

      - name: Install plugin
        run: sudo -E ./cedana plugin install ${{ matrix.plugin }} criu

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: inputs.debug
        with:
          limit-access-to-actor: true

      - name: Run regression tests
        env:
          LARGE: ${{ inputs.large }}
          PARALLELISM: ${{ inputs.parallelism }}
          PLUGIN: ${{ matrix.plugin }}
        run: |
          # replace slash in plugin with colon so that the tag is namespaced correctly
          # e.g. storage/cedana -> storage:cedana
          PLUGIN=$(echo $PLUGIN | sed 's/\//:/g')
          if [ "$LARGE" = "true" ]; then
            make test-regression TAGS=!gpu,!streamer,$PLUGIN PARALLELISM=$PARALLELISM
          else
            make test-regression TAGS=!gpu,!streamer,$PLUGIN,!large PARALLELISM=$PARALLELISM
          fi

  regression-streamer:
    name: Streamer
    uses: ./.github/workflows/test_streamer.yml
    if: inputs.streamer
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      gpu: ${{ inputs.gpu }}
      large: ${{ inputs.large }}
      parallelism: ${{ inputs.parallelism }}
      parallelism_gpu: ${{ inputs.parallelism_gpu }}
      runner: ${{ inputs.runner }}
      runner_gpu: ${{ inputs.runner_gpu }}
      runner_gpu_arm64: ${{ inputs.runner_gpu_arm64 }}

  regression-gpu:
    name: GPU
    uses: ./.github/workflows/test_gpu.yml
    if: inputs.gpu
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      debug: ${{ inputs.debug }}
      streamer: ${{ inputs.streamer }}
      large: ${{ inputs.large }}
      parallelism: ${{ inputs.parallelism_gpu }}
      runner: ${{ inputs.runner_gpu }}
      runner_arm64: ${{ inputs.runner_gpu_arm64 }}

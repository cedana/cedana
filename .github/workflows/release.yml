name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      debug_test:
        type: boolean
        description: "Run tests with debugging enabled"
        required: false
        default: false
      debug_build_publish_amd64:
        type: boolean
        description: "Run build & publish (amd64 binary) with debugging enabled"
        required: false
        default: false
      debug_build_push_amd64_image:
        type: boolean
        description: "Run build & push (amd64 image) with debugging enabled"
        required: false
        default: false
      debug_build_push_arm64_image:
        type: boolean
        description: "Run build & push (arm64 image) with debugging enabled"
        required: false
        default: false
      debug_bench:
        type: boolean
        description: "Run the benchmark with debugging enabled"
        required: false
        default: false
      post_summary:
        type: boolean
        description: "Post summary to slack"
        required: false
        default: false

permissions:
  contents: write

# Cancel any preceding run on the pull request.
concurrency:
  group: cedana-release-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    uses: ./.github/workflows/pr.yml
    permissions:
      contents: "read"
      packages: "read"
      id-token: "write"
      pull-requests: "write"
    with:
      debug_build: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_test }}
      debug_regression_test: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_test }}
      debug_unit_test: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_test }}
      debug_bench: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_test }}
      skip_bench: true # since benchmark will be run in a separate job below
      skip_shellcheck: true
      skip_helper_image_push: true
    secrets: inherit

  build-publish-amd64:
    name: Build & Publish (amd64)
    runs-on: ubicloud-standard-8
    needs: test
    container:
      image: cedana/cedana-test:latest
      credentials:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Mark git dir as safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_build_publish_amd64 }}
        with:
          limit-access-to-actor: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          args: release --clean --auto-snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find binaries
        run: |
          find dist -type f -name "cedana" -exec cp {} ./ \;
          find dist -type f -name "libcedana-runc.so" -exec cp {} ./ \;
          find dist -type f -name "libcedana-containerd.so" -exec cp {} ./ \;
          find dist -type f -name "libcedana-crio.so" -exec cp {} ./ \;
          find dist -type f -name "libcedana-k8s.so" -exec cp {} ./ \;

      - name: Push cedana to Cloudsmith
        id: push-cedana
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "cedana"
          repo: "cedana"
          file: "cedana"
          name: "cedana"
          version: ${{ github.ref_name }}
          republish: "true"

      - name: Push libcedana-runc.so to Cloudsmith
        id: push-libcedana-runc
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "cedana"
          repo: "cedana"
          file: "libcedana-runc.so"
          name: "libcedana-runc.so"
          version: ${{ github.ref_name }}
          republish: "true"

      - name: Push libcedana-containerd.so to Cloudsmith
        id: push-libcedana-containerd
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "cedana"
          repo: "cedana"
          file: "libcedana-containerd.so"
          name: "libcedana-containerd.so"
          version: ${{ github.ref_name }}
          republish: "true"

      - name: Push libcedana-crio.so to Cloudsmith
        id: push-libcedana-crio
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "cedana"
          repo: "cedana"
          file: "libcedana-crio.so"
          name: "libcedana-crio.so"
          version: ${{ github.ref_name }}
          republish: "true"

      - name: Push libcedana-k8s.so to Cloudsmith
        id: push-libcedana-k8s
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "cedana"
          repo: "cedana"
          file: "libcedana-k8s.so"
          name: "libcedana-k8s.so"
          version: ${{ github.ref_name }}
          republish: "true"

  build-push-image-manifest-amd64:
    name: Build & Push (amd64 image)
    runs-on: ubicloud-standard-8
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          fetch-tags: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: |
            ghcr.io/cedana/cedana
            cedana/cedana-helper

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_build_push_amd64_image }}
        with:
          limit-access-to-actor: true

      - name: Build and generate manifest for amd64
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=cedana/cedana-helper,push-by-digest=true,name-canonical=true,push=true
            type=image,name=ghcr.io/cedana/cedana,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest amd64
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-push-image-manifest-arm64:
    name: Build & Push (arm64 image)
    runs-on: ubicloud-standard-8-arm
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          fetch-tags: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: |
            ghcr.io/cedana/cedana
            cedana/cedana-helper

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_build_push_arm64_image }}
        with:
          limit-access-to-actor: true

      - name: Build and generate manifest for arm64
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=cedana/cedana-helper,push-by-digest=true,name-canonical=true,push=true
            type=image,name=ghcr.io/cedana/cedana,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest arm64
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  upload-manifests:
    name: Upload Manifests
    runs-on: ubicloud-standard-8
    needs: ["build-push-image-manifest-arm64", "build-push-image-manifest-amd64"]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/cedana/cedana
            cedana/cedana-helper

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/cedana/cedana@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'cedana/cedana-helper@sha256:%s ' *)

      - name: Inspect image
        run: |
          # check if push was successful
          docker buildx imagetools inspect cedana/cedana-helper:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ghcr.io/cedana/cedana:${{ steps.meta.outputs.version }}
          # check if commit sha matches with the latest commit sha
          # we only match docker hub image as both images should be the same
          echo $(docker run -i --rm cedana/cedana-helper:${{ steps.meta.outputs.version }} -c "cedana -v")

  # benchmark:
  #   name: Benchmark
  #   needs: ["build-publish-amd64"]
  #   permissions:
  #     contents: 'read'
  #     packages: 'read'
  #     id-token: 'write'
  #   runs-on: ubicloud-standard-8
  #   container:
  #     image: cedana/cedana-bench:ubuntu
  #     credentials:
  #       username: ${{ vars.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_TOKEN }}
  #     options: --privileged
  #   defaults:
  #     run:
  #       working-directory: /src
  #   steps:
  #     # Github actions unfortunately mounts the docker socket, which we don't want
  #     - name: Workaround for dind
  #       run: |
  #         umount /var/run/docker.sock
  #         sudo service supervisor start
  #         sleep 1
  #         supervisorctl restart dockerd

  #     - name: Get tag
  #       id: get-tag
  #       run: echo ::set-output name=TAG::$(echo $GITHUB_REF | cut -d / -f 3)

  #     - name: Download binary
  #       uses: robinraju/release-downloader@v1
  #       id: download
  #       with:
  #         tag: ${{ steps.get-tag.outputs.tag }}
  #         fileName: '*amd64.tar.gz'
  #         extract: true
  #         token: ${{ github.token }}
  #         out-file-path: /src

  #     - name: Configure
  #       env:
  #         PATH_CEDANA: /src
  #         TAG: ${{ steps.get-tag.outputs.TAG }}
  #         COLOR_PALETTE: ${{ vars.BENCH_PALETTE_COMPARISON_LAST_PATCH }}
  #       run: |
  #         BINDIR=`jq -r '.crtools.list."cedana".bindir' bench.json`
  #         cp $PATH_CEDANA/cedana crtools/cedana/$BINDIR/
  #         jq '.crtools.list."cedana".source = "local"' bench.json > temp.json
  #         mv temp.json bench.json
  #         jq '.crtools.list."cedana".tag = "'$TAG'"' bench.json > temp.json
  #         mv temp.json bench.json
  #         jq '.plots.color_palette = "'$COLOR_PALETTE'"' bench.json > temp.json
  #         mv temp.json bench.json

  #     - name: Setup debugging session
  #       uses: mxschmitt/action-tmate@v3
  #       if: ${{ startsWith(github.event_name, 'workflow') && inputs.debug_bench }}
  #       with:
  #         limit-access-to-actor: true

  #     - name: Run
  #       env:
  #         CLOUDSMITH_CEDANA_BENCH_TOKEN: ${{ secrets.CLOUDSMITH_ENTITLEMENT_TOKEN }}
  #         HF_TOKEN: ${{ secrets.HF_TOKEN }}
  #         CMD: ${{ vars.BENCH_RUN_CMD_RELEASE }}
  #       run: $CMD

  #     - name: Upload logs
  #       if: always()
  #       id: upload-logs
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bench-logs
  #         path: /src/*.log
  #
  #     - id: auth
  #       name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v1
        # env:
        #   PROJECT_ID: ${{ vars.GCLOUD_BENCHMARK_PROJECT_ID }}
        #   WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}
        #   SERVICE_ACCOUNT: ${{ vars.GCLOUD_SERVICE_ACCOUNT }}
        # with:
        #   project_id: ${{ env.PROJECT_ID }}
        #   workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        #   service_account: ${{ env.SERVICE_ACCOUNT }}

  #     - name: Push results
  #       env:
  #         GCLOUD_PROJECT: ${{ vars.GCLOUD_BENCHMARK_PROJECT_ID }}
  #         BIGQUERY_RESULTS_DATASET: ${{ vars.BIGQUERY_BENCH_RESULTS_DATASET }}
  #       run: ./bench results push --overwrite

  #     - name: Pull last results
  #       env:
  #         GCLOUD_PROJECT: ${{ vars.GCLOUD_BENCHMARK_PROJECT_ID }}
  #         BIGQUERY_RESULTS_DATASET: ${{ vars.BIGQUERY_BENCH_RESULTS_DATASET }}
  #       run: ./bench results pull --runtime cedana:2

  #     - name: Plot comparison w/ last patch
  #       env:
  #         COLOR_PALETTE: ${{ vars.BENCH_PALETTE_COMPARISON_LAST_PATCH }}
  #         FLAGS: ${{ vars.BENCH_PLOT_FLAGS }}
  #       run: |
  #         rm -rf results/*.png
  #         jq '.plots.color_palette = "'$COLOR_PALETTE'"' bench.json > temp.json
  #         mv temp.json bench.json
  #         ./bench plot --runtime cedana:2 --save $FLAGS

  #     - name: Upload plots (comparison w/ last patch)
  #       id: upload-plots-patch
  #       uses: google-github-actions/upload-cloud-storage@v2
  #       with:
  #         predefinedAcl: publicRead
  #         project_id: ${{ steps.auth.outputs.project_id }}
  #         path: /src/results
  #         destination: cedana/release-${{ steps.get-tag.outputs.TAG }}
  #         glob: '**/*.png'

  #     - name: Generate summary (comparison w/ last patch)
  #       id: summary-patch
  #       env:
  #         RESULTS_BASE_URL: https://storage.googleapis.com/cedana/release-${{ steps.get-tag.outputs.TAG }}/results
  #         RESULTS_TITLE: "cedana"
  #         RESULTS_DESCRIPTION: "**${{ steps.get-tag.outputs.TAG }}** comparison w/ last patch"
  #         RELEASE_NOTES_URL: https://github.com/${{ github.repository }}/releases/${{ steps.get-tag.outputs.TAG }}
  #       run: |
  #         utils/results-summary > $GITHUB_STEP_SUMMARY
  #         echo ::set-output name=slack_summary::$(utils/results-summary-slack)

  #     - name: Post summary (comparison w/ last patch)
  #       if: ${{ !startsWith(github.event_name, 'workflow') || (inputs.post_summary) }}
  #       id: slack-patch
  #       uses: slackapi/slack-github-action@v1.26.0
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PERFORMANCE }}
  #         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  #       with:
  #         payload: |
  #           ${{ steps.summary-patch.outputs.slack_summary }}

  post-summary:
    name: Post Summary
    runs-on: ubuntu-latest
    needs: ["build-publish-amd64"]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          fetch-tags: true

      - name: Get tag
        id: tag
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | sed -n '1p')

      - name: Get previous tag
        id: previous-tag
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | sed -n '2p')

      - name: Get release info
        id: release-info
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          token: ${{ github.token }}
          excludes: draft
          repository: ${{ github.repository }}

      - name: Download binaries
        id: download
        env:
          API_KEY: ${{ secrets.CLOUDSMITH_ENTITLEMENT_TOKEN }}
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          mkdir current
          cd current
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/cedana
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-runc.so
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-containerd.so
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-crio.so
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-k8s.so

      - name: Download previous binary
        id: download-previous
        env:
          API_KEY: ${{ secrets.CLOUDSMITH_ENTITLEMENT_TOKEN }}
          TAG: ${{ steps.previous-tag.outputs.tag }}
        run: |
          mkdir previous
          cd previous
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/cedana || true
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-runc.so || true
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-containerd.so || true
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-crio.so || true
          curl -1sLf -O https://dl.cloudsmith.io/$API_KEY/cedana/cedana/raw/versions/$TAG/libcedana-k8s.so || true

      - name: Generate summary
        id: summary
        env:
          RELEASE_TITLE: "cedana"
          RELEASE_DESCRIPTION: "**${{ steps.tag.outputs.tag }}**"
          RELEASE_NOTES_URL: https://github.com/${{ github.repository }}/releases/${{ steps.tag.outputs.tag }}
          RELEASE_BODY: "${{ steps.release-info.outputs.description }}"
          TAG: ${{ steps.tag.outputs.tag }}
          BINARIES_DIR: current
          PREVIOUS_TAG: ${{ steps.previous-tag.outputs.tag }}
          PREVIOUS_BINARIES_DIR: previous
        run: |
          echo $RELEASE_BODY > $GITHUB_STEP_SUMMARY
          echo ::set-output name=slack-summary::$(scripts/release-summary-slack)

      - name: Post summary
        if: ${{ !startsWith(github.event_name, 'workflow') || (inputs.post_summary) }}
        id: slack-patch
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_RELEASE }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            ${{ steps.summary.outputs.slack-summary }}
